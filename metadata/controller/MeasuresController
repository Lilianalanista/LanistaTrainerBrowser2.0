{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "measuresController",
        "designer|userClassName": "MeasuresController",
        "id": "measuresController"
    },
    "designerId": "bfc39f89-dd40-4fa4-be5d-36466ecdedb9",
    "cn": [
        {
            "type": "applicationaction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "callback"
                ],
                "fn": "onShowMeasuresPanel",
                "implHandler": [
                    "var controller = this,",
                    "    measuresPanel,",
                    "    mainStage\t= controller.getMainStage(),",
                    "    measuresPanel = controller.getMeasuresPanel(),",
                    "    measuresStore = Ext.getStore('MeasuresStore');",
                    "",
                    "measuresPanel.down('#measuresChat').show();",
                    "measuresPanel.down('#measuresTable').hide();",
                    "",
                    "controller.getTestTypesNodes();",
                    "",
                    "measuresStore.removeFilter('caliperFilter');",
                    "filterFunction = new Ext.util.Filter({",
                    "    id:'measuresFilter',",
                    "    property: \"user_id\", value: LanistaTrainer.app.currentCustomer.data.id,",
                    "    filterFn: function(item){",
                    "        return (item.data.weight !== 0 || item.data.height !== 0 || item.data.futrex !== 0);",
                    "    }",
                    "});",
                    "measuresStore.filters.add (filterFunction);",
                    "measuresStore.sort( {",
                    "    direction: 'DESC',",
                    "    property: 'record_date'",
                    "});",
                    "measuresStore.load(function(records, operation, success) {",
                    "    mainStage.add( measuresPanel );",
                    "    measuresPanel.on('hide', function(component) {",
                    "        component.destroy();",
                    "    }, controller);",
                    "",
                    "    // **** 1 create the commands",
                    "    LanistaTrainer.app.setStandardButtons('closeMeasuresPanelButton');",
                    "    controller.showCommands();",
                    "",
                    "    // *** 2 Show the panel",
                    "    measuresPanel.show();",
                    "",
                    "    LanistaTrainer.app.fireEvent('showMeasuresHeaderUpdate');",
                    "    LanistaTrainer.app.fireEvent('showStage');",
                    "",
                    "    // *** 4 Callback",
                    "    if (callback instanceof Function) callback();",
                    "",
                    "    // *** 5 Load data",
                    "    controller.loadData();",
                    "});",
                    ""
                ],
                "name": "showMeasuresPanel",
                "scope": "this"
            },
            "designerId": "f5b7b91f-753b-494d-9d8a-f29a97987ff7"
        },
        {
            "type": "applicationaction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "callback"
                ],
                "fn": "onCloseMeasuresPanel",
                "implHandler": [
                    "var controller = this;",
                    "LanistaTrainer.app.fireEvent('hideStage', function () {",
                    "    controller.getRightCommandPanel().items.each(function (item) {",
                    "        item.hide();",
                    "    });",
                    "    controller.getLeftCommandPanel().items.each(function (item) {",
                    "        item.hide();",
                    "    });",
                    "    controller.getMeasuresPanel().hide();",
                    "    if (callback instanceof Function) callback();",
                    "});"
                ],
                "name": "closeMeasuresPanel",
                "scope": "this"
            },
            "designerId": "a0663461-a2da-429e-9792-15d9827b54f5"
        },
        {
            "type": "applicationaction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onShowMeasuresHeaderUpdate",
                "implHandler": [
                    "var controller = this;",
                    "if (this.getMeasuresPanel() && !this.getMeasuresPanel().isHidden()) {",
                    "    controller.getMainViewport().down(\"#header\").update({",
                    "       info: '',",
                    "       title: ''",
                    "    });",
                    "}"
                ],
                "name": "showMeasuresHeaderUpdate",
                "scope": "this"
            },
            "designerId": "1a33481f-73df-471d-8b43-c4faa7c75f5e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "viewport #showMeasuresPanelButton",
                "designer|targetType": "LanistaButton",
                "fn": "onShowMeasuresPanelButtonClick",
                "implHandler": [
                    "var controller = this;",
                    "controller.currentPanel = new Ext.util.MixedCollection();",
                    "controller.currentPanel.add('measuresTab','chart');",
                    "controller.currentPanel.add('caliperTab','chart');",
                    "controller.currentPanel.add('circumferencesTab','chart');",
                    "",
                    "LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1], function() {",
                    "    LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'MeasuresPanel';",
                    "    LanistaTrainer.app.fireEvent('showMeasuresPanel');",
                    "});",
                    "",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "d4819218-9cf1-4011-a1a8-10962ddc0765"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "viewport #closeMeasuresPanelButton",
                "designer|targetType": "LanistaButton",
                "fn": "onCloseMeasuresPanelButtonClick",
                "implHandler": [
                    "LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);",
                    "LanistaTrainer.app.fireEvent('closeMeasuresPanel', function() {",
                    "    LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);",
                    "});",
                    "",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "812c3407-3455-4f67-b0b9-5aa87272c3c7"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "measuresPanel",
                "selector": "measuresPanel",
                "xtype": "measuresPanel"
            },
            "designerId": "334937f3-d9c2-40cc-8cb6-84b7a361755f"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "chartWindow",
                "selector": "chartWindow",
                "xtype": "chartWindow"
            },
            "designerId": "e1221d42-4656-4259-8e2d-5961ddd9b955"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainStage",
                "selector": "#mainStage"
            },
            "designerId": "b6257adc-f755-4be7-9e89-6c4c136d8863"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "rightCommandPanel",
                "selector": "#rightCommandPanel"
            },
            "designerId": "1abd5f4d-5139-4862-9120-0cdb00e09877"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainViewport",
                "selector": "mainViewport"
            },
            "designerId": "b3241564-e142-4299-8836-0a5b6d89873c"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "leftCommandPanel",
                "selector": "#leftCommandPanel"
            },
            "designerId": "aee02bb4-beb6-42a7-b525-d5e044276dc4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "measuresPanel #measureTabs",
                "designer|targetType": "Ext.tab.Panel",
                "fn": "onTabpanelTabChange",
                "implHandler": [
                    "var controller = this,",
                    "    store;",
                    "",
                    "controller.showCommands();",
                    "",
                    "if ( newCard.id == 'measuresTab' ) {",
                    "    store = Ext.getStore('MeasuresStore');",
                    "    store.removeFilter('measuresFilter');",
                    "    store.removeFilter('caliperFilter');",
                    "    filterFunction = new Ext.util.Filter({",
                    "        id:'measuresFilter',",
                    "        property: \"user_id\", value: LanistaTrainer.app.currentCustomer.data.id,",
                    "        filterFn: function(item){",
                    "            return (item.data.weight !== 0 || item.data.height !== 0 || item.data.futrex !== 0);",
                    "        }",
                    "    });",
                    "    store.filters.add (filterFunction);",
                    "    store.loadPage(1);",
                    "}else if ( newCard.id == 'caliperTab' ) {",
                    "    store = Ext.getStore('MeasuresStore');",
                    "    store.removeFilter('measuresFilter');",
                    "    store.removeFilter('caliperFilter');",
                    "    filterFunction = new Ext.util.Filter({",
                    "        id:'caliperFilter',",
                    "        property: \"user_id\", value: LanistaTrainer.app.currentCustomer.data.id,",
                    "        filterFn: function(item){",
                    "            return (item.data.trizeps   !== 0 ||",
                    "                    item.data.scapula   !== 0 ||",
                    "                    item.data.auxiliar  !== 0 ||",
                    "                    item.data.chest     !== 0 ||",
                    "                    item.data.sprailium !== 0 ||",
                    "                    item.data.abs       !== 0 ||",
                    "                    item.data.quads     !== 0 );",
                    "        }",
                    "    });",
                    "    store.filters.add (filterFunction);",
                    "    store.loadPage(1);",
                    "}else if ( newCard.id == 'circumferencesTab') {",
                    "    store = Ext.getStore('CircumferencesStore');",
                    "    store.removeFilter('circumFilter');",
                    "    var filter = new Ext.util.Filter({",
                    "        id: 'circumFilter',",
                    "        property: \"user_id\",",
                    "        value   : LanistaTrainer.app.currentCustomer.data.id",
                    "    });",
                    "    store.filters.add (filter);",
                    "    store.loadPage(1);",
                    "}",
                    ""
                ],
                "name": "tabchange",
                "scope": "me"
            },
            "designerId": "da3763c6-daba-4c3d-ac62-f7eba20ea367"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "viewport  #chartTableButton",
                "designer|targetType": "LanistaButton",
                "fn": "onchartTableButtonClick",
                "implHandler": [
                    "var controller = this,",
                    "    measuresPanel = controller.getMeasuresPanel(),",
                    "    activeTab;",
                    "",
                    "    activeTab = measuresPanel.down('#measureTabs').getActiveTab();",
                    "",
                    "if (!controller.currentPanel.get(activeTab.id) || controller.currentPanel.get(activeTab.id) === 'table'){",
                    "    activeTab.down('#measuresChat').show();",
                    "    activeTab.down('#measuresTable').hide();",
                    "}",
                    "else{",
                    "    activeTab.down('#measuresChat').hide();",
                    "    activeTab.down('#measuresTable').show();",
                    "}",
                    "controller.currentPanel.replace(activeTab.id, (!controller.currentPanel.get(activeTab.id) || controller.currentPanel.get(activeTab.id) === 'table') ? 'chart' : 'table');"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "8361af0c-858c-4ff7-bb42-a43f8410ebfe"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "item"
                ],
                "fn": "showForm",
                "implHandler": [
                    "var controller = LanistaTrainer.app.getController('MeasuresController'),",
                    "    windowPanel = controller.getChartWindow(),",
                    "    viewPort = LanistaTrainer.app.getController('MainController').getLanistaStage().up('mainViewport'),",
                    "    activeTab = controller.getMeasuresPanel().down('#measureTabs').getActiveTab(),",
                    "    storeMeasures,",
                    "    recordMeasures;",
                    "",
                    "controller.showCommandsForm();",
                    "controller.item = item ? item : '';",
                    "",
                    " switch(activeTab.id) {",
                    "    case 'measuresTab':",
                    "             if (item)",
                    "                windowPanel.down('#measuresTabForm').loadRecord(item);",
                    "",
                    "             windowPanel.down('#circumferencesTabForm').hide();",
                    "             windowPanel.setHeight(510);",
                    "             break;",
                    "    case 'caliperTab':",
                    "             if (item)",
                    "                windowPanel.down('#measuresTabForm').loadRecord(item);",
                    "",
                    "             windowPanel.down('#circumferencesTabForm').hide();",
                    "             windowPanel.setHeight(610);",
                    "             break;",
                    "    case 'circumferencesTab':",
                    "             if (item)",
                    "                windowPanel.down('#circumferencesTabForm').loadRecord(item);",
                    "",
                    "             windowPanel.down('#measuresTabForm').hide();",
                    "             windowPanel.setHeight(660);",
                    "             break;",
                    "}",
                    "",
                    "viewPort.add( windowPanel );",
                    "windowPanel.show ();",
                    "windowPanel.on ( 'hide', function ( component ) {",
                    "    component.destroy ();",
                    "});"
                ]
            },
            "designerId": "b246e619-f06a-42d8-95f5-011999c7e0a1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "viewport #saveMeasureButton",
                "designer|targetType": "LanistaButton",
                "fn": "onSaveMeasuresButtonClick",
                "implHandler": [
                    "var controller = this,",
                    "    formPanel,",
                    "    activeTab = controller.getMeasuresPanel().down('#measureTabs').getActiveTab(),",
                    "    item,",
                    "    fields, fieldsII,",
                    "    url,",
                    "    today = new Date();",
                    "",
                    "if (activeTab.id === 'measuresTab' || activeTab.id === 'caliperTab'){",
                    "    formPanel = controller.getChartWindow().down('#measuresTabForm');",
                    "    url = Ext.ux.ConfigManager.getRoot() + '/tpmanager/user/weightjson';",
                    "}",
                    "if (activeTab.id === 'circumferencesTab'){",
                    "    formPanel = controller.getChartWindow().down('#circumferencesTabForm');",
                    "    url = Ext.ux.ConfigManager.getRoot() + '/tpmanager/user/bodymeasuresjson';",
                    "}",
                    "",
                    "fields = formPanel.getForm().getValues();",
                    "fieldsII = formPanel.getForm().getFields();",
                    "//if (!controller.item){",
                    "",
                    "    if (activeTab.id === 'circumferencesTab')",
                    "        item = Ext.create('LanistaTrainer.model.Circumferences');",
                    "    else",
                    "        item = Ext.create('LanistaTrainer.model.Measures');",
                    "",
                    "    item.data = fields;",
                    "    item.data.user_id = LanistaTrainer.app.currentCustomer.data.id;",
                    "    item.data.customer_id = LanistaTrainer.app.currentCustomer.data.id;",
                    "",
                    "    if (activeTab.id === 'circumferencesTab'){",
                    "        item.data.chest = fieldsII.getByKey('chest_circ').value;",
                    "        item.data.note = fieldsII.getByKey('note_circ').value;",
                    "        item.data.record_date = fieldsII.getByKey('record_date_local_circ').value;",
                    "    }",
                    "    else",
                    "        item.data.record_date = fieldsII.getByKey('record_date_local').value;",
                    "",
                    "    formPanel.loadRecord(item);",
                    "/*}",
                    "else{",
                    "",
                    "    if (activeTab.id === 'circumferencesTab'){",
                    "        fields.chest = fieldsII.getByKey('chest_circ').value;",
                    "        fields.note = fieldsII.getByKey('note_circ').value;",
                    "        fields.record_date = fieldsII.getByKey('record_date_local_circ').value;",
                    "    }",
                    "    else",
                    "        fields.record_date = fieldsII.getByKey('record_date_local').value;",
                    "}*/",
                    "",
                    "formPanel.updateRecord();",
                    "formPanel.getRecord().setProxy(new Ext.data.proxy.Ajax({",
                    "    url: url,",
                    "    noCache: false,",
                    "    reader: {",
                    "        type: 'json',",
                    "        root: 'entries'",
                    "    },",
                    "    writer: {",
                    "        type: 'json',",
                    "        root: 'records',",
                    "        allowSingle: false",
                    "    },",
                    "    headers: {",
                    "        user_id: localStorage.getItem(\"user_id\")",
                    "    }",
                    "}));",
                    "",
                    "formPanel.getRecord().save({",
                    "    callback: function(record,event,success) {",
                    "        if (success)",
                    "        {",
                    "            formPanel.loadRecord(record);",
                    "            if (activeTab.id === 'measuresTab' || activeTab.id === 'caliperTab')",
                    "                Ext.getStore('MeasuresStore').load();",
                    "            if (activeTab.id === 'circumferencesTab')",
                    "                Ext.getStore('CircumferencesStore').load();",
                    "            if (controller.currentPanel.get(activeTab.id) === 'chart')",
                    "                activeTab.down('#measuresChat').show();",
                    "            else",
                    "                activeTab.down('#measuresTable').show();",
                    "",
                    "            Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_SAVE, Ext.ux.LanguageManager.TranslationArray.MSG_DATA_SAVE, Ext.emptyFn);",
                    "            controller.getChartWindow().hide();",
                    "        }",
                    "        else",
                    "            Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, Ext.emptyFn);",
                    "    }",
                    "});"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "19839fa0-45e8-417a-9a5f-7dcb86c6be18"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "viewport #cancelMeasureButton",
                "designer|targetType": "LanistaButton",
                "fn": "onCancelMeasureButtonClick",
                "implHandler": [
                    "var controller = this;",
                    "    form = controller.getChartWindow();",
                    "",
                    "form.down('#measuresTabForm').loadRecord(controller.item);",
                    "",
                    "controller.showCommandsForm();",
                    "form.down('#saveMeasureButton').hide();",
                    "form.down('#cancelMeasureButton').hide();",
                    "form.down('#deleteMeasureButton').show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "a6bab74c-5e12-466f-bc2d-0022ec269983"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showCommandsForm",
                "implHandler": [
                    "var controller = LanistaTrainer.app.getController('MeasuresController'),",
                    "    windowPanelFrame = controller.getChartWindow().down('#buttonContainerMes');",
                    "",
                    "windowPanelFrame.items.each(function (item) {",
                    "    item.hide();",
                    "});",
                    "",
                    "windowPanelFrame.add(",
                    "    Ext.create('LanistaTrainer.view.LanistaButton', {",
                    "        text: Ext.ux.LanguageManager.TranslationArray.BUTTON_SAVE,",
                    "        itemId: 'saveMeasureButton',",
                    "        glyph: '100@Lanista Icons', //d",
                    "        cls: [",
                    "            'lanista-command-button',",
                    "            'lanista-command-button-green'",
                    "            ],",
                    "        hidden: true",
                    "    })",
                    ");",
                    "",
                    "windowPanelFrame.add(",
                    "    Ext.create('LanistaTrainer.view.LanistaButton', {",
                    "        text: Ext.ux.LanguageManager.TranslationArray.BUTTON_CANCEL,",
                    "        itemId: 'cancelMeasureButton',",
                    "        glyph: '98@Lanista Icons', //b",
                    "        cls: [",
                    "            'lanista-command-button',",
                    "            'lanista-command-button-red'",
                    "            ],",
                    "        hidden: true",
                    "    })",
                    ");",
                    "",
                    "windowPanelFrame.add(",
                    "    Ext.create('LanistaTrainer.view.LanistaButton', {",
                    "        text: Ext.ux.LanguageManager.TranslationArray.DELETE,",
                    "        itemId: 'deleteMeasureButton',",
                    "        glyph: '68@Lanista Icons', //D",
                    "        cls: [",
                    "            'lanista-command-button',",
                    "            'lanista-command-button-red'",
                    "            ]",
                    "    })",
                    ");"
                ]
            },
            "designerId": "3f647ab6-df9c-4d4b-af4f-0e0769f29129"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "callback"
                ],
                "fn": "showCommands",
                "implHandler": [
                    "",
                    "var controller = this,",
                    "    activeTab;",
                    "",
                    "    activeTab = controller.getMeasuresPanel().down('#measureTabs').getActiveTab();",
                    "",
                    "",
                    "controller.getRightCommandPanel().items.each(function (item) {",
                    "    item.hide();",
                    "});",
                    "",
                    "if (activeTab.id === 'testsTab'){",
                    "    this.getRightCommandPanel().add(",
                    "        Ext.create('LanistaTrainer.view.LanistaButton', {",
                    "            text: Ext.ux.LanguageManager.TranslationArray.BUTTON_ADD_EXERCISES,",
                    "            itemId: 'newTestButton',",
                    "            menu: controller.menuTest(),",
                    "            menuButtonAlign: 'right',",
                    "            cls: [",
                    "                'lanista-command-button',",
                    "                'lanista-command-button-green'",
                    "            ],",
                    "            glyph: '108@Lanista Icons' //l",
                    "        })",
                    "    );",
                    "}",
                    "else{",
                    "    this.getRightCommandPanel().add(",
                    "        Ext.create('LanistaTrainer.view.LanistaButton', {",
                    "            text: Ext.ux.LanguageManager.TranslationArray.BUTTON_ADD_EXERCISES,",
                    "            itemId: 'newMeasureButton',",
                    "            cls: [",
                    "                'lanista-command-button',",
                    "                'lanista-command-button-green'",
                    "            ],",
                    "            glyph: '108@Lanista Icons' //l",
                    "        })",
                    "    );",
                    "    ",
                    "    this.getRightCommandPanel().add(",
                    "        Ext.create('LanistaTrainer.view.LanistaButton', {",
                    "            text: Ext.ux.LanguageManager.TranslationArray.BUTTON_ADD_EXERCISES,",
                    "            itemId: 'chartTableButton',",
                    "            glyph: '79@Lanista Icons' //O",
                    "        })",
                    "    );",
                    "}"
                ]
            },
            "designerId": "048deebf-e2bc-43c1-9fb8-f9b84f4432d8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadData",
                "implHandler": [
                    ""
                ]
            },
            "designerId": "ee867c14-dece-4d74-992c-a3e809f540ae"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "viewport #deleteMeasureButton",
                "designer|targetType": "LanistaButton",
                "fn": "onDeleteMeasureButtonClick",
                "implHandler": [
                    "var controller = this,",
                    "    formPanel,",
                    "    measuresModel,",
                    "    url,",
                    "    destroy,",
                    "    activeTab = controller.getMeasuresPanel().down('#measureTabs').getActiveTab();",
                    "",
                    "if (activeTab.id === 'measuresTab' || activeTab.id === 'caliperTab'){",
                    "    formPanel = controller.getChartWindow().down('#measuresTabForm');",
                    "    measuresModel = Ext.create('LanistaTrainer.model.Measures');",
                    "    url = Ext.ux.ConfigManager.getRoot() + '/tpmanager/user/weightjson';",
                    "    destroy = Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/user/deleteweight';",
                    "}",
                    "else{",
                    "    if (activeTab.id === 'circumferencesTab'){",
                    "        formPanel = controller.getChartWindow().down('#circumferencesTabForm');",
                    "        measuresModel = Ext.create('LanistaTrainer.model.Circumferences');",
                    "        url = Ext.ux.ConfigManager.getRoot() + '/tpmanager/user/bodymeasuresjson';",
                    "        destroy = Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/user/bodymeasuresjson';",
                    "    }",
                    "}",
                    "",
                    "userId = localStorage.getItem(\"user_id\");",
                    "",
                    "measuresModel.data = formPanel.getRecord().data;",
                    "measuresModel.phantom = false;",
                    "measuresModel.setProxy(new Ext.data.proxy.Ajax({",
                    "    url: url,",
                    "    model: 'Measures',",
                    "    noCache: false,",
                    "    writer: {",
                    "            type: 'json',",
                    "            root: 'records',",
                    "            allowSingle: false",
                    "    },",
                    "    api: {",
                    "        create: undefined,",
                    "        read: undefined,",
                    "        update: undefined,",
                    "        destroy: destroy",
                    "    },",
                    "    headers: {",
                    "        user_id: userId",
                    "    }",
                    "}));",
                    "",
                    "measuresModel.destroy ({",
                    "    action: 'destroy',",
                    "    callback: function(record,event,success) {",
                    "        if (event.success)",
                    "        {",
                    "            Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_SAVE, Ext.ux.LanguageManager.TranslationArray.MSG_DATA_SAVE, Ext.emptyFn);",
                    "            if (activeTab.id === 'measuresTab' || activeTab.id === 'caliperTab')",
                    "                Ext.getStore('MeasuresStore').load();",
                    "            if (activeTab.id === 'circumferencesTab')",
                    "                Ext.getStore('CircumferencesStore').load();",
                    "            controller.getChartWindow().hide();",
                    "        }",
                    "        else",
                    "            Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, Ext.emptyFn);",
                    "    }",
                    "});",
                    "",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "378aec0f-0a15-4f56-8fa8-d3b30cd7482f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "viewport #newMeasureButton",
                "designer|targetType": "LanistaButton",
                "fn": "onNewMeasureButtonClick",
                "implHandler": [
                    "LanistaTrainer.app.getController('MeasuresController').showForm();"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "ac65a741-3b40-43cb-ab57-3753cbd3b251"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getTestTypesNodes",
                "implHandler": [
                    "var controller = this,",
                    "    data,",
                    "    testTypes,",
                    "    testTypesNodes,",
                    "    userId = localStorage.getItem(\"user_id\"),",
                    "    entries = [],",
                    "    nodes = [],",
                    "    testTypesStore = Ext.getStore('TestTypesStore');",
                    "    testTypesNodesStore = Ext.getStore('TestTypesNodesStore');",
                    "",
                    "Ext.Ajax.request({",
                    "    url: Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + \"/tpmanager/user/testtypesjson\",",
                    "    method: 'get',",
                    "    headers: {",
                    "            user_id: userId",
                    "        },",
                    "    failure : function(result, request){",
                    "        //console.log( \"Failure form getPlan\" );",
                    "    },",
                    "    success: function(response, opts) {",
                    "        try {",
                    "            data = Ext.decode(response.responseText);",
                    "            entries = data.entries;",
                    "",
                    "            for (var i=0; i < entries.length; i++){",
                    "                    testTypes = Ext.create('LanistaTrainer.model.TestTypes', {",
                    "                        id: entries[i].id,",
                    "                        name_DE: entries[i].name_DE,",
                    "                        name_EN: entries[i].name_EN,",
                    "                        name_ES: entries[i].name_ES,",
                    "                        sections_names_DE: entries[i].sections_names_DE,",
                    "                        sections_names_ES: entries[i].sections_names_ES,",
                    "                        sections_names_EN: entries[i].sections_names_EN,",
                    "                        sections_id: entries[i].sections_id,",
                    "                        description_DE: entries[i].description_DE,",
                    "                        description_EN: entries[i].description_EN,",
                    "                        description_ES: entries[i].description_ES,",
                    "                        duration: entries[i].duration,",
                    "                        tools_DE: entries[i].tools_DE,",
                    "                        tools_EN: entries[i].tools_EN,",
                    "                        tools_ES: entries[i].tools_ES",
                    "                    });",
                    "",
                    "                    testTypesStore.add(testTypes);",
                    "",
                    "                    if (entries[i].nodes){",
                    "                        nodes = entries[i].nodes;",
                    "                        for (var j=0; j < nodes.length; j++){",
                    "                            testTypesNodes = Ext.create('LanistaTrainer.model.TestTypesNodes', {",
                    "                                id: nodes[j].id,",
                    "                                name_DE: nodes[j].name_DE,",
                    "                                name_EN: nodes[j].name_EN,",
                    "                                name_ES: nodes[j].name_ES,",
                    "                                scale_DE: nodes[j].scale_DE,",
                    "                                scale_EN: nodes[j].scale_EN,",
                    "                                scale_ES: nodes[j].scale_ES,",
                    "                                type: nodes[j].type,",
                    "                                testtypes_id: nodes[j].testtypes_id,",
                    "                                section_id: nodes[j].section_id",
                    "                            });",
                    "                            testTypesNodesStore.add(testTypesNodes);",
                    "                        }",
                    "                    }",
                    "            }",
                    "        }",
                    "        catch( err ) {",
                    "            //Ext.Msg.alert('Problem', 'Templatesinformation könnten nicht gelessen werden', Ext.emptyFn);",
                    "            Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_INVITATION_CONFIRMATION_ERROR_1, Ext.ux.LanguageManager.TranslationArray.MSG_INVITATION_CONFIRMATION_ERROR_1, Ext.emptyFn);",
                    "        }",
                    "    }",
                    "});"
                ]
            },
            "designerId": "fac0cad5-34ed-4f6e-a685-8f58f2bd468c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "menuTest",
                "implHandler": [
                    "var controller = this,",
                    "    menu = new Ext.menu.Menu(",
                    "        {",
                    "            Itemid:'testMenu',",
                    "            defaults: {",
                    "                height: '50px',",
                    "                width: '220px'",
                    "            }",
                    "        }",
                    "    ),",
                    "    testTypesStore = Ext.getStore('TestTypesStore'),",
                    "    testTypesNodesStore,",
                    "    items,",
                    "    objItem,",
                    "    lang = Ext.ux.LanguageManager.lang;",
                    "",
                    "items = testTypesStore.data.items;",
                    "",
                    "for (var i = 0; i < items.length; i++){",
                    "    objItem = {text: lang === 'DE' ? items[i].data.name_DE.toUpperCase() :",
                    "                     lang === 'EN' ? items[i].data.name_EN.toUpperCase() :",
                    "                     lang === 'ES' ? items[i].data.name_ES.toUpperCase() : '',",
                    "               itemId: items[i].data.id,",
                    "               handler: function (itemMenu) {",
                    "                   controller.showTest(itemMenu.itemId);",
                    "               }",
                    "              };",
                    "    menu.add(objItem);",
                    "}",
                    "",
                    "return menu;"
                ]
            },
            "designerId": "0f3ab09e-6310-48f1-8291-2149a70242a8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "type",
                    "ifNew"
                ],
                "fn": "showTest",
                "implHandler": [
                    "var controller = this,",
                    "    testTypesNodesStore = Ext.getStore('TestTypesNodesStore'),",
                    "    measuresPanel = controller.getMeasuresPanel(),",
                    "    testGrid,",
                    "    nodes,",
                    "    lang = Ext.ux.LanguageManager.lang,",
                    "    arrayScale = [],",
                    "    firstNode,",
                    "    arrayFields = [],",
                    "    nodesStore,",
                    "    nodesModel;",
                    "",
                    "testTypesNodesStore.removeFilter('testFilter');",
                    "var filter = new Ext.util.Filter({",
                    "    id: 'testFilter',",
                    "    property: \"testtypes_id\",",
                    "    root: 'data',",
                    "    value   : type",
                    "});",
                    "testTypesNodesStore.filters.add (filter);",
                    "testTypesNodesStore.filter();",
                    "",
                    "firstNode = testTypesNodesStore.first();",
                    "arrayScale = firstNode.data.scale_DE.split('|');",
                    "",
                    "arrayFields[0] = {name: 'Name', type: 'string'};",
                    "arrayFields[1] = {name: 'Type', type: 'string'};",
                    "for (var i = 0; i < arrayScale.length; i++ ){",
                    "    arrayFields[i + 2] = {name: 'Node' + i, type: 'string'};",
                    "}",
                    "",
                    "",
                    "",
                    "Ext.define('NodesModel', {",
                    "    extend: 'Ext.data.Model',",
                    "    fields: arrayFields",
                    "});",
                    "nodesStore = Ext.create('Ext.data.Store', {",
                    "    model: 'NodesModel'",
                    "});",
                    "",
                    "/*",
                    "arrayFields[0] = lang === 'DE' ? firstNode.data.name_DE :",
                    "                 lang === 'EN' ? firstNode.data.name_EN :",
                    "                 lang === 'ES' ? firstNode.data.name_ES : '';",
                    "arrayFields[1] = firstNode.data.type;",
                    "",
                    "for (var i = 0; i < arrayScale.length; i++ ){",
                    "    arrayFields[i + 2] = arrayScale[i];",
                    "}",
                    "*/",
                    "",
                    "",
                    "console.log('VALORES............');",
                    "console.log(nodesStore);",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "//nodes = testTypesNodesStore.data.items;",
                    "//testGrid = measuresPanel.down('#measureTabs').down('#testsTab');",
                    "",
                    "/*for (var i = 0; i < nodes.length; i++){",
                    "",
                    "    Ext.create('Ext.grid.Panel', {",
                    "        title: lang === 'DE' ? nodes[i].data.name_DE :",
                    "               lang === 'EN' ? nodes[i].data.name_EN :",
                    "               lang === 'ES' ? nodes[i].data.name_ES : '',",
                    "        store: Ext.data.StoreManager.lookup('employeeStore'),",
                    "        columns: [",
                    "            {text: 'First Name',  dataIndex:'firstname'},",
                    "            {text: 'Last Name',  dataIndex:'lastname'},",
                    "            {text: 'Hired Month',  dataIndex:'hired', xtype:'datecolumn', format:'M'},",
                    "            {text: 'Department (Yrs)', xtype:'templatecolumn', tpl:'{dep} ({seniority})'}",
                    "        ],",
                    "        width: 400,",
                    "        forceFit: true,",
                    "        renderTo: Ext.getBody()",
                    "    });",
                    "",
                    "",
                    "}*/",
                    "",
                    ""
                ]
            },
            "designerId": "62c5ba08-73fe-45d5-9cf5-043695441c5b"
        }
    ]
}