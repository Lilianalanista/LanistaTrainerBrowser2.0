{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "exercisesController",
        "designer|userClassName": "ExercisesController",
        "id": "exercisesController"
    },
    "designerId": "52ded827-c29d-4d9f-8209-c4791844ebf6",
    "cn": [
        {
            "type": "applicationaction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "callback"
                ],
                "fn": "onShowExercisesPanel",
                "implHandler": [
                    "var controller = this,",
                    "    exercisesPanel\t= controller.getExercisesPanel(),",
                    "    mainStage\t= controller.getMainStage(),",
                    "    store = Ext.getStore('ExerciseStore'),",
                    "    userId = localStorage.getItem(\"user_id\"),",
                    "    exercise,",
                    "    ini = 4000,",
                    "    myExercies = false,",
                    "    user = Ext.ux.SessionManager.getUser();",
                    "",
                    "exercisesPanel.controller = controller;",
                    "var viewportXCapacity\t= Math.floor(mainStage.getEl().getWidth(true)/187);",
                    "var viewportCapacity\t= Math.floor((mainStage.getEl().getHeight(true)-47)/177) * viewportXCapacity;",
                    "",
                    "store.pageSize = viewportCapacity;",
                    "",
                    "for (var i = 0; i < store.filters.length; i++)",
                    "{",
                    "    if (store.filters.items[i].id  == 'myExercises'){",
                    "        myExercies = true;",
                    "        break;",
                    "    }",
                    "",
                    "}",
                    "",
                    "if (!myExercies)",
                    "    store.clearFilter(true);",
                    "",
                    "store.sort('name_' + Ext.ux.LanguageManager.lang, 'ASC');",
                    "store.load();",
                    "",
                    "//controller.lookUserExercises();",
                    "if (user && user.role === '2' ){",
                    "    Ext.Ajax.request({",
                    "        url: Ext.ux.ConfigManager.getRoot() +'/tpmanager/exercise/userexercisesjson',",
                    "        method: 'get',",
                    "        headers: {",
                    "            user_id: userId",
                    "        },",
                    "        failure : function(result, request){",
                    "            console.log( \"There were problems in looking for user exercises\" );",
                    "        },",
                    "        success: function(response, opts) {",
                    "            try {",
                    "                    var data = Ext.decode(response.responseText),",
                    "                        storeVar = Ext.getStore('ExerciseStore');",
                    "",
                    "                    for (var i = 0; i < data.entries.length; i++){",
                    "                        exercise = Ext.create('LanistaTrainer.model.ExerciseModel', {",
                    "                            id: (ini + parseInt(data.entries[i].id)),",
                    "                            name_EN: data.entries[i].name_EN,",
                    "                            name_ES: data.entries[i].name_ES,",
                    "                            name_DE: data.entries[i].name_DE,",
                    "                            ext_id: data.entries[i].ext_id,",
                    "                            type: data.entries[i].type ? parseInt(data.entries[i].type) : 0,",
                    "                            changed_date: data.entries[i].changed_date,",
                    "                            unilateral: data.entries[i].unilateral,",
                    "                            coatchingnotes_DE: data.entries[i].coatchingnotes_DE ,",
                    "                            coatchingnotes_ES: data.entries[i].coatchingnotes_ES,",
                    "                            coatchingnotes_EN: data.entries[i].coatchingnotes_EN,",
                    "                            mistakes_DE: data.entries[i].mistakes_DE,",
                    "                            mistakes_ES: data.entries[i].mistakes_ES,",
                    "                            mistakes_EN: data.entries[i].mistakes_EN,",
                    "                            muscle: data.entries[i].muscle ? parseInt(data.entries[i].muscle) : 0,",
                    "                            addition: data.entries[i].addition ? parseInt(data.entries[i].addition) : 0",
                    "                        });",
                    "                        exercise.setDirty();",
                    "                        //exercise.phantom = true;",
                    "                        //storeVar.add(exercise, ini + parseInt(data.entries[i].id));",
                    "                        storeVar.add(exercise);",
                    "                    }",
                    "",
                    "                    storeVar.sync();",
                    "                    storeVar.save();",
                    "                    //store.proxy.totalCount = store.proxy.totalCount + (data.entries.length - 1);",
                    "",
                    "                    Ext.getStore('ExerciseStore').load(function(records, operation, success) {",
                    "                        mainStage.add( exercisesPanel );",
                    "                        mainStage.getLayout().setActiveItem(\"ExercisesPanel\");",
                    "",
                    "                        exercisesPanel.on('hide', function(component) {",
                    "                            component.destroy();",
                    "                        }, controller);",
                    "",
                    "                        // **** 1 create the commands",
                    "                        LanistaTrainer.app.setStandardButtons('closeExercisesPanelButton');",
                    "                        controller.showCommands();",
                    "",
                    "                        // *** 2 Show the panel",
                    "                        exercisesPanel.show();",
                    "",
                    "                        LanistaTrainer.app.fireEvent('showSearchHeaderUpdate');",
                    "                        LanistaTrainer.app.fireEvent('showStage');",
                    "",
                    "                        // *** 4 Callback",
                    "                        if (callback instanceof Function) callback();",
                    "",
                    "                        // *** 5 Load data",
                    "                        controller.loadData();",
                    "                    });",
                    "               }",
                    "            catch( err ) {",
                    "                Ext.Msg.alert('Problem', 'There were problems in looking for user exercises', Ext.emptyFn);",
                    "            }",
                    "        }",
                    "    });",
                    "}",
                    "else{",
                    "    mainStage.add( exercisesPanel );",
                    "    mainStage.getLayout().setActiveItem(\"ExercisesPanel\");",
                    "",
                    "    exercisesPanel.on('hide', function(component) {",
                    "        component.destroy();",
                    "    }, controller);",
                    "",
                    "    // **** 1 create the commands",
                    "    LanistaTrainer.app.setStandardButtons('closeExercisesPanelButton');",
                    "    controller.showCommands();",
                    "",
                    "    // *** 2 Show the panel",
                    "    exercisesPanel.show();",
                    "",
                    "    LanistaTrainer.app.fireEvent('showSearchHeaderUpdate');",
                    "    LanistaTrainer.app.fireEvent('showStage');",
                    "",
                    "    // *** 4 Callback",
                    "    if (callback instanceof Function) callback();",
                    "",
                    "    // *** 5 Load data",
                    "    controller.loadData();",
                    "}"
                ],
                "name": "showExercisesPanel",
                "scope": "this"
            },
            "designerId": "38c4d2c6-9096-4906-aed3-66d874f3fb51"
        },
        {
            "type": "applicationaction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "callback"
                ],
                "fn": "onCloseExercisesPanel",
                "implHandler": [
                    "var controller = this;",
                    "LanistaTrainer.app.fireEvent('hideStage', function () {",
                    "    controller.getRightCommandPanel().items.each(function (item) {",
                    "        item.hide();",
                    "    });",
                    "    controller.getLeftCommandPanel().items.each(function (item) {",
                    "        item.hide();",
                    "    });",
                    "    controller.getExercisesPanel().hide();",
                    "    if (callback instanceof Function) callback();",
                    "});"
                ],
                "name": "closeExercisesPanel",
                "scope": "this"
            },
            "designerId": "d6974465-aac4-4a2f-9d1e-bb810ce2cb05"
        },
        {
            "type": "applicationaction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value",
                    "type"
                ],
                "fn": "onShowExercisesFiltered",
                "implHandler": [
                    ""
                ],
                "name": "showExercisesFiltered",
                "scope": "this"
            },
            "designerId": "d12722c9-b60f-48d7-a9df-26a14003dbf4"
        },
        {
            "type": "applicationaction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "afterLoadCallback"
                ],
                "fn": "onLoadExercises",
                "implHandler": [
                    "",
                    "var controller = this;",
                    "Ext.getStore('ExerciseStore').load({",
                    "\tcallback: function(records, operation, success) {",
                    "        console.log(\"RECORDS \" + records.length);",
                    "\t\tif (records.length === 0) {",
                    "\t\t\tExt.getStore('ExerciseInitialStore').load({",
                    "\t\t\t\tcallback: function(records, operation, success) {",
                    "\t\t\t\t\tvar data = records;",
                    "\t\t\t\t\tvar record = null;",
                    "\t\t\t\t\tfor (var i = 0; i < records.length; i++) {",
                    "\t\t\t\t\t\trecord = records[i].copy(records[i].data.id);",
                    "                        record.setDirty();",
                    "\t\t\t\t\t\tExt.getStore('ExerciseStore').add(record);",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\tExt.getStore('ExerciseStore').sync();",
                    "                    Ext.getStore('ExerciseInitialStore').removeAll();",
                    "                    Ext.getStore('ExerciseStore').loadPage(1);",
                    "                    if (afterLoadCallback instanceof Function) {",
                    "\t\t\t\t\t\tafterLoadCallback();",
                    "\t\t\t\t\t}",
                    "\t\t\t\t},",
                    "\t\t\t\t\tscope: this",
                    "\t\t\t});",
                    "\t\t} else {",
                    "            setTimeout(function()",
                    "            {",
                    "                console.log(\"EXERCISES JUST CHARGED \");",
                    "                Ext.getStore('ExerciseStore').loadPage(1);",
                    "                afterLoadCallback();",
                    "            }, 500);",
                    "\t\t}",
                    "\t},",
                    "\tscope: this",
                    "});"
                ],
                "name": "loadExercises",
                "scope": "this"
            },
            "designerId": "b19e224b-b5fa-4840-8dd2-aeb2542dd943"
        },
        {
            "type": "applicationaction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onShowSearchHeaderUpdate",
                "implHandler": [
                    "var store = Ext.getStore('ExerciseStore'),",
                    "     page = store.currentPage,",
                    "     totalPages = \"\",",
                    "     filter = \"\",",
                    "     controller = this,",
                    "     numOfExercises = store.proxy.totalCount,",
                    "     totalPages = Math.ceil(numOfExercises/store.pageSize),",
                    "     searchByTextObj,",
                    "     searchText = controller.textToSearch,",
                    "     info;",
                    "",
                    "if (store.filters.items.length > 2){",
                    "    filter = ((Ext.isNumber(store.filters.items[1].value)) && (store.filters.items[1].textOptSel) ? '<div class=\"filterTitle\"><span>Musclegruppe  </span> </div> <div class=\"filterText\">' + store.filters.items[1].textOptSel+'</div> <div class=\"lanista-delete-search lanista-icon\" id=\"deleteSearchFilter\">&nbsp;u</div>' : '') + ((Ext.isNumber(store.filters.items[0].value)) && (store.filters.items[0].textOptSel) ? '<div class=\"filterTitle\"><span> Übungstyp </span> </div> <div class=\"filterText\">'+store.filters.items[0].textOptSel+'</div> <div class=\"lanista-delete-search lanista-icon\" id=\"deleteSearchFilter\">&nbsp;u</div>' : '') + ((Ext.isNumber(store.filters.items[2].value)) && (store.filters.items[2].textOptSel)  ? '<div class=\"filterTitle\"><span> Zusätze  </span> </div> <div class=\"filterText\">' + store.filters.items[2].textOptSel+'</div> <div class=\"lanista-delete-search lanista-icon\" id=\"deleteSearchFilter\">&nbsp;u</div>' : '');",
                    "}",
                    "",
                    "searchByTextObj = store.filters.findBy( function(item, key) {",
                    "    return (key === 'filterByWord');",
                    "});",
                    "if (searchByTextObj)",
                    "    filter = filter ? filter + '<div class=\"filterTitle\"><span>' + Ext.ux.LanguageManager.TranslationArray.FILTER_TEXT_SEARCH + '</span></div>  <div class=\"filterText\">' + searchText.toUpperCase() + '</div> <div class=\"lanista-delete-search lanista-icon\" id=\"deleteSearchFilter\">&nbsp;u</div>' : '<div class=\"filterTitle\"><span>' + Ext.ux.LanguageManager.TranslationArray.FILTER_TEXT_SEARCH + '</span></div>  <div class=\"filterText\">' + searchText.toUpperCase() + '</div> <div class=\"lanista-delete-search lanista-icon\" id=\"deleteSearchFilter\">&nbsp;u</div>';",
                    "",
                    "if (this.getExercisesPanel() && !this.getExercisesPanel().isHidden()) {",
                    "    if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') &&",
                    "         (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'LoginPanel')     &&",
                    "         (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'FavoritesPanel'))",
                    "        info = '<div class=\"exercises-header\"><div class=\"header-filter lanista-exercise-filter-plan\">';",
                    "    else",
                    "        info = '<div class=\"exercises-header\"><div class=\"header-filter\">';",
                    "    info = info + filter + '</div>' + numOfExercises + ' ' + Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase() + '<br><span class=\"header-subtitle\">' + Ext.ux.LanguageManager.TranslationArray.PAGE + ' '+ page +' ' + Ext.ux.LanguageManager.TranslationArray.VON + ' '+totalPages+'</span></div>';",
                    "",
                    "    controller.getMainViewport().down(\"#header\").update({",
                    "       info:  this.getExercisesPanel().headerInfo ?  this.getExercisesPanel().headerInfo + info : info,",
                    "       title: this.getExercisesPanel().headerTitle ? this.getExercisesPanel().headerTitle : Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase()",
                    "    });",
                    "}"
                ],
                "name": "showSearchHeaderUpdate",
                "scope": "this"
            },
            "designerId": "e8f65cd2-661e-415f-8682-d58a4fc3e3c0"
        },
        {
            "type": "applicationaction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "myexercisename"
                ],
                "fn": "onCreateMyExercise",
                "implHandler": [
                    "var userId = localStorage.getItem(\"user_id\"),",
                    "    user = Ext.ux.SessionManager.getUser(),",
                    "    newExercise;",
                    "",
                    "newExercise = Ext.create('LanistaTrainer.model.ExerciseModel', {",
                    "    name_DE : myexercisename,",
                    "    name_EN : myexercisename,",
                    "    name_ES : myexercisename,",
                    "    muscle:\t0,",
                    "    addition: 0,",
                    "    type: 0",
                    "});",
                    "",
                    "newExercise.setProxy(new Ext.data.proxy.Ajax({",
                    "    url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/exercise/userexercisesjson',",
                    "    model: 'Exercise',",
                    "    noCache: false,",
                    "    reader: {",
                    "        type: 'json',",
                    "        root: 'entries'",
                    "    },",
                    "    writer: {",
                    "        type: 'json',",
                    "        root: 'records',",
                    "        allowSingle: false",
                    "    },",
                    "    headers: {",
                    "        user_id: userId",
                    "    }",
                    "}));",
                    "",
                    "newExercise.save (",
                    "    {",
                    "        callback: function ( record ){",
                    "            LanistaTrainer.app.getController ( 'MyExerciseInfoController' ).myexercise = record;",
                    "            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'MyExerciseInfoPanel';",
                    "            LanistaTrainer.app.fireEvent( 'showMyExerciseInfoPanel', myexercisename);",
                    "        }",
                    "    });",
                    ""
                ],
                "name": "createMyExercise",
                "scope": "this"
            },
            "designerId": "9d886d39-d740-4571-a29b-860d2695c66c"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "exercisesPanel",
                "selector": "exercisesPanel",
                "xtype": "exercisesPanel"
            },
            "designerId": "5dc79c79-9379-4829-90af-666520ef0a4b"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "rightCommandPanel",
                "selector": "#rightCommandPanel"
            },
            "designerId": "e47bbced-f583-4394-815e-17c2f7afa899"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "nextExercises",
                "selector": "#nextExercises",
                "xtype": "Ext.panel.Tool"
            },
            "designerId": "9bca4b31-af91-49fb-8115-947984c6b6dd"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "previousExercises",
                "selector": "#previousExercises",
                "xtype": "Ext.panel.Tool"
            },
            "designerId": "85b11ae8-4ee3-42af-8d19-0cd1f764e68c"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "leftCommandPanel",
                "selector": "#leftCommandPanel"
            },
            "designerId": "53331e97-5d6e-490f-8b58-8757289cb2c8"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainViewport",
                "selector": "mainViewport"
            },
            "designerId": "908fc6da-9d3f-4096-b25e-ab58eeff1b32"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainStage",
                "selector": "#mainStage"
            },
            "designerId": "6b1c562d-0e4c-4aca-9574-2115eee9624f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "callback"
                ],
                "fn": "showCommands",
                "implHandler": [
                    "",
                    "var controller = this,",
                    "    myExercies = false,",
                    "    store = Ext.getStore('ExerciseStore');",
                    "",
                    "for (var i = 0; i < store.filters.length; i++)",
                    "{",
                    "    if (store.filters.items[i].id  == 'myExercises'){",
                    "        myExercies = true;",
                    "        break;",
                    "    }",
                    "",
                    "}",
                    "",
                    "controller.tpl = controller.getExercisesPanel().down('#viewExercises').tpl;",
                    "controller.itemSelector = controller.getExercisesPanel().down('#viewExercises').itemSelector;",
                    "",
                    "controller.getRightCommandPanel().items.each(function (item) {",
                    "    item.hide();",
                    "});",
                    "",
                    "//Adding bottoms into RightPanel",
                    "var menuFilters = controller.showExercisesMenu();",
                    "",
                    "this.getRightCommandPanel().add(",
                    "    Ext.create('LanistaTrainer.view.LanistaButton', {",
                    "        text: Ext.ux.LanguageManager.TranslationArray.SEARCH,",
                    "        itemId: 'searchButton',",
                    "        menu: menuFilters,",
                    "        menuButtonAlign: 'right',",
                    "        glyph: '90@Lanista Icons' //Z",
                    "    })",
                    ");",
                    "",
                    "if (!Ext.ux.SessionManager.getIsLoggedIn()) return;",
                    "",
                    "this.getRightCommandPanel().add(",
                    "    Ext.create('LanistaTrainer.view.LanistaButton', {",
                    "        text: Ext.ux.LanguageManager.TranslationArray.BUTTON_EXERCISES_MINE,",
                    "        itemId: 'myExercisesButton',",
                    "        glyph: '113@Lanista Icons' //q",
                    "    })",
                    ");",
                    "",
                    "if (!myExercies){",
                    "    this.getRightCommandPanel().add(",
                    "            Ext.create('LanistaTrainer.view.LanistaButton', {",
                    "                text: Ext.ux.LanguageManager.TranslationArray.FOLDER_CREATE,",
                    "                itemId: 'favoritesCustomersButton',",
                    "                userAlias: 'favoritesCustomersButton',",
                    "                menu: LanistaTrainer.app.getController('FavoritesController').showFavorites(0, 'ExercisesPanel', 'ExerciseStore', 'ExercisesController',  'viewExercises'),",
                    "                menuButtonAlign: 'right',",
                    "                glyph: '122@Lanista Icons' //z",
                    "            })",
                    "        );",
                    "",
                    "    this.getRightCommandPanel().add(",
                    "        Ext.create('LanistaTrainer.view.LanistaButton', {",
                    "            text: Ext.ux.LanguageManager.TranslationArray.BUTTON_RECENTLY,",
                    "            itemId: 'recentlyButton',",
                    "            glyph: '121@Lanista Icons' //y",
                    "        })",
                    "    );",
                    "}",
                    "else{",
                    "    this.getRightCommandPanel().add(",
                    "        Ext.create('LanistaTrainer.view.LanistaButton', {",
                    "            text: Ext.ux.LanguageManager.TranslationArray.BUTTON_ADD_EXERCISES,",
                    "            itemId: 'createMyExerciseButton',",
                    "            glyph: '108@Lanista Icons' //l",
                    "        })",
                    "    );",
                    "    this.getRightCommandPanel().down('#myExercisesButton').addCls('lanista-active');",
                    "}"
                ]
            },
            "designerId": "fee35e2c-2118-4dc7-a82e-3723921f9658"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "viewport #showExercisesPanelButton",
                "designer|targetType": "LanistaButton",
                "fn": "onShowExercisesPanelButtonClick",
                "implHandler": [
                    "",
                    "LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1], function() {",
                    "    LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'ExercisesPanel';",
                    "    LanistaTrainer.app.fireEvent('showExercisesPanel');",
                    "});"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "67abd17d-564e-42ba-a557-2d80975d3dd3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "viewport #closeExercisesPanelButton",
                "designer|targetType": "LanistaButton",
                "fn": "onCloseExercisesPanelButtonClick",
                "implHandler": [
                    "LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);",
                    "",
                    "LanistaTrainer.app.fireEvent('closeExercisesPanel', function() {",
                    "    if (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1] === 'FavoritesPanel'){",
                    "        Ext.getStore('ExerciseStore').clearFilter();",
                    "        Ext.getStore('ExerciseStore').loadPage(1);",
                    "        LanistaTrainer.app.getController('FavoritesController').saveFavorite(function(){",
                    "            LanistaTrainer.app.fireEvent('showFavoritesPanel', LanistaTrainer.app.getController('FavoritesController').favorites, 'ExercisesPanel', 'ExerciseStore', 'ExercisesController');",
                    "        });",
                    "    }",
                    "    else{",
                    "        LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);",
                    "    }",
                    "});",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "a02d89a3-b821-4071-bd5c-a1a72fbd60d4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadData",
                "implHandler": [
                    ""
                ]
            },
            "designerId": "0c52d427-6a4b-4540-8aee-8c3cf6871c39"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showExercisesMenu",
                "implHandler": [
                    "container = this;",
                    "tools = new Ext.menu.Menu(",
                    "    {",
                    "        Itemid:'exercisesMenu',",
                    "        cls:'lanista-button-menu',",
                    "        defaults: {",
                    "            height: '50px',",
                    "            width: '220px'",
                    "        },",
                    "        items:",
                    "        [",
                    "            {xtype: 'textfield',",
                    "             itemId: 'searchText',",
                    "             hideLabel: true,",
                    "             hideEmptyLabel: false,",
                    "             name: 'searchText',",
                    "             validateOnChange: false,",
                    "             validateOnBlur: false,",
                    "             enableKeyEvents: true,",
                    "             emptyText: Ext.ux.LanguageManager.TranslationArray.TEXT_SEARCH_UC + '...',",
                    "             listeners: {",
                    "                        keydown: {",
                    "                            element: 'el',",
                    "                            fn: function(e, textfield, eOpts){",
                    "                                if (textfield.value.length > 1)",
                    "                                    container.searchWordExercisesByText(textfield.value);",
                    "                                else{",
                    "                                        if (Ext.ComponentManager.get('recommendatiosContextMenu')){",
                    "                                            Ext.ComponentManager.get('recommendatiosContextMenu').removeAll();",
                    "                                            Ext.ComponentManager.get('recommendatiosContextMenu').hide();",
                    "                                        }",
                    "                                        container.getRightCommandPanel().getComponent('searchButton').menu.getComponent('searchText').focus();",
                    "                                    }",
                    "                            },",
                    "                            delay:100",
                    "                         },",
                    "",
                    "                         afterrender: {",
                    "                            element: 'el',",
                    "                            fn: function(textfield, eOpts){",
                    "                                textfield.on('hide', function(component) {",
                    "                                    component.destroy();",
                    "                                }, container);",
                    "                            }",
                    "                         }",
                    "                     }",
                    "            },",
                    "            {text:\tExt.ux.LanguageManager.TranslationArray.FILTER_MUSCLES.toUpperCase(),",
                    "             menuAlign: 'tr-tl?',",
                    "             rtl: true,",
                    "             menu:{",
                    "                     defaults: {",
                    "                         height: '50px',",
                    "                         width: '220px'",
                    "                     },",
                    "                     items:",
                    "                     [",
                    "                             {text:\tExt.ux.LanguageManager.TranslationArray.FILTER_ALL_MUSCLES.toUpperCase(),",
                    "                                  handler: function () {",
                    "                                      container.showFilteredExercises('', 1, this.text);",
                    "                                  }",
                    "                             },",
                    "                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_SHOULDER.toUpperCase(),",
                    "                                  handler: function () {",
                    "                                      container.showFilteredExercises('3', 1, this.text);",
                    "                                  }",
                    "                             },",
                    "                             {text:   Ext.ux.LanguageManager.TranslationArray.FILTER_ARMS.toUpperCase(),",
                    "                                      menuAlign: 'tr-tl?',",
                    "                                      rtl: true,",
                    "                                      menu:{",
                    "                                              defaults: {",
                    "                                                      height: '50px',",
                    "                                                      width: '220px'",
                    "                                                  },",
                    "                                              items:",
                    "                                              [",
                    "                                                      {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BICEPS.toUpperCase(),",
                    "                                                           handler: function () {",
                    "                                                               container.showFilteredExercises('8', 1, this.text);",
                    "                                                           }",
                    "                                                      },",
                    "                                                      {text: Ext.ux.LanguageManager.TranslationArray.FILTER_TRICEPS.toUpperCase(),",
                    "                                                           handler: function () {",
                    "                                                               container.showFilteredExercises('9', 1, this.text);",
                    "                                                           }",
                    "                                                      },",
                    "                                                      {text: Ext.ux.LanguageManager.TranslationArray.FILTER_FOREARM.toUpperCase(),",
                    "                                                           handler: function () {",
                    "                                                               container.showFilteredExercises('10', 1, this.text);",
                    "                                                           }",
                    "                                                      }",
                    "                                               ]",
                    "                                           }",
                    "                             },",
                    "                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_CHEST.toUpperCase(),",
                    "                                  handler: function () {",
                    "                                      container.showFilteredExercises('1', 1, this.text);",
                    "                                  }",
                    "                             },",
                    "                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BACK.toUpperCase(),",
                    "                                    menuAlign: 'tr-tl?',",
                    "                                      rtl: true,",
                    "                                      menu:{",
                    "                                              defaults: {",
                    "                                                      height: '50px',",
                    "                                                      width: '220px'",
                    "                                                  },",
                    "                                              items:",
                    "                                              [",
                    "                                                      {text: Ext.ux.LanguageManager.TranslationArray.FILTER_UPPERBACK.toUpperCase(),",
                    "                                                           handler: function () {",
                    "                                                               container.showFilteredExercises('2', 1, this.text);",
                    "                                                           }",
                    "                                                      },",
                    "                                                      {text: Ext.ux.LanguageManager.TranslationArray.FILTER_LOWERBACK.toUpperCase(),",
                    "                                                           handler: function () {",
                    "                                                               container.showFilteredExercises('5', 1, this.text);",
                    "                                                           }",
                    "                                                      }",
                    "                                               ]",
                    "                                           }",
                    "                             },",
                    "                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_AB.toUpperCase(),",
                    "                                  handler: function () {",
                    "                                      container.showFilteredExercises('7', 1, this.text);",
                    "                                  }",
                    "                             },",
                    "                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_WAISHIP.toUpperCase(),",
                    "                                  handler: function () {",
                    "                                      container.showFilteredExercises('6', 1, this.text);",
                    "                                  }",
                    "                             },",
                    "                             {text:   Ext.ux.LanguageManager.TranslationArray.FILTER_LEGS.toUpperCase(),",
                    "                                      menuAlign: 'tr-tl?',",
                    "                                      rtl: true,",
                    "                                      menu:{",
                    "                                              defaults: {",
                    "                                                  height: '50px',",
                    "                                                  width: '220px'",
                    "                                              },",
                    "                                              items:",
                    "                                              [",
                    "                                                  {text: Ext.ux.LanguageManager.TranslationArray.FILTER_FRONTTHIG.toUpperCase(),",
                    "                                                   handler: function () {",
                    "                                                       container.showFilteredExercises('4', 1, this.text);",
                    "                                                   }",
                    "                                                  },",
                    "                                                  {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BACKTHIGH.toUpperCase(),",
                    "                                                   handler: function () {",
                    "                                                       container.showFilteredExercises('14', 1, this.text);",
                    "                                                   }",
                    "                                                  },",
                    "                                                  {text: Ext.ux.LanguageManager.TranslationArray.FILTER_LOWERLEG.toUpperCase(),",
                    "                                                   handler: function () {",
                    "                                                       container.showFilteredExercises('11', 1, this.text);",
                    "                                                   }",
                    "                                                  }",
                    "                                               ]",
                    "                                           }",
                    "                             }",
                    "                     ]",
                    "                  }",
                    "            },",
                    "            {text:\t Ext.ux.LanguageManager.TranslationArray.FILTER_TYPE.toUpperCase(),",
                    "                     menuAlign: 'tr-tl?',",
                    "                     rtl: true,",
                    "                     menu:{",
                    "                             defaults: {",
                    "                                     height: '50px',",
                    "                                     width: '220px'",
                    "                                 },",
                    "                             items:",
                    "                             [",
                    "                                 {text: Ext.ux.LanguageManager.TranslationArray.FILTER_ALL_EXERCISES.toUpperCase(),",
                    "                                  handler: function () {",
                    "                                      container.showFilteredExercises('', 2, this.text);",
                    "                                  }",
                    "                                 },",
                    "                                 {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BODYWEIGHT.toUpperCase(),",
                    "                                  handler: function () {",
                    "                                      container.showFilteredExercises('4', 2, this.text);",
                    "                                  }",
                    "                                 },",
                    "                                 {text: Ext.ux.LanguageManager.TranslationArray.FILTER_MACHINE.toUpperCase(),",
                    "                                  handler: function () {",
                    "                                      container.showFilteredExercises('1', 2, this.text);",
                    "                                  }",
                    "                                 },",
                    "                                 {text: Ext.ux.LanguageManager.TranslationArray.FILTER_FREEWEIGHTS.toUpperCase(),",
                    "                                  handler: function () {",
                    "                                      container.showFilteredExercises('2', 2, this.text);",
                    "                                  }",
                    "                                 },",
                    "                                 {text: Ext.ux.LanguageManager.TranslationArray.FILTER_CABLE.toUpperCase(),",
                    "                                  handler: function () {",
                    "                                      container.showFilteredExercises('3', 2, this.text);",
                    "                                  }",
                    "                                 },",
                    "                                 {text: Ext.ux.LanguageManager.TranslationArray.FILTER_STRETCH.toUpperCase(),",
                    "                                  handler: function () {",
                    "                                      container.showFilteredExercises('5', 2, this.text);",
                    "                                  }",
                    "                                 },",
                    "                                 {text: Ext.ux.LanguageManager.TranslationArray.FILTER_CARDIO.toUpperCase(),",
                    "                                  handler: function () {",
                    "                                      container.showFilteredExercises('7', 2, this.text);",
                    "                                  }",
                    "                                 },",
                    "                                 {text: Ext.ux.LanguageManager.TranslationArray.FILTER_SPEC.toUpperCase(),",
                    "                                  handler: function () {",
                    "                                      container.showFilteredExercises('8', 2, this.text);",
                    "                                  }",
                    "                                 },",
                    "                                 {text: Ext.ux.LanguageManager.TranslationArray.FILTER_UNILATERAL.toUpperCase(),",
                    "                                  handler: function () {",
                    "                                      container.showFilteredExercises('9', 2, this.text);",
                    "                                  }",
                    "                                 }",
                    "                             ]",
                    "                         }",
                    "            },",
                    "            {text:   Ext.ux.LanguageManager.TranslationArray.FILTER_ADDITIVES.toUpperCase(),",
                    "                     menuAlign: 'tr-tl?',",
                    "                     rtl: true,",
                    "                     menu:{",
                    "                             defaults: {",
                    "                                     height: '50px',",
                    "                                     width: '220px'",
                    "                                 },",
                    "                             items:",
                    "                             [",
                    "                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_ALL_MACHINES.toUpperCase(),",
                    "                                          handler: function () {",
                    "                                              container.showFilteredExercises('', 3, this.text);",
                    "                                          }",
                    "                                     },",
                    "                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_DUMBBELLS.toUpperCase(),",
                    "                                          handler: function () {",
                    "                                              container.showFilteredExercises('1', 3, this.text);",
                    "                                          }",
                    "                                     },",
                    "                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BARBELL.toUpperCase(),",
                    "                                          handler: function () {",
                    "                                              container.showFilteredExercises('3', 3, this.text);",
                    "                                          }",
                    "                                     },",
                    "                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_KETT.toUpperCase(),",
                    "                                          handler: function () {",
                    "                                              container.showFilteredExercises('2', 3, this.text);",
                    "                                          }",
                    "                                     },",
                    "                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BANK.toUpperCase(),",
                    "                                          handler: function () {",
                    "                                              container.showFilteredExercises('4', 3, this.text);",
                    "                                          }",
                    "                                     },",
                    "                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_VARADD.toUpperCase(),",
                    "                                          handler: function () {",
                    "                                              container.showFilteredExercises('5', 3, this.text);",
                    "                                          }",
                    "                                     },",
                    "                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BALL.toUpperCase(),",
                    "                                          handler: function () {",
                    "                                              container.showFilteredExercises('6', 3, this.text);",
                    "                                          }",
                    "                                     },",
                    "                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BLAST.toUpperCase(),",
                    "                                          handler: function () {",
                    "                                              container.showFilteredExercises('7', 3, this.text);",
                    "                                          }",
                    "                                     },",
                    "                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_JUMPER.toUpperCase(),",
                    "                                          handler: function () {",
                    "                                              container.showFilteredExercises('8', 3, this.text);",
                    "                                          }",
                    "                                     },",
                    "                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_FOAM.toUpperCase(),",
                    "                                          handler: function () {",
                    "                                              container.showFilteredExercises('9', 3, this.text);",
                    "                                          }",
                    "                                     },",
                    "                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_MINIBAND.toUpperCase(),",
                    "                                          handler: function () {",
                    "                                              container.showFilteredExercises('11', 3, this.text);",
                    "                                          }",
                    "                                     }",
                    "                             ]",
                    "                          }",
                    "            }",
                    "        ]",
                    "    }",
                    ");",
                    "",
                    "tools.on('beforehide', function(component) {",
                    "    return (!Ext.ComponentManager.get('recommendatiosContextMenu'));",
                    "}, container);",
                    "",
                    "tools.on('hide', function(component) {",
                    "    component.getComponent('searchText').setValue('');",
                    "}, container);",
                    "",
                    "return tools;"
                ]
            },
            "designerId": "f3c98974-e437-437c-b5d4-6ea676002b7e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "viewport #nextExercises",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onNextExercisesClick",
                "implHandler": [
                    "var store = Ext.getStore(\"ExerciseStore\"),",
                    "    totalPages = Math.ceil(store.proxy.totalCount/store.pageSize),",
                    "    itemNode;",
                    "",
                    "console.log('totalPages: ' + totalPages);",
                    "",
                    "if (Ext.getStore(\"ExerciseStore\").currentPage < totalPages)",
                    "{",
                    "    store.nextPage({",
                    "        scope: this,",
                    "        callback: function(records, operation, success) {",
                    "            if (success){",
                    "                if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') && (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'LoginPanel')) {",
                    "                    if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'FavoritesPanel')) {",
                    "                        favorites = LanistaTrainer.app.getController ('FavoritesController').favorites.data.objects;",
                    "                        favoritesArray = favorites !== \"\" ? favorites.split(',') : [];",
                    "",
                    "                        if (favoritesArray.length > 0 ){",
                    "                            for (i = 0; i < records.length ; i++) {",
                    "                                for ( j = 0; j < favoritesArray.length; j++) {",
                    "                                    if (Number(favoritesArray[j]) === Number(records[i].data.id)) {",
                    "                                        break;",
                    "                                    }",
                    "                                }",
                    "",
                    "                                if (j !== favoritesArray.length){",
                    "                                    itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);",
                    "                                    Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );",
                    "                                }",
                    "                            }",
                    "                        }",
                    "                    }",
                    "                    else{",
                    "                        for ( var i = 0; i < records.length ; i++) {",
                    "                            for(var j = 0; j < this.getExercisesPanel().selection.length; j++) {",
                    "                                if(this.getExercisesPanel().selection[j][0] === records[i].data.id) {",
                    "                                    break;",
                    "                                }",
                    "                            }",
                    "                            if (j !== this.getExercisesPanel().selection.length){",
                    "                                itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);",
                    "                                Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );",
                    "                            }",
                    "                        }",
                    "                    }",
                    "                }",
                    "            }",
                    "        }",
                    "    });",
                    "    LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "e650672e-8593-4b0e-b6b6-729c60f4fcf3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "viewport #previousExercises",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onPreviousExercisesClick",
                "implHandler": [
                    "console.log(\"SHOW PREVIOUS EXERCISES\");",
                    "if (Ext.getStore(\"ExerciseStore\").currentPage > 1)",
                    "{",
                    "    var store = Ext.getStore(\"ExerciseStore\");",
                    "    store.previousPage({",
                    "        scope: this,",
                    "        callback: function(records, operation, success) {",
                    "            if (success){",
                    "                if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') && (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'LoginPanel')) {",
                    "                    if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'FavoritesPanel')) {",
                    "                        favorites = LanistaTrainer.app.getController ('FavoritesController').favorites.data.objects;",
                    "                        favoritesArray = favorites !== \"\" ? favorites.split(',') : [];",
                    "",
                    "                        if (favoritesArray.length > 0 ){",
                    "                            for (i = 0; i < records.length ; i++) {",
                    "                                for ( j = 0; j < favoritesArray.length; j++) {",
                    "                                    if (Number(favoritesArray[j]) === Number(records[i].data.id)) {",
                    "                                        break;",
                    "                                    }",
                    "                                }",
                    "",
                    "                                if (j !== favoritesArray.length){",
                    "                                    itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);",
                    "                                    Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );",
                    "                                }",
                    "                            }",
                    "                        }",
                    "                    }",
                    "                    else{",
                    "                        for (var i = 0; i < records.length ; i++) {",
                    "                            for(var j = 0; j < this.getExercisesPanel().selection.length; j++) {",
                    "                                if(this.getExercisesPanel().selection[j][0] === records[i].data.id) {",
                    "                                    break;",
                    "                                }",
                    "                            }",
                    "                            if (j !== this.getExercisesPanel().selection.length){",
                    "                                itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);",
                    "                                Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );",
                    "                            }",
                    "                        }",
                    "                    }",
                    "                }",
                    "            }",
                    "        }",
                    "    });",
                    "    LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "cd3002fb-27ed-4209-9e7f-4b62b83c0d80"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "seekValue",
                    "type",
                    "text"
                ],
                "fn": "showFilteredExercises",
                "implHandler": [
                    "",
                    "var store = Ext.getStore('ExerciseStore'),",
                    "    language = Ext.ux.LanguageManager.lang,",
                    "    numOfFilters = store.filters.length,",
                    "    varSearch = seekValue,",
                    "    records;",
                    "",
                    "if (numOfFilters === 0 || numOfFilters === 1)",
                    "{",
                    "    store.filters.insert(0,new Ext.util.Filter({",
                    "        id: 'type',",
                    "        property: 'type',",
                    "        value: new RegExp(\"^$|^(?:[0-9 ]+$)\"),",
                    "        root: 'data',",
                    "        exactMatch: true",
                    "    }));",
                    "    store.filters.insert(1,new Ext.util.Filter({",
                    "        id: 'muscle',",
                    "        property: 'muscle',",
                    "        value: new RegExp(\"^$|^(?:[0-9 ]+$)\"),",
                    "        root: 'data',",
                    "        exactMatch: true",
                    "    }));",
                    "",
                    "    var filterFunction = new Ext.util.Filter({",
                    "        id: 'machine',",
                    "        filterFn: function(item){",
                    "            if (Ext.isEmpty(this.serchValue)) return true;",
                    "            for (var i = 0; i < item.data.addition.length; i++) {",
                    "                if (item.data.addition[i] ==  this.serchValue)",
                    "                    return true;",
                    "            }",
                    "            return false;",
                    "        }",
                    "    });",
                    "",
                    "    store.filters.insert(2,filterFunction);",
                    "}",
                    "",
                    "var seekValue1 = \"\";",
                    "if (type === 3)",
                    "{",
                    "    if (seekValue !== \"\")",
                    "        seekValue1 = parseInt(seekValue);",
                    "}",
                    "else",
                    "    seekValue1 = (seekValue === \"\") ? new RegExp(\"^$|^(?:[0-9 ]+$)\") : parseInt(seekValue);",
                    "",
                    "switch(type)",
                    "{",
                    "    case 1: //By Muscle",
                    "        store.filters.items[1].textOptSel = text;",
                    "        store.filters.items[1].setValue(seekValue1);",
                    "      break;",
                    "    case 2: //By Type",
                    "        store.filters.items[0].textOptSel = text;",
                    "        store.filters.items[0].setValue(seekValue1);",
                    "      break;",
                    "    case 3://By Addtion",
                    "        store.filters.items[2].textOptSel = text;",
                    "        store.filters.items[2].setValue(seekValue1);",
                    "        store.filters.items[2].serchValue = seekValue1;",
                    "      break;",
                    "    default:",
                    "      //",
                    "}",
                    "",
                    "",
                    "store.sort('name_' + language, 'ASC');",
                    "store.loadPage(1);",
                    "records = store.data.items;",
                    "if ((LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') && (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'LoginPanel')) {",
                    "    if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'FavoritesPanel')) {",
                    "        favorites = LanistaTrainer.app.getController ('FavoritesController').favorites.data.objects;",
                    "        favoritesArray = favorites !== \"\" ? favorites.split(',') : [];",
                    "",
                    "        if (favoritesArray.length > 0 ){",
                    "            for (i = 0; i < records.length ; i++) {",
                    "                for ( j = 0; j < favoritesArray.length; j++) {",
                    "                    if (Number(favoritesArray[j]) === Number(records[i].data.id)) {",
                    "                        break;",
                    "                    }",
                    "                }",
                    "",
                    "                if (j !== favoritesArray.length){",
                    "                    itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);",
                    "                    Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "    else{",
                    "        for (var i = 0; i < records.length ; i++) {",
                    "            for(var j = 0; j < this.getExercisesPanel().selection.length; j++) {",
                    "                if(this.getExercisesPanel().selection[j][0] === records[i].data.id) {",
                    "                    break;",
                    "                }",
                    "            }",
                    "            if (j !== this.getExercisesPanel().selection.length){",
                    "                itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);",
                    "                Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    "LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());",
                    "",
                    "",
                    ""
                ]
            },
            "designerId": "640971d2-2bcc-4982-8946-088ed20ae9a9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setHeader",
                "implHandler": [
                    "LanistaTrainer.app.fireEvent('showSearchHeaderUpdate');"
                ]
            },
            "designerId": "c8159756-7e1f-40a4-ab3e-91735fdb2f89"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "searchWordExercisesByText",
                "implHandler": [
                    "var controller = this,",
                    "    textToSearch = value,",
                    "    new_filters  = [],",
                    "    lang = Ext.ux.LanguageManager.lang,",
                    "    //exerciseStoreFilter = Ext.getStore('ExerciseInitialStore'),",
                    "    re = new RegExp(\"\\\\w*\"+textToSearch+\"\\\\w*\", \"gi\"),",
                    "    result = [],",
                    "    searchList = [],",
                    "    nameValue,",
                    "    controller = this,",
                    "    exercisesMenu,",
                    "    contextMenu,",
                    "    exerciseStore = Ext.getStore('ExerciseStore'),",
                    "    current_filters = exerciseStore.filters === null ? [] : exerciseStore.filters.items,",
                    "    new_filters = [],",
                    "    indexFilter,",
                    "    records;",
                    "",
                    "var exerciseStoreFilter = Ext.create('Ext.data.Store', {",
                    "     model: 'LanistaTrainer.model.ExerciseModel'",
                    " });",
                    "",
                    "var filterFunction = new Ext.util.Filter({",
                    "        filterFn: function(item){",
                    "            nameValue = lang === 'ES' ? item.data.name_ES : lang === 'EN' ? item.data.name_EN : item.data.name_DE;",
                    "            result = nameValue.match(re);",
                    "            if ( result && result.length > 0 ) {",
                    "                for (var i = 0; i < result.length; i++){",
                    "                    if (searchList.indexOf(result[i]) == -1)",
                    "                        searchList.push(result[i]);",
                    "                }",
                    "            }",
                    "            return (result && result.length > 0);",
                    "        }",
                    "    });",
                    "",
                    "if (textToSearch && textToSearch.length) {",
                    "    exerciseStoreFilter.clearFilter();",
                    "    //The Exercises filters are copied to the InitialExerciseStore to search the words",
                    "    exerciseStoreFilter.filter(current_filters);",
                    "    exerciseStoreFilter.removeFilter('filterByWord');",
                    "    exerciseStoreFilter.filters.add (filterFunction);",
                    "    exerciseStoreFilter.load({",
                    "        callback: function(records, operation, success) {",
                    "            if (searchList.length > 0){",
                    "                    exercisesMenu = controller.getRightCommandPanel().getComponent('searchButton').menu;",
                    "",
                    "                if (!Ext.ComponentManager.get('recommendatiosContextMenu')){",
                    "                    contextMenu = Ext.create('Ext.menu.Menu', {",
                    "                        items: searchList,",
                    "                        shadow: true,",
                    "                        width: 100,",
                    "                        height: (searchList.length * 20) < 200 ? searchList.length * 20 : 200,",
                    "                        autoscroll: true,",
                    "                        cls: 'menu-lanista-button',",
                    "                        id: 'recommendatiosContextMenu'",
                    "                    });",
                    "                    contextMenu.on('hide', function(component) {",
                    "                        controller.getRightCommandPanel().getComponent('searchButton').menu.getComponent('searchText').setValue('');",
                    "                        component.destroy();",
                    "                    }, controller);",
                    "                    contextMenu.on('click', function(menu, item, e, eOpts) {",
                    "                        if (item){",
                    "                            exerciseStore.removeFilter('filterByWord');",
                    "                            re = new RegExp(\"\\\\w*\"+item.text+\"\\\\w*\", \"gi\");",
                    "                            filterFunction = new Ext.util.Filter({",
                    "                                id: 'filterByWord',",
                    "                                filterFn: function(itemValue){",
                    "                                    nameValue = lang === 'ES' ? itemValue.data.name_ES : lang === 'EN' ? itemValue.data.name_EN : itemValue.data.name_DE;",
                    "                                    result = nameValue.match(re);",
                    "                                    return (result && result.length > 0);",
                    "                                }",
                    "                            });",
                    "                            exerciseStore.filters.add(filterFunction);",
                    "",
                    "                            exerciseStore.loadPage(1);",
                    "                            records = exerciseStore.data.items;",
                    "                            if ((LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') && (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'LoginPanel')) {",
                    "                                if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'FavoritesPanel')) {",
                    "                                    favorites = LanistaTrainer.app.getController ('FavoritesController').favorites.data.objects;",
                    "                                    favoritesArray = favorites !== \"\" ? favorites.split(',') : [];",
                    "",
                    "                                    if (favoritesArray.length > 0 ){",
                    "                                        for (i = 0; i < records.length ; i++) {",
                    "                                            for ( j = 0; j < favoritesArray.length; j++) {",
                    "                                                if (Number(favoritesArray[j]) === Number(records[i].data.id)) {",
                    "                                                    break;",
                    "                                                }",
                    "                                            }",
                    "",
                    "                                            if (j !== favoritesArray.length){",
                    "                                                itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);",
                    "                                                Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );",
                    "                                            }",
                    "                                        }",
                    "                                    }",
                    "                                }",
                    "                                else{",
                    "                                    for (var k = 0; k < records.length ; k++) {",
                    "                                        for(var j = 0; j < this.getExercisesPanel().selection.length; j++) {",
                    "                                            if(this.getExercisesPanel().selection[j][0] === records[k].data.id) {",
                    "                                                break;",
                    "                                            }",
                    "                                        }",
                    "                                        if (j !== this.getExercisesPanel().selection.length){",
                    "                                            itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[k]);",
                    "                                            Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );",
                    "                                        }",
                    "                                    }",
                    "                                }",
                    "                            }",
                    "",
                    "                            controller.textToSearch = item.text;",
                    "                            LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());",
                    "",
                    "                            contextMenu.hide();",
                    "                            exercisesMenu.hide();",
                    "                        }",
                    "                    }, controller);",
                    "                    contextMenu.showAt(exercisesMenu.getX() - contextMenu.width, exercisesMenu.getY() - (contextMenu.height / 2));",
                    "                }",
                    "                else{",
                    "                    contextMenu = Ext.ComponentManager.get('recommendatiosContextMenu');",
                    "                    contextMenu.removeAll();",
                    "                    contextMenu.add(searchList);",
                    "                }",
                    "                    controller.getRightCommandPanel().getComponent('searchButton').menu.getComponent('searchText').focus();",
                    "",
                    "            }",
                    "            else{  //searchList.length === 0",
                    "                Ext.ComponentManager.get('recommendatiosContextMenu').hide();",
                    "                controller.getRightCommandPanel().getComponent('searchButton').menu.getComponent('searchText').focus();",
                    "            }",
                    "        }",
                    "    });",
                    "}",
                    "",
                    "",
                    ""
                ]
            },
            "designerId": "3cd9420b-1657-49d2-ad1c-5b86529fcb95"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "viewport #myExercisesButton",
                "designer|targetType": "LanistaButton",
                "fn": "onMyExercisesButtonClick",
                "implHandler": [
                    "var store = Ext.getStore('ExerciseStore'),",
                    "    filterFunction,",
                    "    value,",
                    "    result = [];",
                    "",
                    "if (this.getRightCommandPanel().down('#myExercisesButton').el.dom.classList.contains('lanista-active')){",
                    "    this.getRightCommandPanel().down('#myExercisesButton').removeCls('lanista-active');",
                    "    store.removeFilter('myExercises');",
                    "}",
                    "else{",
                    "    this.getRightCommandPanel().down('#myExercisesButton').addCls('lanista-active');",
                    "",
                    "    filterFunction = new Ext.util.Filter({",
                    "        id:'myExercises',",
                    "        filterFn: function(item){",
                    "            value = item.data.ext_id;",
                    "            result = value.match(\"\\\\w*CUST\\\\w*\", \"gi\");",
                    "            return (result && result.length > 0);",
                    "        }",
                    "    });",
                    "    store.filters.add (filterFunction);",
                    "}",
                    "store.loadPage(1);",
                    "LanistaTrainer.app.fireEvent('showSearchHeaderUpdate');",
                    "this.showCommands();"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "7cbdfa94-7b8b-46ad-83a4-ee5be373c71d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "viewport #createMyExerciseButton",
                "designer|targetType": "LanistaButton",
                "fn": "onCreateMyExerciseButtonClick",
                "implHandler": [
                    "var controller = this;",
                    "LanistaTrainer.app.fireEvent('closeExercisesPanel', function() {",
                    "    controller.promptMyExerciseNameRequest ( Ext.ux.LanguageManager.TranslationArray.BUTTON_CREATE_EMPTY_EXERCISE ,",
                    "                                             Ext.ux.LanguageManager.TranslationArray.NEW_MYEXERCISE_MESSAGE);",
                    "});"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "bcf1f532-b640-42ce-ab76-d650a2cab3a9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "title",
                    "message"
                ],
                "fn": "promptMyExerciseNameRequest",
                "implHandler": [
                    "Ext.Msg.prompt (",
                    "    title,",
                    "    message,",
                    "    function (response, myexercisename) {",
                    "        if ( response == 'ok' ) {",
                    "            LanistaTrainer.app.fireEvent( 'createMyExercise', myexercisename );",
                    "        } else {",
                    "            LanistaTrainer.app.fireEvent( 'showExercisesPanel' );",
                    "        }",
                    "    },",
                    "    null,",
                    "    false,",
                    "    Ext.ux.LanguageManager.TranslationArray.NEW +",
                    "      Ext.ux.LanguageManager.TranslationArray.EXERCISE ,",
                    "    {",
                    "        autoCapitalize: true,",
                    "        placeHolder: Ext.ux.LanguageManager.TranslationArray.NEW +",
                    "                     Ext.ux.LanguageManager.TranslationArray.EXERCISE ,",
                    "        clearicon: true",
                    "    }",
                    ");"
                ]
            },
            "designerId": "002a61b8-a79f-4460-9449-97aee361e516"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "findFavoritesExercises",
                "implHandler": [
                    "var container = this,",
                    "    exerciseStore = Ext.getStore('ExerciseStore'),",
                    "    favoritesStore = Ext.getStore('FavoritesStore'),",
                    "    favoriteName,",
                    "    selection,",
                    "    records,",
                    "    menu = new Ext.menu.Menu(",
                    "        {",
                    "            Itemid:'favoritesMenu',",
                    "            defaults: {",
                    "                height: '50px',",
                    "                width: '220px'",
                    "            }",
                    "        }",
                    "    );",
                    "",
                    "favoritesStore.getProxy().url = Ext.ux.ConfigManager.getRoot() + '/tpmanager/favorites/json';",
                    "favoritesStore.load({",
                    "    callback: function(records, operation, success) {",
                    "        for (var i = 0; i<records.length; i++){",
                    "            if (Number(records[i].data.type) === 0){",
                    "                favoriteName = records[i].data.name;",
                    "                menu.add([",
                    "                    {",
                    "                        text: records[i].data.name,",
                    "                        handler: function () {",
                    "                                    favoriteName = this.text;",
                    "                                    favoriteRecord = this.record;",
                    "                                    filterFunction = new Ext.util.Filter({",
                    "                                        filterFn: function(item){",
                    "                                            favoritesIds = favoriteRecord.data.objects ? favoriteRecord.data.objects.split(',') : '';",
                    "                                            for ( var j = 0; j < favoritesIds.length; j++ ){",
                    "                                                if (Number(item.data.id) === Number(favoritesIds[j]))",
                    "                                                    return true;",
                    "                                            }",
                    "                                        }",
                    "                                    });",
                    "                                    exerciseStore.filters.add(filterFunction);",
                    "                                    exerciseStore.loadPage(1);",
                    "                                    selection = container.getExercisesPanel().selection;",
                    "                                    records = exerciseStore.data.items;",
                    "                                    for (var k = 0; k < records.length ; k++) {",
                    "                                        for(var m = 0; m < selection.length; m++) {",
                    "                                            if(selection[m][0] === records[k].data.id) {",
                    "                                                break;",
                    "                                            }",
                    "                                        }",
                    "                                        if (m !== selection.length){",
                    "                                            itemNode = container.getExercisesPanel().down('#viewExercises').getNode(records[k]);",
                    "                                            Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );",
                    "                                        }",
                    "                                    }",
                    "                                    LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());",
                    "                                },",
                    "                        record: records[i]",
                    "                    }",
                    "                ]);",
                    "            }",
                    "        }",
                    "    }",
                    "});",
                    "favoritesStore.clearFilter();",
                    "return menu;",
                    "",
                    ""
                ]
            },
            "designerId": "a4458431-6db5-49e6-a351-5e3d0e590a3b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "lookUserExercises",
                "implHandler": [
                    "var store = Ext.getStore('ExerciseStore'),",
                    "    userId = localStorage.getItem(\"user_id\"),",
                    "    exercise;",
                    "",
                    "Ext.Ajax.request({",
                    "    url: Ext.ux.ConfigManager.getRoot() +'/tpmanager/exercise/userexercisesjson',",
                    "    method: 'get',",
                    "    headers: {",
                    "        user_id: userId",
                    "    },",
                    "    failure : function(result, request){",
                    "        console.log( \"There were problems in looking for user exercises\" );",
                    "    },",
                    "    success: function(response, opts) {",
                    "        try {",
                    "                var data = Ext.decode(response.responseText);",
                    "",
                    "                for (var i = 0; i < data.entries.length; i++){",
                    "                    exercise = Ext.create('LanistaTrainer.model.ExerciseModel', {",
                    "                        id: data.entries[i].id,",
                    "                        name_EN: data.entries[i].name_EN,",
                    "                        name_ES: data.entries[i].name_ES,",
                    "                        name_DE: data.entries[i].name_DE,",
                    "                        ext_id: data.entries[i].ext_id,",
                    "                        type: data.entries[i].type ,",
                    "                        changed_date: data.entries[i].changed_date,",
                    "                        unilateral: data.entries[i].unilateral,",
                    "                        coatchingnotes_DE: data.entries[i].coatchingnotes_DE ,",
                    "                        coatchingnotes_ES: data.entries[i].coatchingnotes_ES,",
                    "                        coatchingnotes_EN: data.entries[i].coatchingnotes_EN,",
                    "                        mistakes_DE: data.entries[i].mistakes_DE,",
                    "                        mistakes_ES: data.entries[i].mistakes_ES,",
                    "                        mistakes_EN: data.entries[i].mistakes_EN,",
                    "                        muscle: data.entries[i].muscle,",
                    "                        addition: data.entries[i].addition",
                    "                    });",
                    "                    Ext.getStore('ExerciseStore').add(exercise);",
                    "                }",
                    "",
                    "                store.proxy.totalCount = store.proxy.totalCount + (data.entries.length - 1);",
                    "           }",
                    "        catch( err ) {",
                    "            Ext.Msg.alert('Problem', 'There were problems in looking for user exercises', Ext.emptyFn);",
                    "        }",
                    "    }",
                    "});"
                ]
            },
            "designerId": "8e883712-022e-45c4-bcb7-10cc1d247280"
        }
    ]
}