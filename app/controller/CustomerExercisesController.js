/*
 * File: app/controller/CustomerExercisesController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.CustomerExercisesController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.customerExercisesController',

    id: 'customerExercisesController',

    refs: [
        {
            autoCreate: true,
            ref: 'customerExercisesPanel',
            selector: 'customerExercisesPanel',
            xtype: 'customerExercisesPanel'
        },
        {
            ref: 'rightCommandPanel',
            selector: '#rightCommandPanel'
        },
        {
            ref: 'leftCommandPanel',
            selector: '#leftCommandPanel'
        },
        {
            ref: 'mainViewport',
            selector: 'mainViewport'
        },
        {
            ref: 'mainStage',
            selector: '#mainStage'
        }
    ],

    onShowCustomerExercisesPanelButtonClick: function(button, e, eOpts) {

        LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1], function() {
            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'CustomerExercisesPanel';
            LanistaTrainer.app.fireEvent('showCustomerExercisesPanel');
        });
    },

    onCloseCustomerExercisesPanelButtonClick: function(button, e, eOpts) {
        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.currentCustomer = null;
        LanistaTrainer.app.fireEvent('closeCustomerExercisesPanel', function() {
            if (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1] === 'FavoritesPanel' )
                LanistaTrainer.app.fireEvent('show' + 'FavoritesPanel',
                                             LanistaTrainer.app.getController('FavoritesController').favorites,
                                             LanistaTrainer.app.getController('FavoritesController').favoritesPanelName,
                                             LanistaTrainer.app.getController('FavoritesController').favoritesStoreName,
                                             LanistaTrainer.app.getController('FavoritesController').favoritesControllerName);
            else
                LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);
        });


    },

    onNewPlanButtonClick: function(button, e, eOpts) {
        var controller = this;
        LanistaTrainer.app.fireEvent('closeCustomerExercisesPanel', function() {
            controller.prompPlanNameRequest ( Ext.ux.LanguageManager.TranslationArray.NEW_TEMPLATE_TITLE, Ext.ux.LanguageManager.TranslationArray.NEW_TEMPLATE_MESSAGE );
        });

    },

    onShowCustomerExercisesPanel: function(callback) {

        var controller = this,
            customerExercisesPanel	= controller.getCustomerExercisesPanel(),
            mainStage	= controller.getMainStage();

        customerExercisesPanel.controller = controller;
        mainStage.add( customerExercisesPanel );

        customerExercisesPanel.on('hide', function(component) {
            component.destroy();
        }, controller);

        // **** 1 create the commands
        LanistaTrainer.app.setStandardButtons('closeCustomerExercisesPanelButton');
        this.showCommands();

        // *** 2 Show the panel
        customerExercisesPanel.show();

        // PLANS
        controller.loadPlans();

        // WARNINGS

        // HEADER

        // PROTOCOLLS
        controller.loadProtocolls();

        LanistaTrainer.app.fireEvent('showCustomerExercisesHeaderUpdate');
        LanistaTrainer.app.fireEvent('showStage');

        // *** 4 Callback
        if (callback instanceof Function) callback();

        // *** 5 Load data
        controller.loadData();
    },

    onCloseCustomerExercisesPanel: function(callback) {
        var controller = this;
        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getCustomerExercisesPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    onShowCustomerExercisesHeaderUpdate: function() {
        var controller = this,
            record = LanistaTrainer.app.currentCustomer;
            divLogo = '<div class="lansita-header-customer-image-not-found show-info-customer" id="showCustomerDataButton"><div class="lansita-header-customer-logo show-info-customer" id="showCustomerDataButton" style="background-image: url(' + Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/img/p/'+ record.data.id + '_photo.jpg);"></div></div>';
            divInfoCustomer = '<div class="lansita-header-customer-name"> <span class="last-name">' + record.data.last_name + '</span><br> <span class="first-name">' + record.data.first_name +'</span></div>';

        controller.getMainViewport().down("#header").update({
            info: divLogo + divInfoCustomer,
            title: Ext.ux.LanguageManager.TranslationArray.CUSTOMER.toUpperCase()
        });

    },

    showCommands: function(callback) {

        var controller = this;
        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        controller.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.NEW_PLAN,
                itemId: 'newPlanButton',
                glyph: '108@Lanista Icons' //l
            })
        );

        controller.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_PROTOCOLLS,
                itemId: 'showExercisesPanelButton',
                glyph: '78@Lanista Icons' //N
            })
        );

        controller.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BODY_DATA,
                itemId: 'showBodyDataButton',
                glyph: '75@Lanista Icons' //M
            })
        );

        controller.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.MENU_HISTORY,
                itemId: 'showAnamnesisButton',
                glyph: '76@Lanista Icons' //L
            })
        );



    },

    loadData: function() {

    },

    loadProtocolls: function() {
        var controller = this,
            protocollsStore = Ext.getStore( "ProtocollStore" ),
            protocollsPanel = controller.getMainStage().down ( '#customerProtocolls' ),
            userId = localStorage.getItem ( 'user_id' ),
            currentCustomer = LanistaTrainer.app.currentCustomer,
            TplColums = new Ext.XTemplate(
                '<div class="lansita-header-customer-name">',
                '    <span class="weight"> {weight} Kgs. / {training} {[values.training_unit == 0 ? Ext.ux.LanguageManager.TranslationArray.REP : values.training_unit == 1 ? Ext.ux.LanguageManager.TranslationArray.MIN : Ext.ux.LanguageManager.TranslationArray.SEC]} </span>',
                '</div>'
             ),
            numRows;

        protocollsStore.clearGrouping();
        protocollsStore.clearFilter();
        protocollsStore.getProxy().setExtraParam( 'assign_to', currentCustomer.data.id );
        protocollsStore.sort( {
            direction: 'DESC',
            property: 'execution_date_day'
        });

        protocollsStore.group( 'execution_date_day', 'DESC');

        protocollsStore.load(function (records) {
                var groups = protocollsStore.getGroups (),
                    dailyGrid = null,
                    dataGridStore = null,
                    gridStore = null;

                //for ( var i = 0; i < groups.length && i < 7; i++ ) {
                for ( var i = 0; i < groups.length; i++ ) {
                        dataGridStore = groups[i].children;
                        gridStore = null;
                        gridStore = Ext.create('Ext.data.Store', {
                            model: 'LanistaTrainer.model.Protocoll',
                            data:	dataGridStore,
                            groupField: 'exercise_id_forgroup',
                            autoLoad: true
                        });

                        dailyGrid =  Ext.create('Ext.grid.Panel', {
                                        border: false,
                                        store: gridStore,
                                        cls: 'lanista-customer-exercise',
                                        width: 230,
                                        autoScroll: true,
                                        id: 'grid' + i,
                                        columns: [
                                                    {
                                                        xtype: 'templatecolumn',
                                                        border: false,
                                                        draggable: false,
                                                        tpl: '',
                                                        cls: 'lanista-grid-customer-exercise-column',
                                                        width: 180,
                                                        resizable: false,
                                                        toFrontOnShow: true,
                                                        dataIndex: 'string',
                                                        menuDisabled: true,
                                                        text: groups[i].name
                                                    }
                                                 ],
                                        viewConfig: {
                                            stripeRows: false,
                                            getRowClass: function(r) {
                                                 return 'lanista-grid-row';
                                           }
                                        },
                                        features: [
                                                    {
                                                        ftype: 'grouping',
                                                        groupHeaderTpl: [
                                                            '<tpl for=".">',
                                                            '     <input class="lanista-img-protocolls img-right" type="image" src="{[ Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + Ext.ux.ConfigManager.getAppname()]}/resources/images/previews/{[ values["name"] === 99999 ? 99999 : Ext.getStore("ExerciseStore").getProxy().getRecord(values["name"]).ext_id]}_1.jpg" >',
                                                            '     <input class="lanista-img-protocolls img-left" type="image" src="{[ Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + Ext.ux.ConfigManager.getAppname()]}/resources/images/previews/{[ values["name"] === 99999 ? 99999 : Ext.getStore("ExerciseStore").getProxy().getRecord(values["name"]).ext_id]}_2.jpg" ></div>',
                                                            '     <tpl for="children">',
                                                            '           <p align="center"><span class="lanista-protocolls-weight"> {data.weight} Kgs. / {data.training} {[values.data.training_unit == 0 ? Ext.ux.LanguageManager.TranslationArray.REP : values.data.training_unit == 1 ? Ext.ux.LanguageManager.TranslationArray.MIN : Ext.ux.LanguageManager.TranslationArray.SEC]} </span></p>',
                                                            '      </tpl>',
                                                            '</tpl>'
                                                        ],
                                                        collapsible: false
                                                    }
                                                ],
                                        listeners: {
                                                        groupclick: function(view, node, group, e, eOpts) {
                                                            var Exercise = Ext.ModelManager.getModel('LanistaTrainer.model.ExerciseModel'),
                                                                protocolls = null,
                                                                protocollsData = null;


                                                            for ( var i = 0; i < view.store.groups.length; i++ ) {
                                                                if (view.store.groups.items[i].key === parseInt(group)) {
                                                                    protocollsData = view.store.groups.items[i];
                                                                    break;
                                                                }
                                                            }
                                                            protocolls = Ext.create('Ext.data.Store', {
                                                                model: 'LanistaTrainer.model.Protocoll',
                                                                data : protocollsData.records
                                                            });

                                                            Exercise.load(group, {
                                                                success: function( exercise ) {
                                                                    controller.getMainStage().getLayout().getActiveItem().addCls ('blured');
                                                                    LanistaTrainer.app.fireEvent('showExercisePanel', exercise, protocolls);
                                                                }
                                                            });


                                                        }
                                                    }
                                   });
                    protocollsPanel.insert ( i, dailyGrid );
                }
            }
        );


    },

    setHeader: function() {
        LanistaTrainer.app.fireEvent('showCustomerExercisesHeaderUpdate');
    },

    prompPlanNameRequest: function(title, message) {
        Ext.Msg.prompt (
            title,
            message,
            function (response, templatename) {
                if ( response == 'ok' ) {
                    LanistaTrainer.app.fireEvent( 'createPlan', templatename );
                } else {
                    LanistaTrainer.app.fireEvent( 'showCustomerExercisesPanel' );
                }
            },
            null,
            false,
            Ext.ux.LanguageManager.TranslationArray.PLAN_NAME,
            {
                autoCapitalize: true,
                placeHolder: Ext.ux.LanguageManager.TranslationArray.PLAN_NAME_DEFAULT,
                clearicon: true
            }
        );
    },

    loadPlans: function(customerId) {
        var store = Ext.getStore('PlanStore'),
            currentCustomer = LanistaTrainer.app.currentCustomer;

        store.clearGrouping();
        store.clearFilter();
        store.filter ({property: 'customer_id', value: currentCustomer.data.id});
        store.sort( {
            direction: 'DESC',
            property: 'creation_date'
        });
        store.load();
    },

    init: function(application) {
        this.control({
            "viewport #showCustomerExercisesPanelButton": {
                click: this.onShowCustomerExercisesPanelButtonClick
            },
            "viewport #closeCustomerExercisesPanelButton": {
                click: this.onCloseCustomerExercisesPanelButtonClick
            },
            "viewport #newPlanButton": {
                click: this.onNewPlanButtonClick
            }
        });

        application.on({
            showCustomerExercisesPanel: {
                fn: this.onShowCustomerExercisesPanel,
                scope: this
            },
            closeCustomerExercisesPanel: {
                fn: this.onCloseCustomerExercisesPanel,
                scope: this
            },
            showCustomerExercisesHeaderUpdate: {
                fn: this.onShowCustomerExercisesHeaderUpdate,
                scope: this
            }
        });
    }

});
