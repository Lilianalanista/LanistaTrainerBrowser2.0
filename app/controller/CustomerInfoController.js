/*
 * File: app/controller/CustomerInfoController.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.CustomerInfoController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.customerInfoController',

    id: 'customerInfoController',

    refs: [
        {
            ref: 'mainStage',
            selector: '#mainStage'
        },
        {
            ref: 'leftCommandPanel',
            selector: '#leftCommandPanel'
        },
        {
            ref: 'rightCommandPanel',
            selector: '#rightCommandPanel'
        },
        {
            ref: 'mainViewport',
            selector: 'mainViewport'
        },
        {
            autoCreate: true,
            ref: 'customerInfoPanel',
            selector: '#customerInfoPanel',
            xtype: 'customerInfoPanel'
        },
        {
            ref: 'customer_personalData',
            selector: '#customer_personalData'
        },
        {
            ref: 'customer_companyContacts',
            selector: '#customer_companyContacts'
        }
    ],

    onShowCustomerInfoPanelButton: function(button, e, eOpts) {
        LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1], function() {
            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'UserInfoPanel';
            LanistaTrainer.app.fireEvent('showCustomerInfoPanel');
        });
    },

    onCloseCustomerInfoPanelButton: function(button, e, eOpts) {
        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent('closeCustomerInfoPanel', function() {
            LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);
        });

    },

    onCancelSettingsButtonClick: function(button, e, eOpts) {
        var controller = this;

        //controller.loadCurrentUser();
        controller.showCommands();
    },

    onSaveSettingsButtonClick: function(button, e, eOpts) {
        var controller = this,
            server = Ext.ux.ConfigManager.getServer(),
            root = Ext.ux.ConfigManager.getRoot() + '/tpmanager/',
            form_data = controller.getCustomerInfoPanel().getValues(),
            email = form_data.email;

        if (email === '')
        {
                Ext.Msg.alert('Email waren leer', 'Versuche es noch mal !', function() {
                    controller.getCustomerInfoPanel().getForm().findField('email').focus();
                });
        } else
        {
            var reg = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
            if(reg.test(email) === false)
            {
                Ext.Msg.alert('Falsche Emailadresse', 'Versuche es noch mal !', function() {
                    controller.getCustomerInfoPanel().getForm().findField('email').focus();
                });
            } else
            {
                controller.getCustomerInfoPanel().updateRecord();
                controller.getCustomerInfoPanel().getRecord().setProxy(new Ext.data.proxy.Ajax({
                    url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/user/json',
                    noCache: false,
                    reader: {
                        type: 'json',
                        root: 'entries'
                    },
                    writer: {
                        type: 'json',
                        root: 'records',
                        allowSingle: false
                    },
                    headers: {
                        user_id: localStorage.getItem("user_id")
                    }
                }));

                controller.getCustomerInfoPanel().getRecord().save({
                    callback: function(record,event,success) {
                        if (success)
                        {
                            var oldDate = record.data.birthday.split('-'),
                                newDate;
                            if (Ext.ux.LanguageManager.lang === 'EN')
                                newDate = oldDate[1] + oldDate[0] + oldDate[2];
                            else
                                newDate = oldDate[0] + oldDate[1] + oldDate[2];

                            record.data.birthday = newDate;

                            controller.getCustomerInfoPanel().loadRecord(record);
                            Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_SAVE, Ext.ux.LanguageManager.TranslationArray.MSG_DATA_SAVE, Ext.emptyFn);
                            controller.showCommands();
                        }
                        else
                            Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, Ext.emptyFn);
                    }
                });
            }
        }

    },

    onShowCustomerInfoPanel: function(callback) {

        var controller = this;
        var customerInfoPanel	= controller.getCustomerInfoPanel();
        var mainStage	= controller.getMainStage();

        mainStage.add( customerInfoPanel );

        customerInfoPanel.on('hide', function(component) {
            component.destroy();
        }, controller);


        // **** 1 create the commands
        LanistaTrainer.app.setStandardButtons('closeCustomerInfoPanelButton');

        // *** 2 Show the panel
        customerInfoPanel.loadRecord(LanistaTrainer.app.currentCustomer);
        customerInfoPanel.show();

        LanistaTrainer.app.fireEvent('showCustomerInfoHeaderUpdate');
        LanistaTrainer.app.fireEvent('showStage');
        this.showCommands();

        // *** 4 Callback
        if (callback instanceof Function) callback();

        // *** 5 Load data
        controller.loadData();


    },

    onCloseCustomerInfoPanel: function(callback) {
        var controller = this;
        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getCustomerInfoPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    onShowCustomerInfoHeaderUpdate: function() {
        var controller = this,
            record = LanistaTrainer.app.currentCustomer;

            info = '<div class="lansita-header-customer-image-not-found"><div class="lansita-header-customer-photo" id="changeCustomerPhoto" style="background-image: url(' + Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/img/p/'+ record.data.id + '_photo.jpg);"></div></div>';

        if (this.getCustomerInfoPanel() && !this.getCustomerInfoPanel().isHidden()) {
            controller.getMainViewport().down("#header").update({
               info: info,
               //title: '-' + Ext.ux.LanguageManager.TranslationArray.CUST_MENU_SETUP.toUpperCase()
               title: ''
            });
        }
    },

    showCommands: function(callback) {

        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        //Adding bottoms into RightPanel


    },

    loadData: function() {
        var controller = this,
            fieldset = controller.getCustomer_personalData();

        fieldset.setTitle (Ext.ux.LanguageManager.TranslationArray.PERSON_DATA);
        fieldset = controller.getCustomer_companyContacts();
        fieldset.setTitle (Ext.ux.LanguageManager.TranslationArray.ADDRESS);

        controller.getCustomerInfoPanel().getForm().findField('customer_email').focus();
    },

    loadCurrentUser: function(callBack) {
        Ext.ux.SessionManager.loadLastUser();

        var user = Ext.ux.SessionManager.getUser(),
            controller = this;

        if (user)
        {
            controller.getUserInfoPanel().getForm().setValues(
                {
                    email:					user.email,
                    first_name:				user.first_name,
                    last_name:				user.last_name,
                    language:				user.language,
                    company_name:			user.company_name,
                    phone_nr:				user.phone_nr,
                    website:				user.website,
                    country:				user.country,
                    zipcode:				user.zipcode,
                    street:					user.street,
                    city:					user.city,
                    user_licenseStatus:		(user.status == 1 ? Ext.ux.LanguageManager.TranslationArray.ACTIVE : Ext.ux.LanguageManager.TranslationArray.INACTIVE),
                    user_licenseValidity:	user.expiration_date,
                    id:						user.id
                }
            );
        }
        if (callBack instanceof Function) callBack();
    },

    init: function(application) {
        this.control({
            "viewport #showCustomerInfoPanelButton": {
                click: this.onShowCustomerInfoPanelButton
            },
            "viewport #closeCustomerInfoPanelButton": {
                click: this.onCloseCustomerInfoPanelButton
            },
            "viewport #cancelSettingsCustomerButton": {
                click: this.onCancelSettingsButtonClick
            },
            "viewport #saveSettingsCustomerButton": {
                click: this.onSaveSettingsButtonClick
            }
        });

        application.on({
            showCustomerInfoPanel: {
                fn: this.onShowCustomerInfoPanel,
                scope: this
            },
            closeCustomerInfoPanel: {
                fn: this.onCloseCustomerInfoPanel,
                scope: this
            },
            showCustomerInfoHeaderUpdate: {
                fn: this.onShowCustomerInfoHeaderUpdate,
                scope: this
            }
        });
    }

});
