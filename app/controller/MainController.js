/*
 * File: app/controller/MainController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.MainController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.mainController',

    id: 'mainController',

    refs: [
        {
            ref: 'mainStage',
            selector: '#mainStage'
        },
        {
            ref: 'leftCommandPanel',
            selector: '#leftCommandPanel'
        },
        {
            ref: 'rightCommandPanel',
            selector: '#rightCommandPanel'
        },
        {
            ref: 'lanistaStage',
            selector: '#lanistaStage'
        }
    ],

    onHideStage: function(callback) {
        var leftCommandPanel = this.getLeftCommandPanel();

        this.getMainStage().el.setStyle('opacity', '0');

        leftCommandPanel.el.setStyle('opacity', '0');
        leftCommandPanel.up().down('#splitterLeft').el.setStyle('opacity', '0');
        leftCommandPanel.up().down('#splitterRight').el.setStyle('opacity', '0');


        this.getRightCommandPanel().el.setStyle('opacity', '0');
        setTimeout(
            function(){
                if (callback instanceof Function) callback();
            },
            1000
        );

    },

    onShowStage: function(callback) {
        var leftCommandPanel = this.getLeftCommandPanel();

        this.getMainStage().el.setStyle('opacity', '1');

        leftCommandPanel.el.setStyle('opacity', '1');
        leftCommandPanel.up().down('#splitterLeft').el.setStyle('opacity', '1');
        leftCommandPanel.up().down('#splitterRight').el.setStyle('opacity', '1');

        this.getRightCommandPanel().el.setStyle('opacity', '1');
        setTimeout(function(){
            if (callback instanceof Function) callback();
        }, 1000);
    },

    onShowSavePanel: function(saveButtonId, cancelButtonId) {
        var controller = this;
        if ( !this.getMainStage().down ( '#' + saveButtonId ) ) {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });

            var saveButton = Ext.create('LanistaTrainer.view.LanistaButton', {
                //iconCls: 'lanista-sync',
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_SAVE,
                itemId: saveButtonId,
                glyph: '100@Lanista Icons' //d
            });
            var cancelButton = Ext.create('LanistaTrainer.view.LanistaButton', {
                //iconCls: 'lanista-remove',
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_CANCEL,
                itemId: cancelButtonId,
                glyph: '65@Lanista Icons' //A
            });

            controller.getRightCommandPanel().add(
                saveButton
            );
            controller.getRightCommandPanel().add(
                cancelButton
            );
        }

        /*
        cls: [
                    'lanista-command-buton',
                    'lanista-command-buton-green'
                ],

        */
    },

    init: function(application) {
        application.on({
            hideStage: {
                fn: this.onHideStage,
                scope: this
            },
            showStage: {
                fn: this.onShowStage,
                scope: this
            },
            showSavePanel: {
                fn: this.onShowSavePanel,
                scope: this
            }
        });
    }

});
