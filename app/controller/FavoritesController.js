/*
 * File: app/controller/FavoritesController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.FavoritesController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.favoritesController',

    id: 'favoritesController',

    refs: [
        {
            ref: 'mainStage',
            selector: '#mainStage'
        },
        {
            ref: 'rightCommandPanel',
            selector: '#rightCommandPanel'
        },
        {
            ref: 'leftCommandPanel',
            selector: '#leftCommandPanel'
        },
        {
            ref: 'mainViewport',
            selector: 'mainViewport'
        },
        {
            autoCreate: true,
            ref: 'favoritesPanel',
            selector: '#favoritesPanel',
            xtype: 'favoritesPanel'
        }
    ],

    onCloseFavoritesPanelButtonClick: function(button, e, eOpts) {
        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent('closeFavoritesPanel', function() {
            LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);
        });

    },

    onShowFavoritesPanel: function(callback) {
        var controller = this,
            favoritesPanel	= controller.getFavoritesPanel(),
            mainStage	= controller.getMainStage();

        mainStage.add( favoritesPanel );

        favoritesPanel.on('hide', function(component) {
            component.destroy();
        }, controller);

        // **** 1 create the commands
        LanistaTrainer.app.setStandardButtons();
        this.showCommands();

        // *** 2 Show the panel
        LanistaTrainer.app.fireEvent('showFavoritesHeaderUpdate');
        LanistaTrainer.app.fireEvent('showStage');

        // *** 4 Callback
        if (callback instanceof Function) callback();

        // *** 5 Load data
        controller.loadData();
    },

    onCloseFavoritesPanel: function(callback) {
        var controller = this;
        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getFavoritesPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    onShowFavoritesHeaderUpdate: function(favoriteName) {
        var controller = this;

        controller.getMainViewport().down("#header").update({
            info: '',
            title: Ext.ux.LanguageManager.TranslationArray.BUTTON_FAVORITES.toUpperCase() + ' - ' + favoriteName
        });


    },

    showCommands: function(callback) {

        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_ADD_TO_FAVORITE,
                itemId: 'showAddCustomersButton',
                glyph: '108@Lanista Icons' //l
            })
        );





    },

    loadData: function() {

    },

    init: function(application) {
        this.control({
            "viewport #closeFavoritesPanelButton": {
                click: this.onCloseFavoritesPanelButtonClick
            }
        });

        application.on({
            showFavoritesPanel: {
                fn: this.onShowFavoritesPanel,
                scope: this
            },
            closeFavoritesPanel: {
                fn: this.onCloseFavoritesPanel,
                scope: this
            },
            showFavoritesHeaderUpdate: {
                fn: this.onShowFavoritesHeaderUpdate,
                scope: this
            }
        });
    }

});
