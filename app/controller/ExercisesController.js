/*
 * File: app/controller/ExercisesController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.ExercisesController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.exercisesController',

    id: 'exercisesController',

    refs: {
        exercisesPanel: {
            autoCreate: true,
            selector: 'exercisesPanel',
            xtype: 'exercisesPanel'
        },
        rightCommandPanel: '#rightCommandPanel',
        nextExercises: {
            selector: '#nextExercises',
            xtype: 'Ext.panel.Tool'
        },
        previousExercises: {
            selector: '#previousExercises',
            xtype: 'Ext.panel.Tool'
        },
        leftCommandPanel: '#leftCommandPanel',
        mainViewport: 'mainViewport',
        mainStage: '#mainStage'
    },

    control: {
        "viewport #showExercisesPanelButton": {
            click: 'onShowExercisesPanelButtonClick'
        },
        "viewport #closeExercisesPanelButton": {
            click: 'onCloseExercisesPanelButtonClick'
        },
        "viewport #nextExercises": {
            click: 'onNextExercisesClick'
        },
        "viewport #previousExercises": {
            click: 'onPreviousExercisesClick'
        },
        "viewport #myExercisesButton": {
            click: 'onMyExercisesButtonClick'
        },
        "viewport #createMyExerciseButton": {
            click: 'onCreateMyExerciseButtonClick'
        }
    },

    onShowExercisesPanelButtonClick: function(button, e, eOpts) {

        LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1], function() {
            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'ExercisesPanel';
            LanistaTrainer.app.fireEvent('showExercisesPanel');
        });
    },

    onCloseExercisesPanelButtonClick: function(button, e, eOpts) {
        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent('closeExercisesPanel', function() {
            if (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1] === 'FavoritesPanel'){
                Ext.getStore('ExerciseStore').clearFilter();
                Ext.getStore('ExerciseStore').loadPage(1);
                LanistaTrainer.app.getController('FavoritesController').saveFavorite(function(){
                    LanistaTrainer.app.fireEvent('showFavoritesPanel', LanistaTrainer.app.getController('FavoritesController').favorites, 'ExercisesPanel', 'ExerciseStore', 'ExercisesController');
                });
            }
            else{
                LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);
            }
        });






    },

    onNextExercisesClick: function(tool, e, owner, eOpts) {
        var store = Ext.getStore("ExerciseStore"),
            filterRecords = (store.filterRecords && store.filterRecords > 0) ? store.filterRecords : store.proxy.filterRecords,
            totalPages = Math.ceil(filterRecords/store.pageSize),
            itemNode;

        console.log('totalPages: ' + totalPages);

        //if (Ext.getStore("ExerciseStore").currentPage < totalPages)
        //{
            store.nextPage({
                scope: this,
                callback: function(records, operation, success) {
                    if (success){
                        if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') && (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'LoginPanel')) {
                            if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'FavoritesPanel')) {
                                favorites = LanistaTrainer.app.getController ('FavoritesController').favorites.data.objects;
                                favoritesArray = favorites !== "" ? favorites.split(',') : [];

                                if (favoritesArray.length > 0 ){
                                    for (i = 0; i < records.length ; i++) {
                                        for ( j = 0; j < favoritesArray.length; j++) {
                                            if (Number(favoritesArray[j]) === Number(records[i].data.id)) {
                                                break;
                                            }
                                        }

                                        if (j !== favoritesArray.length){
                                            itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);
                                            Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                                        }
                                    }
                                }
                            }
                            else{
                                for ( var i = 0; i < records.length ; i++) {
                                    for(var j = 0; j < this.getExercisesPanel().selection.length; j++) {
                                        if(this.getExercisesPanel().selection[j][0] === records[i].data.id) {
                                            break;
                                        }
                                    }
                                    if (j !== this.getExercisesPanel().selection.length){
                                        itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);
                                        Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                                    }
                                }
                            }
                        }
                    }
                }
            });
            LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());
        //}
    },

    onPreviousExercisesClick: function(tool, e, owner, eOpts) {
        console.log("SHOW PREVIOUS EXERCISES");
        if (Ext.getStore("ExerciseStore").currentPage > 1)
        {
            var store = Ext.getStore("ExerciseStore");
            store.previousPage({
                scope: this,
                callback: function(records, operation, success) {
                    if (success){
                        if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') && (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'LoginPanel')) {
                            if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'FavoritesPanel')) {
                                favorites = LanistaTrainer.app.getController ('FavoritesController').favorites.data.objects;
                                favoritesArray = favorites !== "" ? favorites.split(',') : [];

                                if (favoritesArray.length > 0 ){
                                    for (i = 0; i < records.length ; i++) {
                                        for ( j = 0; j < favoritesArray.length; j++) {
                                            if (Number(favoritesArray[j]) === Number(records[i].data.id)) {
                                                break;
                                            }
                                        }

                                        if (j !== favoritesArray.length){
                                            itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);
                                            Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                                        }
                                    }
                                }
                            }
                            else{
                                for (var i = 0; i < records.length ; i++) {
                                    for(var j = 0; j < this.getExercisesPanel().selection.length; j++) {
                                        if(this.getExercisesPanel().selection[j][0] === records[i].data.id) {
                                            break;
                                        }
                                    }
                                    if (j !== this.getExercisesPanel().selection.length){
                                        itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);
                                        Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                                    }
                                }
                            }
                        }
                    }
                }
            });
            LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());
        }
    },

    onMyExercisesButtonClick: function(button, e, eOpts) {
        var store = Ext.getStore('ExerciseStore'),
            filterFunction,
            value,
            result = [];

        if (this.getRightCommandPanel().down('#myExercisesButton').el.dom.classList.contains('lanista-active')){
            this.getRightCommandPanel().down('#myExercisesButton').removeCls('lanista-active');
            store.removeFilter('myExercises');
        }
        else{
            this.getRightCommandPanel().down('#myExercisesButton').addCls('lanista-active');

            filterFunction = new Ext.util.Filter({
                id:'myExercises',
                filterFn: function(item){
                    value = item.data.ext_id;
                    result = value.match("\\w*CUST\\w*", "gi");
                    return (result && result.length > 0);
                }
            });
            store.filters.add (filterFunction);
        }
        store.loadPage(1);
        LanistaTrainer.app.fireEvent('showSearchHeaderUpdate');
        this.showCommands();
    },

    onCreateMyExerciseButtonClick: function(button, e, eOpts) {
        var controller = this;
        LanistaTrainer.app.fireEvent('closeExercisesPanel', function() {
            controller.promptMyExerciseNameRequest ( Ext.ux.LanguageManager.TranslationArray.BUTTON_CREATE_EMPTY_EXERCISE ,
                                                     Ext.ux.LanguageManager.TranslationArray.NEW_MYEXERCISE_MESSAGE);
        });
    },

    onShowExercisesPanel: function(callback) {
        var controller = this,
            exercisesPanel	= controller.getExercisesPanel(),
            mainStage	= controller.getMainStage(),
            store = Ext.getStore('ExerciseStore'),
            userId = localStorage.getItem("user_id"),
            exercise,
            ini = 4000,
            myExercies = false,
            user = Ext.ux.SessionManager.getUser();

        exercisesPanel.workController = controller.getModuleClassName();
        var viewportXCapacity	= Math.floor(mainStage.getEl().getWidth(true)/187);
        var viewportCapacity	= Math.floor((mainStage.getEl().getHeight(true)-47)/177) * viewportXCapacity;

        store.pageSize = viewportCapacity;

        for (var i = 0; i < store.filters.length; i++)
        {
            if (store.filters.items[i].id  == 'myExercises'){
                myExercies = true;
                break;
            }
        }

        if (!myExercies)
            store.clearFilter(true);

        store.sort('name_' + Ext.ux.LanguageManager.lang, 'ASC');
        exercisesPanel.down('#viewExercises').bindStore(store);
        store.load();

        //controller.lookUserExercises();
        if (user && user.role === '2' ){
            Ext.Ajax.request({
                url: Ext.ux.ConfigManager.getRoot() +'/tpmanager/exercise/userexercisesjson',
                method: 'get',
                headers: {
                    user_id: userId
                },
                failure : function(result, request){
                    console.log( "There were problems in looking for user exercises" );
                },
                success: function(response, opts) {
                    try {
                        var data = Ext.decode(response.responseText),
                            storeVar = Ext.getStore('ExerciseStore');

                        for (var i = 0; i < data.entries.length; i++){
                            exercise = Ext.create('LanistaTrainer.model.ExerciseModel', {
                                id: (ini + parseInt(data.entries[i].id)),
                                name_EN: data.entries[i].name_EN,
                                name_ES: data.entries[i].name_ES,
                                name_DE: data.entries[i].name_DE,
                                ext_id: data.entries[i].ext_id,
                                type: data.entries[i].type ? parseInt(data.entries[i].type) : 0,
                                changed_date: data.entries[i].changed_date,
                                unilateral: data.entries[i].unilateral,
                                coatchingnotes_DE: data.entries[i].coatchingnotes_DE ,
                                coatchingnotes_ES: data.entries[i].coatchingnotes_ES,
                                coatchingnotes_EN: data.entries[i].coatchingnotes_EN,
                                mistakes_DE: data.entries[i].mistakes_DE,
                                mistakes_ES: data.entries[i].mistakes_ES,
                                mistakes_EN: data.entries[i].mistakes_EN,
                                muscle: data.entries[i].muscle ? parseInt(data.entries[i].muscle) : 0,
                                addition: data.entries[i].addition ? parseInt(data.entries[i].addition) : 0
                            });
                            exercise.setDirty();
                            //exercise.phantom = true;
                            //storeVar.add(exercise, ini + parseInt(data.entries[i].id));
                            storeVar.add(exercise);
                        }

                        storeVar.sync();
                        storeVar.save();
                        //store.proxy.totalCount = store.proxy.totalCount + (data.entries.length - 1);

                        Ext.getStore('ExerciseStore').load(function(records, operation, success) {
                            mainStage.add( exercisesPanel );
                            mainStage.getLayout().setActiveItem("ExercisesPanel");

                            exercisesPanel.on('hide', function(component) {
                                component.destroy();
                            }, controller);

                            // **** 1 create the commands
                            LanistaTrainer.app.setStandardButtons('closeExercisesPanelButton');
                            controller.showCommands();

                            // *** 2 Show the panel
                            exercisesPanel.show();

                            LanistaTrainer.app.fireEvent('showSearchHeaderUpdate');
                            LanistaTrainer.app.fireEvent('showStage');

                            // *** 4 Callback
                            if (callback instanceof Function) callback();

                            // *** 5 Load data
                            controller.loadData();
                        });
                    }
                    catch( err ) {
                        Ext.Msg.alert('Problem', 'There were problems in looking for user exercises', Ext.emptyFn);
                    }
                }
            });
        }
        else{

            mainStage.add( exercisesPanel );
            mainStage.getLayout().setActiveItem("exercisesPanel");

            // **** 1 create the commands
            LanistaTrainer.app.setStandardButtons('closeExercisesPanelButton');
            controller.showCommands();

            // *** 2 Show the panel
            exercisesPanel.show();

            exercisesPanel.on('hide', function(component) {
                component.close();
            }, this);

            LanistaTrainer.app.fireEvent('showSearchHeaderUpdate');
            LanistaTrainer.app.fireEvent('showStage');

            // *** 4 Callback
            if (callback instanceof Function) callback();

            // *** 5 Load data
            controller.loadData();
        }
    },

    onCloseExercisesPanel: function(callback) {
        var controller = this;

        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getExercisesPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    onShowExercisesFiltered: function(value, type) {

    },

    onLoadExercises: function(afterLoadCallback) {

        var controller = this;
        Ext.getStore('ExerciseStore').setProxy(new Ext.data.proxy.LocalStorage({
            $configStrict: false,
            type: 'localstorage',
            id: '1',
            read: function(operation) {
                var me = this,
                    allRecords,
                    filterRecords,
                    records = [],
                    success = true,
                    Model = me.getModel(),
                    validCount = 0,
                    recordCreator = operation.getRecordCreator(),
                    filters, sorters, limit, filterLen, valid, record, ids, length, data, id, i, j,
                    recordsFilterLimit = [],
                    initLimit,
                    storeExercises;

                if (me.isHierarchical) {
                    records = me.getTreeData();
                } else {
                    ids = me.getIds();
                    length = ids.length;
                    id = operation.getId();

                    //read a single record
                    if (id) {
                        data = me.getRecord(id);
                        if (data !== null) {
                            record = recordCreator ? recordCreator(data, Model) : new Model(data);
                        }

                        if (record) {
                            records.push(record);
                        } else {
                            success = false;
                        }
                    } else {
                        storeExercises = Ext.getStore('ExerciseStore');
                        sorters = storeExercises.getSorters();
                        filters = storeExercises.getFilters();

                        limit = operation.getLimit();
                        allRecords = [];

                        // build an array of all records first first so we can sort them before
                        // applying filters or limit.  These are Model instances instead of raw
                        // data objects so that the sorter and filter Fn can use the Model API
                        for (i = 0; i < length; i++) {
                            data = me.getRecord(ids[i]);
                            record = recordCreator ? recordCreator(data, Model) : new Model(data);
                            allRecords.push(record);
                        }

                        if (sorters) {
                            Ext.Array.sort(allRecords, Ext.util.Sorter.createComparator(sorters));
                        }

                        for (i = 0; i < length; i++) {
                            record = allRecords[i];
                            valid = true;

                            if (filters && filters.length > 0) {
                                for (j = 0, filterLen = filters.length; j < filterLen; j++) {
                                    valid = filters.items[j].filter(record);
                                    if (!valid)
                                        break;
                                }
                            }
                            if (valid) {
                                recordsFilterLimit.push(record);
                            }
                        }
                        me.filterRecords = recordsFilterLimit.length;

                        for (i = operation.getStart() || 0; i < recordsFilterLimit.length; i++) {
                            record = recordsFilterLimit[i];
                            records.push(record);
                            validCount++;

                            if (limit && validCount === limit) {
                                break;
                            }
                        }
                    }
                }

                me.allRecords = allRecords.length;
                if (success) {
                    operation.setResultSet(new Ext.data.ResultSet({
                        records: records,
                        total  : records.length,
                        loaded : true
                    }));
                    operation.setSuccessful(true);


                } else {
                    operation.setException('Unable to load records');
                }
            }
        }));


        Ext.getStore('ExerciseStore').load({
            callback: function(records, operation, success) {
                console.log("RECORDS " + records.length);
                if (records.length === 0) {
                    Ext.getStore('ExerciseInitialStore').load({
                        callback: function(records, operation, success) {
                            var data = records;
                            var record = null;
                            for (var i = 0; i < records.length; i++) {
                                record = records[i].copy(records[i].data.id);
                                record.dirty = true;
                                Ext.getStore('ExerciseStore').add(record);
                            }
                            Ext.getStore('ExerciseStore').sync();
                            Ext.getStore('ExerciseInitialStore').removeAll();
                            Ext.getStore('ExerciseStore').loadPage(1);
                            if (afterLoadCallback instanceof Function) {
                                afterLoadCallback();
                            }
                        },
                        scope: this
                    });
                } else {
                    setTimeout(function()
                               {
                                   console.log("EXERCISES JUST CHARGED ");
                                   Ext.getStore('ExerciseStore').loadPage(1);
                                   afterLoadCallback();
                               }, 500);
                }
            },
            scope: this
        });
    },

    onShowSearchHeaderUpdate: function() {
        var store = Ext.getStore('ExerciseStore'),
             page = store.currentPage,
             totalPages = "",
             filter = "",
             controller = this,
             numOfExercises = store.proxy.filterRecords,
             totalPages = Math.ceil(numOfExercises/store.pageSize),
             searchByTextObj,
             searchText = controller.textToSearch,
             info;

        if (store.filters.items.length > 0){
            filter = ((Ext.isNumber(store.filters.items[1].getValue())) && (store.filters.items[1].textOptSel) ? '<div class="filterTitle"><span>Musclegruppe  </span> </div> <div class="filterText">' + store.filters.items[1].textOptSel+'</div> <div class="lanista-delete-search lanista-icon" id="deleteSearchFilter">&nbsp;u</div>' : '') + ((Ext.isNumber(store.filters.items[0].getValue())) && (store.filters.items[0].textOptSel) ? '<div class="filterTitle"><span> Übungstyp </span> </div> <div class="filterText">'+store.filters.items[0].textOptSel+'</div> <div class="lanista-delete-search lanista-icon" id="deleteSearchFilter">&nbsp;u</div>' : '') + ((store.filters.indexOfKey('machineAux') !== -1) && (store.filters.items[2].textOptSel)  ? '<div class="filterTitle"><span> Zusätze  </span> </div> <div class="filterText">' + store.filters.items[2].textOptSel+'</div> <div class="lanista-delete-search lanista-icon" id="deleteSearchFilter">&nbsp;u</div>' : '');
        }

        searchByTextObj = store.filters.findBy( function(item, key) {
            return (key === 'filterByWord');
        });

        if (searchByTextObj)
            filter = filter ? filter + '<div class="filterTitle"><span>' + Ext.ux.LanguageManager.TranslationArray.FILTER_TEXT_SEARCH + '</span></div>  <div class="filterText">' + searchText.toUpperCase() + '</div> <div class="lanista-delete-search lanista-icon" id="deleteSearchFilter">&nbsp;u</div>' : '<div class="filterTitle"><span>' + Ext.ux.LanguageManager.TranslationArray.FILTER_TEXT_SEARCH + '</span></div>  <div class="filterText">' + searchText.toUpperCase() + '</div> <div class="lanista-delete-search lanista-icon" id="deleteSearchFilter">&nbsp;u</div>';

        if (this.getExercisesPanel() && !this.getExercisesPanel().isHidden()) {
            if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') &&
                 (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'LoginPanel')     &&
                 (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'FavoritesPanel'))
                info = '<div class="exercises-header"><div class="header-filter lanista-exercise-filter-plan">';
            else
                info = '<div class="exercises-header"><div class="header-filter">';
            info = info + filter + '</div>' + numOfExercises + ' ' + Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase() + '<br><span class="header-subtitle">' + Ext.ux.LanguageManager.TranslationArray.PAGE + ' '+ page +' ' + Ext.ux.LanguageManager.TranslationArray.VON + ' '+totalPages+'</span></div>';

            controller.getMainViewport().down("#header").update({
               info:  this.getExercisesPanel().headerInfo ?  this.getExercisesPanel().headerInfo + info : '<div class="exercises-header">&nbsp;</div>' + info, //*********
               title: this.getExercisesPanel().headerTitle ? this.getExercisesPanel().headerTitle : Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase()
            });
        }
    },

    onCreateMyExercise: function(myexercisename) {
        var userId = localStorage.getItem("user_id"),
            user = Ext.ux.SessionManager.getUser(),
            newExercise;

        newExercise = Ext.create('LanistaTrainer.model.ExerciseModel', {
            name_DE : myexercisename,
            name_EN : myexercisename,
            name_ES : myexercisename,
            muscle:	0,
            addition: 0,
            type: 0
        });

        newExercise.setProxy(new Ext.data.proxy.Ajax({
            url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/exercise/userexercisesjson',
            model: 'Exercise',
            noCache: false,
            reader: {
                type: 'json',
                root: 'entries'
            },
            writer: {
                type: 'json',
                root: 'records',
                allowSingle: false
            },
            headers: {
                user_id: userId
            }
        }));

        newExercise.save (
            {
                callback: function ( record ){
                    LanistaTrainer.app.getController ( 'MyExerciseInfoController' ).myexercise = record;
                    LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'MyExerciseInfoPanel';
                    LanistaTrainer.app.fireEvent( 'showMyExerciseInfoPanel', myexercisename);
                }
            });

    },

    showCommands: function(callback) {

        var controller = this,
            myExercies = false,
            store = Ext.getStore('ExerciseStore'),
            user = Ext.ux.SessionManager.getUser();

        for (var i = 0; i < store.filters.length; i++)
        {
            if (store.filters.items[i].id  == 'myExercises'){
                myExercies = true;
                break;
            }

        }

        controller.tpl = controller.getExercisesPanel().down('#viewExercises').tpl;
        controller.itemSelector = controller.getExercisesPanel().down('#viewExercises').itemSelector;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        //Adding bottoms into RightPanel
        var menuFilters = controller.showExercisesMenu();

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.SEARCH,
                itemId: 'searchButton',
                menu: menuFilters,
                menuButtonAlign: 'right',
                glyph: '90@Lanista Icons' //Z
            })
        );

        if (!Ext.ux.SessionManager.getIsLoggedIn()) return;

        if (user.role === '2' ){
            this.getRightCommandPanel().add(
                Ext.create('LanistaTrainer.view.LanistaButton', {
                    text: Ext.ux.LanguageManager.TranslationArray.BUTTON_EXERCISES_MINE,
                    itemId: 'myExercisesButton',
                    glyph: '113@Lanista Icons' //q
                })
            );
        }

        if (!myExercies){
            if (user.role === '2'){
                this.getRightCommandPanel().add(
                        Ext.create('LanistaTrainer.view.LanistaButton', {
                            text: Ext.ux.LanguageManager.TranslationArray.FOLDER_CREATE,
                            itemId: 'favoritesCustomersButton',
                            userAlias: 'favoritesCustomersButton',
                            menu: LanistaTrainer.app.getController('FavoritesController').showFavorites(0, 'ExercisesPanel', 'ExerciseStore', 'ExercisesController',  'viewExercises'),
                            menuButtonAlign: 'right',
                            glyph: '122@Lanista Icons' //z
                        })
                    );

                this.getRightCommandPanel().add(
                    Ext.create('LanistaTrainer.view.LanistaButton', {
                        text: Ext.ux.LanguageManager.TranslationArray.BUTTON_RECENTLY,
                        itemId: 'recentlyButton',
                        glyph: '121@Lanista Icons' //y
                    })
                );
            }
        }
        else{
            this.getRightCommandPanel().add(
                Ext.create('LanistaTrainer.view.LanistaButton', {
                    text: Ext.ux.LanguageManager.TranslationArray.BUTTON_ADD_EXERCISES,
                    itemId: 'createMyExerciseButton',
                    glyph: '108@Lanista Icons' //l
                })
            );
            if (user.role === '2' )
                this.getRightCommandPanel().down('#myExercisesButton').addCls('lanista-active');
        }
    },

    loadData: function() {

    },

    showExercisesMenu: function() {
        container = this;
        tools = new Ext.menu.Menu(
            {
                Itemid:'exercisesMenu',
                cls:'lanista-button-menu',
                defaults: {
                    height: '50px',
                    width: '220px'
                },
                items:
                [
                    {xtype: 'textfield',
                     itemId: 'searchText',
                     hideLabel: true,
                     hideEmptyLabel: false,
                     name: 'searchText',
                     validateOnChange: false,
                     validateOnBlur: false,
                     enableKeyEvents: true,
                     emptyText: Ext.ux.LanguageManager.TranslationArray.TEXT_SEARCH_UC + '...',
                     listeners: {
                                keydown: {
                                    element: 'el',
                                    fn: function(e, textfield, eOpts){
                                        if(e.keyCode === 27){
                                            if (Ext.ComponentManager.get('recommendatiosContextMenu')){
                                                Ext.ComponentManager.get('recommendatiosContextMenu').removeAll();
                                                Ext.ComponentManager.get('recommendatiosContextMenu').hide();
                                            }
                                            container.getRightCommandPanel().getComponent('searchButton').menu.hide();
                                            return;
                                        }
                                        if (textfield.value.length > 1)
                                            container.searchWordExercisesByText(textfield.value);
                                        else{
                                                if (Ext.ComponentManager.get('recommendatiosContextMenu')){
                                                    Ext.ComponentManager.get('recommendatiosContextMenu').removeAll();
                                                    Ext.ComponentManager.get('recommendatiosContextMenu').hide();
                                                }
                                                container.getRightCommandPanel().getComponent('searchButton').menu.getComponent('searchText').focus();
                                            }
                                    },
                                    delay:100
                                 },

                                 afterrender: {
                                    element: 'el',
                                    fn: function(textfield, eOpts){
                                        textfield.on('hide', function(component) {
                                            component.destroy();
                                        }, container);
                                    }
                                 }
                             }
                    },
                    {text:	Ext.ux.LanguageManager.TranslationArray.FILTER_MUSCLES.toUpperCase(),
                     menuAlign: 'tr-tl?',
                     rtl: true,
                     menu:{
                             defaults: {
                                 height: '50px',
                                 width: '220px'
                             },
                             items:
                             [
                                     {text:	Ext.ux.LanguageManager.TranslationArray.FILTER_ALL_MUSCLES.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('', 1, this.text);
                                          }
                                     },
                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_SHOULDER.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('3', 1, this.text);
                                          }
                                     },
                                     {text:   Ext.ux.LanguageManager.TranslationArray.FILTER_ARMS.toUpperCase(),
                                              menuAlign: 'tr-tl?',
                                              rtl: true,
                                              menu:{
                                                      defaults: {
                                                              height: '50px',
                                                              width: '220px'
                                                          },
                                                      items:
                                                      [
                                                              {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BICEPS.toUpperCase(),
                                                                   handler: function () {
                                                                       container.showFilteredExercises('8', 1, this.text);
                                                                   }
                                                              },
                                                              {text: Ext.ux.LanguageManager.TranslationArray.FILTER_TRICEPS.toUpperCase(),
                                                                   handler: function () {
                                                                       container.showFilteredExercises('9', 1, this.text);
                                                                   }
                                                              },
                                                              {text: Ext.ux.LanguageManager.TranslationArray.FILTER_FOREARM.toUpperCase(),
                                                                   handler: function () {
                                                                       container.showFilteredExercises('10', 1, this.text);
                                                                   }
                                                              }
                                                       ]
                                                   }
                                     },
                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_CHEST.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('1', 1, this.text);
                                          }
                                     },
                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BACK.toUpperCase(),
                                            menuAlign: 'tr-tl?',
                                              rtl: true,
                                              menu:{
                                                      defaults: {
                                                              height: '50px',
                                                              width: '220px'
                                                          },
                                                      items:
                                                      [
                                                              {text: Ext.ux.LanguageManager.TranslationArray.FILTER_UPPERBACK.toUpperCase(),
                                                                   handler: function () {
                                                                       container.showFilteredExercises('2', 1, this.text);
                                                                   }
                                                              },
                                                              {text: Ext.ux.LanguageManager.TranslationArray.FILTER_LOWERBACK.toUpperCase(),
                                                                   handler: function () {
                                                                       container.showFilteredExercises('5', 1, this.text);
                                                                   }
                                                              }
                                                       ]
                                                   }
                                     },
                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_AB.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('7', 1, this.text);
                                          }
                                     },
                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_WAISHIP.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('6', 1, this.text);
                                          }
                                     },
                                     {text:   Ext.ux.LanguageManager.TranslationArray.FILTER_LEGS.toUpperCase(),
                                              menuAlign: 'tr-tl?',
                                              rtl: true,
                                              menu:{
                                                      defaults: {
                                                          height: '50px',
                                                          width: '220px'
                                                      },
                                                      items:
                                                      [
                                                          {text: Ext.ux.LanguageManager.TranslationArray.FILTER_FRONTTHIG.toUpperCase(),
                                                           handler: function () {
                                                               container.showFilteredExercises('4', 1, this.text);
                                                           }
                                                          },
                                                          {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BACKTHIGH.toUpperCase(),
                                                           handler: function () {
                                                               container.showFilteredExercises('14', 1, this.text);
                                                           }
                                                          },
                                                          {text: Ext.ux.LanguageManager.TranslationArray.FILTER_LOWERLEG.toUpperCase(),
                                                           handler: function () {
                                                               container.showFilteredExercises('11', 1, this.text);
                                                           }
                                                          }
                                                       ]
                                                   }
                                     }
                             ]
                          }
                    },
                    {text:	 Ext.ux.LanguageManager.TranslationArray.FILTER_TYPE.toUpperCase(),
                             menuAlign: 'tr-tl?',
                             rtl: true,
                             menu:{
                                     defaults: {
                                             height: '50px',
                                             width: '220px'
                                         },
                                     items:
                                     [
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_ALL_EXERCISES.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BODYWEIGHT.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('4', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_MACHINE.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('1', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_FREEWEIGHTS.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('2', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_CABLE.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('3', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_STRETCH.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('5', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_CARDIO.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('7', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_SPEC.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('8', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_UNILATERAL.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('9', 2, this.text);
                                          }
                                         }
                                     ]
                                 }
                    },
                    {text:   Ext.ux.LanguageManager.TranslationArray.FILTER_ADDITIVES.toUpperCase(),
                             menuAlign: 'tr-tl?',
                             rtl: true,
                             menu:{
                                     defaults: {
                                             height: '50px',
                                             width: '220px'
                                         },
                                     items:
                                     [
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_ALL_MACHINES.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_DUMBBELLS.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('1', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BARBELL.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('3', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_KETT.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('2', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BANK.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('4', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_VARADD.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('5', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BALL.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('6', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BLAST.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('7', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_JUMPER.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('8', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_FOAM.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('9', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_MINIBAND.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('11', 3, this.text);
                                                  }
                                             }
                                     ]
                                  }
                    }
                ]
            }
        );

        tools.on('beforehide', function(component) {
            return (!Ext.ComponentManager.get('recommendatiosContextMenu'));
        }, container);

        tools.on('hide', function(component) {
            component.getComponent('searchText').setValue('');
        }, container);

        return tools;
    },

    showFilteredExercises: function(seekValue, type, text) {

        var store = Ext.getStore('ExerciseStore'),
            language = Ext.ux.LanguageManager.lang,
            numOfFilters = store.filters.length,
            varSearch = seekValue,
            records,
            user = Ext.ux.SessionManager.getUser(),
            filterFunction;

        if (numOfFilters === 0 || numOfFilters === 1)
        {
            store.filters.insert(0,new Ext.util.Filter({
                id: 'type',
                property: 'type',
                value: new RegExp("^$|^(?:[0-9 ]+$)"),
                root: 'data',
                exactMatch: true
            }));
            store.filters.insert(1,new Ext.util.Filter({
                id: 'muscle',
                property: 'muscle',
                value: new RegExp("^$|^(?:[0-9 ]+$)"),
                root: 'data',
                exactMatch: true
            }));
        }

        var seekValue1 = "";
        if (type === 3)
        {
            if (seekValue !== "")
                seekValue1 = parseInt(seekValue);
        }
        else
            seekValue1 = (seekValue === "") ? new RegExp("^$|^(?:[0-9 ]+$)") : parseInt(seekValue);

        switch(type)
        {
            case 1: //By Muscle
                store.filters.items[1].textOptSel = text;
                store.filters.items[1].setValue(seekValue1);
                break;
            case 2: //By Type
                store.filters.items[0].textOptSel = text;
                store.filters.items[0].setValue(seekValue1);
                break;
            case 3://By Addtion
                store.filters.removeAtKey('machineAux');
                filterFunction = new Ext.util.Filter({
                    id: 'machineAux',
                    textOptSel: text,
                    filterFn: function(item){
                        if (Ext.isEmpty(seekValue1)) return true;
                        for (var i = 0; i < item.data.addition.length; i++) {
                            if (item.data.addition[i] ==  seekValue1)
                                return true;
                        }
                        return false;
                    }
                });
                store.filter(filterFunction);
                break;
            default:
                //
        }


        store.sort('name_' + language, 'ASC');
        store.loadPage(1);
        records = store.data.items;
        store.filterRecords = records.length;
        if ((LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') &&
            (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'LoginPanel') &&
            (user && user.role !== '2'  && LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1] === 'ExercisesSelectionView'))
        {
            if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'FavoritesPanel')) {
                favorites = LanistaTrainer.app.getController ('FavoritesController').favorites.data.objects;
                favoritesArray = favorites !== "" ? favorites.split(',') : [];

                if (favoritesArray.length > 0 ){
                    for (i = 0; i < records.length ; i++) {
                        for ( j = 0; j < favoritesArray.length; j++) {
                            if (Number(favoritesArray[j]) === Number(records[i].data.id)) {
                                break;
                            }
                        }

                        if (j !== favoritesArray.length){
                            itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);
                            Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                        }
                    }
                }
            }
            else{
                for (var i = 0; i < records.length ; i++) {
                    for(var j = 0; j < this.getExercisesPanel().selection.length; j++) {
                        if(this.getExercisesPanel().selection[j][0] === records[i].data.id) {
                            break;
                        }
                    }
                    if (j !== this.getExercisesPanel().selection.length){
                        itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);
                        Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                    }
                }
            }
        }
        LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());



    },

    setHeader: function() {
        LanistaTrainer.app.fireEvent('showSearchHeaderUpdate');
    },

    searchWordExercisesByText: function(value) {
        var controller = this,
            textToSearch = value,
            new_filters  = [],
            lang = Ext.ux.LanguageManager.lang,
            //exerciseStoreFilter = Ext.getStore('ExerciseInitialStore'),
            re = new RegExp("\\w*"+textToSearch+"\\w*", "gi"),
            result = [],
            searchList = [],
            nameValue,
            controller = this,
            exercisesMenu,
            contextMenu,
            exerciseStore = Ext.getStore('ExerciseStore'),
            current_filters = exerciseStore.filters === null ? [] : exerciseStore.filters.items,
            new_filters = [],
            indexFilter,
            records,
            user,
            recordsExercises;

        var exerciseStoreFilter = Ext.create('Ext.data.Store', {
            model: 'LanistaTrainer.model.ExerciseModel'
        });
        recordsExercises = exerciseStore.data.items;
        exerciseStoreFilter.insert(0,recordsExercises);

        var filterFunction = new Ext.util.Filter({
            filterFn: function(item){
                nameValue = lang === 'ES' ? item.data.name_ES : lang === 'EN' ? item.data.name_EN : item.data.name_DE;
                result = nameValue.match(re);
                if ( result && result.length > 0 ) {
                    for (var i = 0; i < result.length; i++){
                        if (searchList.indexOf(result[i]) == -1)
                            searchList.push(result[i]);
                    }
                }
                return (result && result.length > 0);
            }
        });

        if (textToSearch && textToSearch.length) {
            exerciseStoreFilter.clearFilter();
            exerciseStoreFilter.filter(current_filters);
            exerciseStoreFilter.removeFilter('filterByWord');
            exerciseStoreFilter.filter(filterFunction);

            //exerciseStoreFilter.load({
            //    callback: function(records, operation, success) {
            if (searchList.length > 0){
                exercisesMenu = controller.getRightCommandPanel().getComponent('searchButton').menu;

                if (!Ext.ComponentManager.get('recommendatiosContextMenu')){
                    contextMenu = Ext.create('Ext.menu.Menu', {
                        items: searchList,
                        shadow: true,
                        width: 100,
                        height: (searchList.length * 20) < 200 ? searchList.length * 20 : 200,
                        autoscroll: true,
                        cls: 'menu-lanista-button',
                        id: 'recommendatiosContextMenu'
                    });
                    contextMenu.on('hide', function(component) {
                        controller.getRightCommandPanel().getComponent('searchButton').menu.getComponent('searchText').setValue('');
                        component.destroy();
                    }, controller);
                    contextMenu.on('click', function(menu, item, e, eOpts) {
                        if (item){
                            exerciseStore.removeFilter('filterByWord');
                            re = new RegExp("\\w*"+item.text+"\\w*", "gi");
                            user = Ext.ux.SessionManager.getUser();

                            filterFunction = new Ext.util.Filter({
                                id: 'filterByWord',
                                filterFn: function(itemValue){
                                    nameValue = lang === 'ES' ? itemValue.data.name_ES : lang === 'EN' ? itemValue.data.name_EN : itemValue.data.name_DE;
                                    result = nameValue.match(re);
                                    return (result && result.length > 0);
                                }
                            });

                            //exerciseStore.filters.add(filterFunction);
                            exerciseStore.filter(filterFunction);

                            exerciseStore.loadPage(1);
                            records = exerciseStore.data.items;
                            exerciseStore.filterRecords = records.length;

                            if ((LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') &&
                                (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'LoginPanel') &&
                                (user.role === '2' )) {
                                if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'FavoritesPanel')) {
                                    favorites = LanistaTrainer.app.getController ('FavoritesController').favorites.data.objects;
                                    favoritesArray = favorites !== "" ? favorites.split(',') : [];

                                    if (favoritesArray.length > 0 ){
                                        for (i = 0; i < records.length ; i++) {
                                            for ( j = 0; j < favoritesArray.length; j++) {
                                                if (Number(favoritesArray[j]) === Number(records[i].data.id)) {
                                                    break;
                                                }
                                            }

                                            if (j !== favoritesArray.length){
                                                itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);
                                                Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                                            }
                                        }
                                    }
                                }
                                else{
                                    for (var k = 0; k < records.length ; k++) {
                                        for(var j = 0; j < this.getExercisesPanel().selection.length; j++) {
                                            if(this.getExercisesPanel().selection[j][0] === records[k].data.id) {
                                                break;
                                            }
                                        }
                                        if (j !== this.getExercisesPanel().selection.length){
                                            itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[k]);
                                            Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                                        }
                                    }
                                }
                            }

                            controller.textToSearch = item.text;
                            LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());

                            contextMenu.hide();
                            exercisesMenu.hide();
                        }
                    }, controller);
                    contextMenu.showAt(exercisesMenu.getX() - contextMenu.width, exercisesMenu.getY() - (contextMenu.height / 2));
                }
                else{
                    contextMenu = Ext.ComponentManager.get('recommendatiosContextMenu');
                    contextMenu.removeAll();
                    contextMenu.add(searchList);
                }
                controller.getRightCommandPanel().getComponent('searchButton').menu.getComponent('searchText').focus();

            }
            else{  //searchList.length === 0
                if (Ext.ComponentManager.get('recommendatiosContextMenu'))
                    Ext.ComponentManager.get('recommendatiosContextMenu').hide();
                controller.getRightCommandPanel().getComponent('searchButton').menu.getComponent('searchText').focus();
            }
            //}
            // });
        }



    },

    promptMyExerciseNameRequest: function(title, message) {
        Ext.Msg.prompt (
            title,
            message,
            function (response, myexercisename) {
                if ( response == 'ok' ) {
                    LanistaTrainer.app.fireEvent( 'createMyExercise', myexercisename );
                } else {
                    LanistaTrainer.app.fireEvent( 'showExercisesPanel' );
                }
            },
            null,
            false,
            Ext.ux.LanguageManager.TranslationArray.NEW +
              Ext.ux.LanguageManager.TranslationArray.EXERCISE ,
            {
                autoCapitalize: true,
                placeHolder: Ext.ux.LanguageManager.TranslationArray.NEW +
                             Ext.ux.LanguageManager.TranslationArray.EXERCISE ,
                clearicon: true
            }
        );
    },

    findFavoritesExercises: function() {
        var container = this,
            exerciseStore = Ext.getStore('ExerciseStore'),
            favoritesStore = Ext.getStore('FavoritesStore'),
            favoriteName,
            selection,
            records,
            menu = new Ext.menu.Menu(
                {
                    Itemid:'favoritesMenu',
                    defaults: {
                        height: '50px',
                        width: '220px'
                    }
                }
            );

        favoritesStore.getProxy().url = Ext.ux.ConfigManager.getRoot() + '/tpmanager/favorites/json';
        favoritesStore.load({
            callback: function(records, operation, success) {
                for (var i = 0; i<records.length; i++){
                    if (Number(records[i].data.type) === 0){
                        favoriteName = records[i].data.name;
                        menu.add([
                            {
                                text: records[i].data.name,
                                handler: function () {
                                            favoriteName = this.text;
                                            favoriteRecord = this.record;
                                            filterFunction = new Ext.util.Filter({
                                                filterFn: function(item){
                                                    favoritesIds = favoriteRecord.data.objects ? favoriteRecord.data.objects.split(',') : '';
                                                    for ( var j = 0; j < favoritesIds.length; j++ ){
                                                        if (Number(item.data.id) === Number(favoritesIds[j]))
                                                            return true;
                                                    }
                                                }
                                            });
                                            exerciseStore.filters.add(filterFunction);
                                            exerciseStore.loadPage(1);
                                            selection = container.getExercisesPanel().selection;
                                            records = exerciseStore.data.items;
                                            for (var k = 0; k < records.length ; k++) {
                                                for(var m = 0; m < selection.length; m++) {
                                                    if(selection[m][0] === records[k].data.id) {
                                                        break;
                                                    }
                                                }
                                                if (m !== selection.length){
                                                    itemNode = container.getExercisesPanel().down('#viewExercises').getNode(records[k]);
                                                    Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                                                }
                                            }
                                            LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());
                                        },
                                record: records[i]
                            }
                        ]);
                    }
                }
            }
        });
        favoritesStore.clearFilter();
        return menu;


    },

    lookUserExercises: function() {
        var store = Ext.getStore('ExerciseStore'),
            userId = localStorage.getItem("user_id"),
            exercise;

        Ext.Ajax.request({
            url: Ext.ux.ConfigManager.getRoot() +'/tpmanager/exercise/userexercisesjson',
            method: 'get',
            headers: {
                user_id: userId
            },
            failure : function(result, request){
                console.log( "There were problems in looking for user exercises" );
            },
            success: function(response, opts) {
                try {
                        var data = Ext.decode(response.responseText);

                        for (var i = 0; i < data.entries.length; i++){
                            exercise = Ext.create('LanistaTrainer.model.ExerciseModel', {
                                id: data.entries[i].id,
                                name_EN: data.entries[i].name_EN,
                                name_ES: data.entries[i].name_ES,
                                name_DE: data.entries[i].name_DE,
                                ext_id: data.entries[i].ext_id,
                                type: data.entries[i].type ,
                                changed_date: data.entries[i].changed_date,
                                unilateral: data.entries[i].unilateral,
                                coatchingnotes_DE: data.entries[i].coatchingnotes_DE ,
                                coatchingnotes_ES: data.entries[i].coatchingnotes_ES,
                                coatchingnotes_EN: data.entries[i].coatchingnotes_EN,
                                mistakes_DE: data.entries[i].mistakes_DE,
                                mistakes_ES: data.entries[i].mistakes_ES,
                                mistakes_EN: data.entries[i].mistakes_EN,
                                muscle: data.entries[i].muscle,
                                addition: data.entries[i].addition
                            });
                            Ext.getStore('ExerciseStore').add(exercise);
                        }

                        store.proxy.totalCount = store.proxy.totalCount + (data.entries.length - 1);
                   }
                catch( err ) {
                    Ext.Msg.alert('Problem', 'There were problems in looking for user exercises', Ext.emptyFn);
                }
            }
        });
    },

    init: function(application) {
        application.on({
            showExercisesPanel: {
                fn: this.onShowExercisesPanel,
                scope: this
            },
            closeExercisesPanel: {
                fn: this.onCloseExercisesPanel,
                scope: this
            },
            showExercisesFiltered: {
                fn: this.onShowExercisesFiltered,
                scope: this
            },
            loadExercises: {
                fn: this.onLoadExercises,
                scope: this
            },
            showSearchHeaderUpdate: {
                fn: this.onShowSearchHeaderUpdate,
                scope: this
            },
            createMyExercise: {
                fn: this.onCreateMyExercise,
                scope: this
            }
        });
    }

});
