/*
 * File: app/controller/ExercisesController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.ExercisesController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.exercisesController',

    id: 'exercisesController',

    refs: [
        {
            autoCreate: true,
            ref: 'exercisesPanel',
            selector: 'exercisesPanel',
            xtype: 'exercisesPanel'
        },
        {
            ref: 'rightCommandPanel',
            selector: '#rightCommandPanel'
        },
        {
            ref: 'nextExercises',
            selector: '#nextExercises',
            xtype: 'Ext.panel.Tool'
        },
        {
            ref: 'previousExercises',
            selector: '#previousExercises',
            xtype: 'Ext.panel.Tool'
        },
        {
            ref: 'leftCommandPanel',
            selector: '#leftCommandPanel'
        },
        {
            ref: 'mainViewport',
            selector: 'mainViewport'
        },
        {
            ref: 'mainStage',
            selector: '#mainStage'
        }
    ],

    onShowExercisesPanelButtonClick: function(button, e, eOpts) {

        LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1], function() {
            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'ExercisesPanel';
            LanistaTrainer.app.fireEvent('showExercisesPanel');
        });
    },

    onCloseExercisesPanelButtonClick: function(button, e, eOpts) {
        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent('closeExercisesPanel', function() {
            LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);
        });


    },

    onNextExercisesClick: function(tool, e, eOpts) {
        console.log("SHOW NEXT EXERCISES");

        var store = Ext.getStore("ExerciseStore"),
            totalPages = Math.ceil(store.proxy.totalCount/store.pageSize),
            itemNode;

        console.log('totalPages: ' + totalPages);

        if (Ext.getStore("ExerciseStore").currentPage < totalPages)
        {
            store.nextPage({
                scope: this,
                callback: function(records, operation, success) {
                    if (success){
                        if ( LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') {
                            for (var i = 0; i < records.length ; i++) {
                                for(var j = 0; j < this.getExercisesPanel().selection.length; j++) {
                                    if(this.getExercisesPanel().selection[j][0] === records[i].data.id) {
                                        break;
                                    }
                                }
                                if (j !== this.getExercisesPanel().selection.length){
                                    itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);
                                    Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                                }
                            }
                        }
                    }
                }
            });
            LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());
        }
    },

    onPreviousExercisesClick: function(tool, e, eOpts) {
        console.log("SHOW PREVIOUS EXERCISES");
        if (Ext.getStore("ExerciseStore").currentPage > 1)
        {
            var store = Ext.getStore("ExerciseStore");
            store.previousPage({
                scope: this,
                callback: function(records, operation, success) {
                    if (success){
                        if ( LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') {
                            for (var i = 0; i < records.length ; i++) {
                                for(var j = 0; j < this.getExercisesPanel().selection.length; j++) {
                                    if(this.getExercisesPanel().selection[j][0] === records[i].data.id) {
                                        break;
                                    }
                                }
                                if (j !== this.getExercisesPanel().selection.length){
                                    itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);
                                    Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                                }
                            }
                        }
                    }
                }
            });
            LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());
        }
    },

    onShowExercisesPanel: function(callback) {

        var controller = this,
            exercisesPanel	= controller.getExercisesPanel(),
            mainStage	= controller.getMainStage(),
            store = Ext.getStore('ExerciseStore');

        exercisesPanel.controller = controller;
        mainStage.add( exercisesPanel );

        exercisesPanel.on('hide', function(component) {
            component.destroy();
        }, controller);

        var viewportXCapacity	= Math.floor(mainStage.getEl().getWidth(true)/187);
        var viewportCapacity	= Math.floor((mainStage.getEl().getHeight(true)-47)/177) * viewportXCapacity;

        store.pageSize = viewportCapacity;
        store.clearFilter(true);
        store.sort('name_' + Ext.ux.LanguageManager.lang, 'ASC');
        store.load();

        // **** 1 create the commands
        LanistaTrainer.app.setStandardButtons('closeExercisesPanelButton');
        this.showCommands();

        // *** 2 Show the panel
        exercisesPanel.show();

        LanistaTrainer.app.fireEvent('showSearchHeaderUpdate');
        LanistaTrainer.app.fireEvent('showStage');

        // *** 4 Callback
        if (callback instanceof Function) callback();

        // *** 5 Load data
        controller.loadData();
    },

    onCloseExercisesPanel: function(callback) {
        var controller = this;
        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getExercisesPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    onShowExercisesFiltered: function(value, type) {

    },

    onLoadExercises: function(afterLoadCallback) {

        var controller = this;
        Ext.getStore('ExerciseStore').load({
        	callback: function(records, operation, success) {
                console.log("RECORDS " + records.length);
        		if (records.length == 0) {
        			Ext.getStore('ExerciseInitialStore').load({
        				callback: function(records, operation, success) {
        					var data = records;
        					var record = null;
        					for (var i = 0; i < records.length; i++) {
        						record = records[i].copy(records[i].data.id);
                                record.setDirty();
        						Ext.getStore('ExerciseStore').add(record);
        					}
        					Ext.getStore('ExerciseStore').sync();
                            Ext.getStore('ExerciseInitialStore').removeAll();
                            Ext.getStore('ExerciseStore').loadPage(1);
                            if (afterLoadCallback instanceof Function) {
        						afterLoadCallback();
        					}
        				},
        					scope: this
        			});
        		} else {
                    Ext.getStore('ExerciseStore').loadPage(1);
        			afterLoadCallback();
        		}
        	},
        	scope: this
        });
    },

    onShowSearchHeaderUpdate: function() {
        var store = Ext.getStore('ExerciseStore'),
             page = store.currentPage,
             totalPages = "",
             filter = "",
             controller = this,
             numOfExercises = store.proxy.totalCount,
             totalPages = Math.ceil(numOfExercises/store.pageSize);


        if (store.filters.items.length > 1)
            filter = (store.filters.items[1].textOptSel ? 'Musclegruppe: '+store.filters.items[1].textOptSel+'<br>' : '') + (store.filters.items[0].textOptSel ? ' Übungstyp: '+store.filters.items[0].textOptSel+'<br>' : '') + (store.filters.items[2].textOptSel ? ' Zusätze: '+store.filters.items[2].textOptSel+'<br>' : '');


        if (Ext.getStore("ExerciseStore").currentPage > totalPages)
            return false;

        if (this.getExercisesPanel() && !this.getExercisesPanel().isHidden()) {
            var info = '<div class="exercises-header"><div class="header-filter">' + filter + '</div>' + numOfExercises + ' ' + Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase() + '<br><span class="header-subtitle">' + Ext.ux.LanguageManager.TranslationArray.PAGE + ' '+ page +' ' + Ext.ux.LanguageManager.TranslationArray.VON + ' '+totalPages+'</span></div>';
            controller.getMainViewport().down("#header").update({
               info:  this.getExercisesPanel().headerInfo ?  this.getExercisesPanel().headerInfo + info : info,
               title: this.getExercisesPanel().headerTitle ? this.getExercisesPanel().headerTitle : Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase()
            });
        }

        //var exercisesView = this.getExercisesView();
        //var HeaderView = this.getHeaderView();
        //var totalPages = Math.ceil(totalCounts/this.ViewPortCapacityGlb);
        //var filter = (isNaN(this.filters[1]) ? 'Musclegruppe: '+ this.filters[1] + '<br>' : '') + (isNaN(this.filters[2]) ? ' Übungstyp: '+ this.filters[2] + '<br>' : '') + (isNaN(this.filters[3]) ? ' Zusätze: '+ this.filters[3] + '<br>' : '');


        //*****************************************
        //OJO:  BUSCAR TAMANIO DEL BROWSER!!!!!!  PARA SABER CUANTOS EJERCICIOS ENTRAN EN LA PAGINA!!!!!!!
        //*****************************************


    },

    showCommands: function(callback) {

        var controller = this;
        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        //Adding bottoms into RightPanel
        var menuFilters = controller.showExercisesMenu();

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.SEARCH,
                itemId: 'searchButton',
                menu: menuFilters,
                menuButtonAlign: 'right',
                glyph: '90@Lanista Icons' //Z
            })
        );


    },

    loadData: function() {

    },

    showExercisesMenu: function() {
        container = this;
        tools = new Ext.menu.Menu(
            {
                Itemid:'exercisesMenu',
                defaults: {
                    height: '50px',
                    width: '220px'
                },
                items:
                [
                    {xtype: 'textfield',
                     itemId: 'searchText',
                     hideLabel: true,
                     hideEmptyLabel: false,
                     name: 'searchText',
                     validateOnChange: false,
                     validateOnBlur: false,
                     enableKeyEvents: true,
                     emptyText: Ext.ux.LanguageManager.TranslationArray.TEXT_SEARCH_UC + '...',
                     listeners: {
                                keydown: {
                                    element: 'el',
                                    fn: function(e, textfield, eOpts){
                                        if (textfield.value.length > 1)
                                            container.searchWordExercisesByText(textfield.value);
                                        else{
                                            if (Ext.ComponentManager.get('recommendatiosContextMenu')){
                                                Ext.ComponentManager.get('recommendatiosContextMenu').removeAll();
                                                Ext.ComponentManager.get('recommendatiosContextMenu').hide();
                                            }
                                            if ( LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'DashboardPanel')
                                                container.getRightCommandPanel().getComponent('searchButton').menu.getComponent('searchText').focus();
                                            else
                                                container.getRightCommandPanel().getComponent('showExerciseFilterButton').menu.getComponent('searchText').focus();
                                        }
                                    },
                                    delay:100
                                 },

                                 afterrender: {
                                    element: 'el',
                                    fn: function(textfield, eOpts){
                                        textfield.on('hide', function(component) {
                                            component.destroy();
                                        }, container);
                                    }
                                 }
                             }
                    },
                    {text:	Ext.ux.LanguageManager.TranslationArray.FILTER_MUSCLES.toUpperCase(),
                     menuAlign: 'tr-tl?',
                     rtl: true,
                     menu:{
                             defaults: {
                                 height: '50px',
                                 width: '220px'
                             },
                             items:
                             [
                                     {text:	Ext.ux.LanguageManager.TranslationArray.FILTER_ALL_MUSCLES.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('', 1, this.text);
                                          }
                                     },
                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_SHOULDER.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('3', 1, this.text);
                                          }
                                     },
                                     {text:   Ext.ux.LanguageManager.TranslationArray.FILTER_ARMS.toUpperCase(),
                                              menuAlign: 'tr-tl?',
                                              rtl: true,
                                              menu:{
                                                      defaults: {
                                                              height: '50px',
                                                              width: '220px'
                                                          },
                                                      items:
                                                      [
                                                              {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BICEPS.toUpperCase(),
                                                                   handler: function () {
                                                                       container.showFilteredExercises('8', 1, this.text);
                                                                   }
                                                              },
                                                              {text: Ext.ux.LanguageManager.TranslationArray.FILTER_TRICEPS.toUpperCase(),
                                                                   handler: function () {
                                                                       container.showFilteredExercises('9', 1, this.text);
                                                                   }
                                                              },
                                                              {text: Ext.ux.LanguageManager.TranslationArray.FILTER_FOREARM.toUpperCase(),
                                                                   handler: function () {
                                                                       container.showFilteredExercises('10', 1, this.text);
                                                                   }
                                                              }
                                                       ]
                                                   }
                                     },
                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_CHEST.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('1', 1, this.text);
                                          }
                                     },
                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BACK.toUpperCase(),
                                            menuAlign: 'tr-tl?',
                                              rtl: true,
                                              menu:{
                                                      defaults: {
                                                              height: '50px',
                                                              width: '220px'
                                                          },
                                                      items:
                                                      [
                                                              {text: Ext.ux.LanguageManager.TranslationArray.FILTER_UPPERBACK.toUpperCase(),
                                                                   handler: function () {
                                                                       container.showFilteredExercises('2', 1, this.text);
                                                                   }
                                                              },
                                                              {text: Ext.ux.LanguageManager.TranslationArray.FILTER_LOWERBACK.toUpperCase(),
                                                                   handler: function () {
                                                                       container.showFilteredExercises('5', 1, this.text);
                                                                   }
                                                              }
                                                       ]
                                                   }
                                     },
                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_AB.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('7', 1, this.text);
                                          }
                                     },
                                     {text: Ext.ux.LanguageManager.TranslationArray.FILTER_WAISHIP.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('6', 1, this.text);
                                          }
                                     },
                                     {text:   Ext.ux.LanguageManager.TranslationArray.FILTER_LEGS.toUpperCase(),
                                              menuAlign: 'tr-tl?',
                                              rtl: true,
                                              menu:{
                                                      defaults: {
                                                          height: '50px',
                                                          width: '220px'
                                                      },
                                                      items:
                                                      [
                                                          {text: Ext.ux.LanguageManager.TranslationArray.FILTER_FRONTTHIG.toUpperCase(),
                                                           handler: function () {
                                                               container.showFilteredExercises('4', 1, this.text);
                                                           }
                                                          },
                                                          {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BACKTHIGH.toUpperCase(),
                                                           handler: function () {
                                                               container.showFilteredExercises('14', 1, this.text);
                                                           }
                                                          },
                                                          {text: Ext.ux.LanguageManager.TranslationArray.FILTER_LOWERLEG.toUpperCase(),
                                                           handler: function () {
                                                               container.showFilteredExercises('11', 1, this.text);
                                                           }
                                                          }
                                                       ]
                                                   }
                                     }
                             ]
                          }
                    },
                    {text:	 Ext.ux.LanguageManager.TranslationArray.FILTER_TYPE.toUpperCase(),
                             menuAlign: 'tr-tl?',
                             rtl: true,
                             menu:{
                                     defaults: {
                                             height: '50px',
                                             width: '220px'
                                         },
                                     items:
                                     [
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_ALL_EXERCISES.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BODYWEIGHT.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('4', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_MACHINE.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('1', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_FREEWEIGHTS.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('2', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_CABLE.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('3', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_STRETCH.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('5', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_CARDIO.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('7', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_SPEC.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('8', 2, this.text);
                                          }
                                         },
                                         {text: Ext.ux.LanguageManager.TranslationArray.FILTER_UNILATERAL.toUpperCase(),
                                          handler: function () {
                                              container.showFilteredExercises('9', 2, this.text);
                                          }
                                         }
                                     ]
                                 }
                    },
                    {text:   Ext.ux.LanguageManager.TranslationArray.FILTER_ADDITIVES.toUpperCase(),
                             menuAlign: 'tr-tl?',
                             rtl: true,
                             menu:{
                                     defaults: {
                                             height: '50px',
                                             width: '220px'
                                         },
                                     items:
                                     [
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_ALL_MACHINES.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_DUMBBELLS.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('1', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BARBELL.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('3', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_KETT.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('2', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BANK.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('4', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_VARADD.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('5', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BALL.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('6', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_BLAST.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('7', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_JUMPER.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('8', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_FOAM.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('9', 3, this.text);
                                                  }
                                             },
                                             {text: Ext.ux.LanguageManager.TranslationArray.FILTER_MINIBAND.toUpperCase(),
                                                  handler: function () {
                                                      container.showFilteredExercises('11', 3, this.text);
                                                  }
                                             }
                                     ]
                                  }
                    }
                ]
            }
        );

        tools.on('beforehide', function(component) {
            return (!Ext.ComponentManager.get('recommendatiosContextMenu'));
        }, container);

        return tools;
    },

    showFilteredExercises: function(seekValue, type, text) {

        var store = Ext.getStore('ExerciseStore'),
            language = Ext.ux.LanguageManager.lang,
            numOfFilters = store.filters.length,
            varSearch = seekValue,
            records;

        if (numOfFilters === 0 || numOfFilters === 1)
        {
            store.filters.insert(0,new Ext.util.Filter({
                property: 'type',
                value: new RegExp("^$|^(?:[0-9 ]+$)"),
                root: 'data',
                exactMatch: true
            }));
            store.filters.insert(1,new Ext.util.Filter({
                property: 'muscle',
                value: new RegExp("^$|^(?:[0-9 ]+$)"),
                root: 'data',
                exactMatch: true
            }));

            var filterFunction = new Ext.util.Filter({
                filterFn: function(item){
                    if (Ext.isEmpty(this.serchValue)) return true;
                    for (var i = 0; i < item.data.addition.length; i++) {
                        if (item.data.addition[i] ==  this.serchValue)
                            return true;
                    }
                    return false;
                }
            });

            store.filters.insert(2,filterFunction);
        }

        var seekValue1 = "";
        if (type === 3)
        {
            if (seekValue !== "")
                seekValue1 = parseInt(seekValue);
        }
        else
            seekValue1 = (seekValue === "") ? new RegExp("^$|^(?:[0-9 ]+$)") : parseInt(seekValue);

        switch(type)
        {
            case 1: //By Muscle
                store.filters.items[1].textOptSel = text;
                store.filters.items[1].setValue(seekValue1);
              break;
            case 2: //By Type
                store.filters.items[0].textOptSel = text;
                store.filters.items[0].setValue(seekValue1);
              break;
            case 3://By Addtion
                store.filters.items[2].textOptSel = text;
                store.filters.items[2].setValue(seekValue1);
                store.filters.items[2].serchValue = seekValue1;
              break;
            default:
              //
        }

        store.sort('name_' + language, 'ASC');
        store.loadPage(1);
        records = store.data.items;
        if ( LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') {
            for (var i = 0; i < records.length ; i++) {
                for(var j = 0; j < this.getExercisesPanel().selection.length; j++) {
                    if(this.getExercisesPanel().selection[j][0] === records[i].data.id) {
                        break;
                    }
                }
                if (j !== this.getExercisesPanel().selection.length){
                    itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);
                    Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                }
            }
        }
        LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());



    },

    setHeader: function() {
        LanistaTrainer.app.fireEvent('showSearchHeaderUpdate');
    },

    searchWordExercisesByText: function(value) {
        var controller = this,
            textToSearch = value,
            new_filters  = [],
            lang = Ext.ux.LanguageManager.lang,
            exerciseStoreFilter = Ext.getStore('ExerciseInitialStore'),
            re = new RegExp("\\w*"+textToSearch+"\\w*", "gi"),
            result = [],
            searchList = [],
            nameValue,
            controller = this,
            exercisesMenu,
            contextMenu,
            exerciseStore = Ext.getStore('ExerciseStore'),
            current_filters = exerciseStore.filters === null ? [] : exerciseStore.filters.items,
            new_filters = [],
            indexFilter,
            records;

        var filterFunction = new Ext.util.Filter({
                filterFn: function(item){
                    nameValue = lang === 'ES' ? item.data.name_ES : lang === 'EN' ? item.data.name_EN : item.data.name_DE;
                    result = nameValue.match(re);
                    if ( result && result.length > 0 ) {
                        for (var i = 0; i < result.length; i++){
                            if (searchList.indexOf(result[i]) == -1)
                                searchList.push(result[i]);
                        }
                    }
                    return (result && result.length > 0);
                }
            });

        if (textToSearch && textToSearch.length) {
            exerciseStoreFilter.clearFilter();
            //The Exercises filters are copied to the InitialExerciseStore to search the words
            exerciseStoreFilter.filter(current_filters);
            exerciseStoreFilter.removeFilter('filterByWord');
            exerciseStoreFilter.filters.add (filterFunction);
            exerciseStoreFilter.load({
                callback: function(records, operation, success) {
                    if (searchList.length > 0){
                        if ( LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'DashboardPanel')
                            exercisesMenu = controller.getRightCommandPanel().getComponent('searchButton').menu;
                        else
                            exercisesMenu = controller.getRightCommandPanel().getComponent('showExerciseFilterButton').menu;

                        if (!Ext.ComponentManager.get('recommendatiosContextMenu')){
                            contextMenu = Ext.create('Ext.menu.Menu', {
                                items: searchList,
                                width: 100,
                                height: (searchList.length * 20) < 200 ? searchList.length * 20 : 200,
                                autoscroll: true,
                                id: 'recommendatiosContextMenu'
                            });
                            contextMenu.on('hide', function(component) {
                                component.destroy();
                            }, controller);
                            contextMenu.on('click', function(menu, item, e, eOpts) {
                                if (item){
                                    exerciseStore.removeFilter('filterByWord');
                                    re = new RegExp("\\w*"+item.text+"\\w*", "gi");
                                    filterFunction = new Ext.util.Filter({
                                        id: 'filterByWord',
                                        filterFn: function(itemValue){
                                            nameValue = lang === 'ES' ? itemValue.data.name_ES : lang === 'EN' ? itemValue.data.name_EN : itemValue.data.name_DE;
                                            result = nameValue.match(re);
                                            return (result && result.length > 0);
                                        }
                                    });
                                    exerciseStore.filters.add(filterFunction);

                                    exerciseStore.loadPage(1);
                                    records = exerciseStore.data.items;
                                    if ( LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') {
                                        for (var k = 0; k < records.length ; k++) {
                                            for(var j = 0; j < this.getExercisesPanel().selection.length; j++) {
                                                if(this.getExercisesPanel().selection[j][0] === records[k].data.id) {
                                                    break;
                                                }
                                            }
                                            if (j !== this.getExercisesPanel().selection.length){
                                                itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[k]);
                                                Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                                            }
                                        }
                                    }
                                    LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());

                                    if ( LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'DashboardPanel')
                                        controller.getRightCommandPanel().getComponent('searchButton').menu.getComponent('searchText').setValue('');
                                    else
                                        controller.getRightCommandPanel().getComponent('showExerciseFilterButton').menu.getComponent('searchText').setValue('');

                                    contextMenu.hide();
                                    exercisesMenu.hide();
                                }
                            }, controller);
                            contextMenu.showAt(exercisesMenu.getX() - contextMenu.width, exercisesMenu.getY() - (contextMenu.height / 2));
                        }
                        else{
                            contextMenu = Ext.ComponentManager.get('recommendatiosContextMenu');
                            contextMenu.removeAll();
                            contextMenu.add(searchList);
                        }

                        if ( LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'DashboardPanel')
                            controller.getRightCommandPanel().getComponent('searchButton').menu.getComponent('searchText').focus();
                        else
                            controller.getRightCommandPanel().getComponent('showExerciseFilterButton').menu.getComponent('searchText').focus();

                    }
                }
            });
        }



    },

    init: function(application) {
        this.control({
            "viewport #showExercisesPanelButton": {
                click: this.onShowExercisesPanelButtonClick
            },
            "viewport #closeExercisesPanelButton": {
                click: this.onCloseExercisesPanelButtonClick
            },
            "viewport #nextExercises": {
                click: this.onNextExercisesClick
            },
            "viewport #previousExercises": {
                click: this.onPreviousExercisesClick
            }
        });

        application.on({
            showExercisesPanel: {
                fn: this.onShowExercisesPanel,
                scope: this
            },
            closeExercisesPanel: {
                fn: this.onCloseExercisesPanel,
                scope: this
            },
            showExercisesFiltered: {
                fn: this.onShowExercisesFiltered,
                scope: this
            },
            loadExercises: {
                fn: this.onLoadExercises,
                scope: this
            },
            showSearchHeaderUpdate: {
                fn: this.onShowSearchHeaderUpdate,
                scope: this
            }
        });
    }

});
