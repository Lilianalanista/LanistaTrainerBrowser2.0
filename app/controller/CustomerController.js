/*
 * File: app/controller/CustomerController.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.CustomerController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.customercontroller',

    id: 'customerController',

    refs: [
        {
            ref: 'mainStage',
            selector: '#mainStage'
        },
        {
            ref: 'rightCommandPanel',
            selector: '#rightCommandPanel'
        },
        {
            ref: 'leftCommandPanel',
            selector: '#leftCommandPanel'
        },
        {
            ref: 'mainViewport',
            selector: 'mainViewport'
        },
        {
            autoCreate: true,
            ref: 'CustomersPanel',
            selector: '#customersPanel',
            xtype: 'customersPanel'
        }
    ],

    onShowCustomerPanelButtonClick: function(button, e, eOpts) {
        LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.activePanel, function() {
            LanistaTrainer.app.fireEvent('showCustomerPanel');
        });
    },

    onCloseCustomerPanelButtonClick: function(button, e, eOpts) {
        LanistaTrainer.app.fireEvent('closeCustomerPanel', function() {
            LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.previousPanel);
        });

    },

    onNextCustomers: function(tool, e, eOpts) {
        console.log("SHOW NEXT CUSTOMERS");

        var store = Ext.getStore("CustomerStore");
        //var totalPages = Math.ceil(store.proxy.totalCount/store.pageSize);

        //console.log('totalPages: ' + totalPages);

        //if (Ext.getStore("CustomerStore").currentPage < totalPages)
        //{
            store.nextPage();
            //LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());
        //}
    },

    onPreviousCustomers: function(tool, e, eOpts) {
        console.log("SHOW PREVIOUS CUSTOMERS");
        if (Ext.getStore("CustomerStore").currentPage > 1)
        {
            var store = Ext.getStore("CustomerStore");
            store.previousPage();
            //LanistaTrainer.app.fireEvent('showSearchHeaderUpdate', Ext.ux.LanguageManager.TranslationArray.EXERCISES.toUpperCase());
        }
    },

    onShowCustomerPanel: function(callback) {
        Ext.getStore('CustomerStore').load();

        var controller = this,
            customerPanel	= controller.getCustomersPanel(),
            mainStage	= controller.getMainStage();

        LanistaTrainer.app.previousPanel = LanistaTrainer.app.activePanel;
        LanistaTrainer.app.activePanel = "customerPanel";

        mainStage.add( customerPanel );

        customerPanel.on('hide', function(component) {
            component.destroy();
        }, controller);

        /*var viewExercises = exercisesPanel.down('#viewExercises');
        store = viewExercises.store;
        store.clearFilter(true);
        store.sort('name_' + Ext.ux.LanguageManager.lang, 'ASC');
        console.log("Total: " + store.proxy.totalCount);*/

        // **** 1 create the commands
        LanistaTrainer.app.setStandardButtons('closeCustomerPanelButton');
        this.showCommands();

        // *** 2 Show the panel
        customerPanel.show();

        LanistaTrainer.app.fireEvent('showCustomersHeaderUpdate');
        LanistaTrainer.app.fireEvent('showStage');

        // *** 4 Callback
        if (callback instanceof Function) callback();

        // *** 5 Load data
        controller.loadData();


    },

    onCloseCustomerPanel: function(callback) {
        var controller = this;
        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getCustomersPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    showCommands: function(callback) {

        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });


        /*
        var privacySettingsButton = Ext.create('LanistaTrainerTouch.view.LanistaButton', {
            iconCls: 'lanista-privacy',
            text:  Ext.ux.LanguageManager.TranslationArray.BUTTON_PRIVACY,
            itemId: 'privacySettingsButton'
        });
        var passwordResetButton = Ext.create('LanistaTrainerTouch.view.LanistaButton', {
            iconCls: 'lanista-question',
            text: Ext.ux.LanguageManager.TranslationArray.BUTTON_PASSWORD_RESET,
            itemId: 'forgotPasswordButton'
        });
        var licenceButton = Ext.create('LanistaTrainerTouch.view.LanistaButton', {
            iconCls: localStorage.getItem("status") == '1' ? 'lanista-checkmark' : 'lanista-cart',
            text: Ext.ux.LanguageManager.TranslationArray.LICENSE,
            itemId: 'licenseButton',
            cls: localStorage.getItem("status") == '1' ? ['lanista-command-buton'] : ['lanista-command-buton','lanista-command-buton-red']
        });

        controller.getRightCommandPanel().add(
            passwordResetButton
        );
        controller.getRightCommandPanel().add(
            privacySettingsButton
        );
        controller.getRightCommandPanel().add(
            licenceButton
        );
        */


    },

    loadData: function() {

    },

    onShowCustomersHeaderUpdate: function() {
        var controller = this;
        if (this.getCustomersPanel() && !this.getCustomersPanel().isHidden()) {
            controller.getMainViewport().down("#header").update({
               info: '',
               title: '-' + Ext.ux.LanguageManager.TranslationArray.CUSTOMER_LIST.toUpperCase()
            });
        }
    },

    init: function(application) {
        this.control({
            "viewport #showCustomerPanelButton": {
                click: this.onShowCustomerPanelButtonClick
            },
            "viewport #closeCustomerPanelButton": {
                click: this.onCloseCustomerPanelButtonClick
            },
            "viewport #nextCustomers": {
                click: this.onNextCustomers
            },
            "viewport #previousCustomers": {
                click: this.onPreviousCustomers
            }
        });

        application.on({
            showCustomerPanel: {
                fn: this.onShowCustomerPanel,
                scope: this
            },
            closeCustomerPanel: {
                fn: this.onCloseCustomerPanel,
                scope: this
            },
            showCustomersHeaderUpdate: {
                fn: this.onShowCustomersHeaderUpdate,
                scope: this
            }
        });
    }

});
