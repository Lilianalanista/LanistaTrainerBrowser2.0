/*
 * File: app/controller/UserInfoController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.UserInfoController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.userInfoController',

    id: 'userInfoController',

    refs: [
        {
            ref: 'mainStage',
            selector: '#mainStage'
        },
        {
            ref: 'leftCommandPanel',
            selector: '#leftCommandPanel'
        },
        {
            ref: 'rightCommandPanel',
            selector: '#rightCommandPanel'
        },
        {
            ref: 'mainViewport',
            selector: 'mainViewport'
        },
        {
            autoCreate: true,
            ref: 'userInfoPanel',
            selector: '#userInfoPanel',
            xtype: 'userInfoPanel'
        },
        {
            ref: 'user_personalData',
            selector: '#user_personalData'
        },
        {
            ref: 'user_companyContacts',
            selector: '#user_companyContacts'
        },
        {
            ref: 'user_LicenseData',
            selector: '#user_LicenseData'
        }
    ],

    onShowUserInfoPanelButton: function(button, e, eOpts) {
        LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1], function() {
            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'UserInfoPanel';
            LanistaTrainer.app.fireEvent('showUserInfoPanel');
        });
    },

    onCloseUserInfoPanelButton: function(button, e, eOpts) {
        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent('closeUserInfoPanel', function() {
            LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);
        });

    },

    onCancelSettingsButtonClick: function(button, e, eOpts) {
        var controller = this;

        controller.loadCurrentUser();
        controller.showCommands();
    },

    onSaveSettingsButtonClick: function(button, e, eOpts) {
        var controller = this,
            server = Ext.ux.ConfigManager.getServer(),
            root = Ext.ux.ConfigManager.getRoot() + '/tpmanager/',
            form_data = controller.getUserInfoPanel().getValues(),
            email = form_data.email;

        if (email === '')
        {
                Ext.Msg.alert('Email waren leer', 'Versuche es noch mal !', function() {
                    controller.getUserInfoPanel().getForm().findField('email').focus();
                });
        } else
        {
            var reg = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
            if(reg.test(email) === false)
            {
                Ext.Msg.alert('Falsche Emailadresse', 'Versuche es noch mal !', function() {
                    controller.getUserInfoPanel().getForm().findField('email').focus();
                });
            } else
            {
                Ext.Ajax.request({
                    url : server + root + 'user/save' ,
                    params : this.getUserInfoPanel().getValues(true, false),
                    method: 'post',
                    headers: {
                        user_id: localStorage.getItem("user_id")
                    },
                    success: function ( result, request ) {
                        var data = Ext.decode(result.responseText);
                        if (data.success) {
                            var user_data = data.entries[0];

                            localStorage.setItem("email", user_data.email ? user_data.email : '');
                            localStorage.setItem("language", user_data.language ? user_data.language : '');
                            localStorage.setItem("first_name", user_data.first_name ? user_data.first_name : '');
                            localStorage.setItem("last_name", user_data.last_name ? user_data.last_name : '');
                            localStorage.setItem("country", user_data.country ? user_data.country : '');
                            localStorage.setItem("zipcode", user_data.zipcode ? user_data.zipcode : '');
                            localStorage.setItem("city", user_data.city ? user_data.city : '');
                            localStorage.setItem("street", user_data.street ? user_data.street : '');
                            localStorage.setItem("company_name", user_data.company_name ? user_data.company_name : '');
                            localStorage.setItem("phone_nr", user_data.phone_nr ? user_data.phone_nr : '');
                            localStorage.setItem("website", user_data.website ? user_data.website : '');

                            Ext.ux.SessionManager.loadLastUser();
                            Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_SAVE, data.message, Ext.emptyFn);

                            if (user_data.language != Ext.ux.LanguageManager.lang) {
                                Ext.Msg.alert ('', Ext.ux.LanguageManager.TranslationArray.MSG_DATA_SAVE,  function() {
                                    LanistaTrainer.app.fireEvent('changeLanguage', user_data.language, true);
                                });
                            }
                        } else {
                            if (data.error == 510) {
                                Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, data.message, function () {
                                    controller.getUserInfoPanel().down( 'field[name=email]' ).reset();
                                    controller.getUserInfoPanel().down( 'field[name=email]' ).focus();
                                });
                            } else {
                                Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, data.message, Ext.emptyFn);
                            }
                        }
                        controller.showCommands();
                    },
                    failure: function (result, request) {
                        Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, Ext.emptyFn);
                        controller.showCommands();
                    }
                });
            }
        }

    },

    onShowUserInfoPanel: function(callback) {
        var controller = this;
        var userInfoPanel	= controller.getUserInfoPanel();
        var mainStage	= controller.getMainStage();

        mainStage.add( userInfoPanel );

        userInfoPanel.on('hide', function(component) {
            component.destroy();
        }, controller);

        // **** 1 create the commands
        LanistaTrainer.app.setStandardButtons('closeUserInfoPanelButton');
        this.showCommands();

        // *** 2 Show the panel
        userInfoPanel.show();
        LanistaTrainer.app.fireEvent('showUserInfoHeaderUpdate');
        LanistaTrainer.app.fireEvent('showStage');

        // *** 4 Callback
        if (callback instanceof Function) callback();

        // *** 5 Load data
        controller.loadData();


    },

    onCloseUserInfoPanel: function(callback) {
        var controller = this;
        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getUserInfoPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    onShowUserInfoHeaderUpdate: function() {
        var controller = this;
            info = '<div class="lanista-user-setup lansita-header-customer-logo-not-found show-info-customer" id=userLogoNotFound"><div class="lansita-header-customer-logo" id="changeUserLogo" style="background-image: url(' + Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/img/p/'+ localStorage.getItem("user_id") + '_logo.jpg);"></div></div>' + '<div class="lanista-user-setup trainer-logo-header">' + Ext.ux.LanguageManager.TranslationArray.YOUR_LOGO + '</div>';
            info = info + '<div class="lanista-user-setup lansita-header-customer-image-not-found" id="userPhotoNotFound"><div class="lansita-header-customer-photo" id="changeUserPhoto" style="background-image: url(' + Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/img/p/'+ localStorage.getItem("user_id") + '_photo.jpg);"></div></div>' + '<div class="lanista-user-setup trainer-foto-header">' + Ext.ux.LanguageManager.TranslationArray.YOUR_PHOTO + '</div>';


        if (this.getUserInfoPanel() && !this.getUserInfoPanel().isHidden()) {
            controller.getMainViewport().down("#header").update({
               info: info,
               title: Ext.ux.LanguageManager.TranslationArray.CUST_MENU_SETUP.toUpperCase()
            });
        }
    },

    showCommands: function(callback) {

        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        //Adding bottoms into RightPanel
        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.LOGGOUT,
                itemId: 'logoutButton',
                userAlias: 'logoutButton',
                glyph: '115@Lanista Icons' //s
            })
        );

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.LICENSE,
                itemId: 'licenseButton',
                userAlias: 'licenseButton',
                glyph: '65@Lanista Icons' //A
            })
        );

    },

    loadData: function() {
        var controller = this,
            fieldset = controller.getUser_personalData();

        fieldset.setTitle (Ext.ux.LanguageManager.TranslationArray.PERSON_DATA);
        fieldset = controller.getUser_companyContacts();
        fieldset.setTitle (Ext.ux.LanguageManager.TranslationArray.ADDRESS);
        fieldset = controller.getUser_LicenseData();
        fieldset.setTitle (Ext.ux.LanguageManager.TranslationArray.LICENSE_DATA);

        controller.getUserInfoPanel().getForm().findField('email').focus();
    },

    loadCurrentUser: function(callBack) {
        Ext.ux.SessionManager.loadLastUser();

        var user = Ext.ux.SessionManager.getUser(),
            controller = this;

        if (user)
        {
            controller.getUserInfoPanel().getForm().setValues(
                {
                    email:					user.email,
                    first_name:				user.first_name,
                    last_name:				user.last_name,
                    language:				user.language,
                    company_name:			user.company_name,
                    phone_nr:				user.phone_nr,
                    website:				user.website,
                    country:				user.country,
                    zipcode:				user.zipcode,
                    street:					user.street,
                    city:					user.city,
                    user_licenseStatus:		(user.status == 1 ? Ext.ux.LanguageManager.TranslationArray.ACTIVE : Ext.ux.LanguageManager.TranslationArray.INACTIVE),
                    user_licenseValidity:	user.expiration_date,
                    id:						user.id
                }
            );
        }
        if (callBack instanceof Function) callBack();
    },

    init: function(application) {
        this.control({
            "viewport #showUserInfoPanelButton": {
                click: this.onShowUserInfoPanelButton
            },
            "viewport #closeUserInfoPanelButton": {
                click: this.onCloseUserInfoPanelButton
            },
            "viewport #cancelSettingsButton": {
                click: this.onCancelSettingsButtonClick
            },
            "viewport #saveSettingsButton": {
                click: this.onSaveSettingsButtonClick
            }
        });

        application.on({
            showUserInfoPanel: {
                fn: this.onShowUserInfoPanel,
                scope: this
            },
            closeUserInfoPanel: {
                fn: this.onCloseUserInfoPanel,
                scope: this
            },
            showUserInfoHeaderUpdate: {
                fn: this.onShowUserInfoHeaderUpdate,
                scope: this
            }
        });
    }

});
