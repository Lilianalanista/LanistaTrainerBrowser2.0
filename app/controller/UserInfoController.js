/*
 * File: app/controller/UserInfoController.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.UserInfoController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.userInfoController',

    id: 'userInfoController',

    refs: [
        {
            ref: 'mainStage',
            selector: '#mainStage'
        },
        {
            ref: 'rightCommandPanel',
            selector: '#rightCommandPanel'
        },
        {
            ref: 'leftCommandPanel',
            selector: '#leftCommandPanel'
        },
        {
            ref: 'mainViewport',
            selector: 'mainViewport'
        },
        {
            autoCreate: true,
            ref: 'userInfoPanel',
            selector: '#userInfoPanel',
            xtype: 'userInfoPanel'
        }
    ],

    onShowUserInfoPanelButton: function(button, e, eOpts) {
        LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.activePanel, function() {
            LanistaTrainer.app.fireEvent('showUserInfoPanel');
        });
    },

    onCloseUserInfoPanelButton: function(button, e, eOpts) {
        LanistaTrainer.app.fireEvent('closeUserInfoPanel', function() {
            LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.previousPanel);
        });

    },

    onShowUserInfoPanel: function(callback) {
        //Ext.getStore('UserInfoStore').load();

        var controller = this;
        var userInfoPanel	= controller.getUserInfoPanel();
        var mainStage	= controller.getMainStage();

        LanistaTrainer.app.previousPanel = LanistaTrainer.app.activePanel;
        LanistaTrainer.app.activePanel = "userInfoPanel";

        mainStage.add( userInfoPanel );

        userInfoPanel.on('hide', function(component) {
            component.destroy();
        }, controller);


        // **** 1 create the commands
        LanistaTrainer.app.setStandardButtons('closeUserInfoPanelButton');
        this.showCommands();

        // *** 2 Show the panel
        userInfoPanel.show();

        LanistaTrainer.app.fireEvent('showUserInfoHeaderUpdate');
        LanistaTrainer.app.fireEvent('showStage');

        // *** 4 Callback
        if (callback instanceof Function) callback();

        // *** 5 Load data
        controller.loadData();


    },

    onCloseUserInfoPanel: function(callback) {
        var controller = this;
        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getUserInfoPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    showCommands: function(callback) {

        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        //Adding bottoms into RightPanel
        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.LOGGOUT.toUpperCase(),
                itemId: 'logoutButton',
                userAlias: 'showUserInfoPanelButton',
                glyph: '115@Lanista Icons' //s
            })
        );

    },

    loadData: function() {

    },

    onShowUserInfoHeaderUpdate: function() {
        var controller = this;
        if (this.getUserInfoPanel() && !this.getUserInfoPanel().isHidden()) {
            controller.getMainViewport().down("#header").update({
               info: '',
               title: '-' + Ext.ux.LanguageManager.TranslationArray.CUST_MENU_SETUP.toUpperCase()
            });
        }
    },

    init: function(application) {
        this.control({
            "viewport #showUserInfoPanelButton": {
                click: this.onShowUserInfoPanelButton
            },
            "viewport #closeUserInfoPanelButton": {
                click: this.onCloseUserInfoPanelButton
            }
        });

        application.on({
            showUserInfoPanel: {
                fn: this.onShowUserInfoPanel,
                scope: this
            },
            closeUserInfoPanel: {
                fn: this.onCloseUserInfoPanel,
                scope: this
            },
            showUserInfoHeaderUpdate: {
                fn: this.onShowUserInfoHeaderUpdate,
                scope: this
            }
        });
    }

});
