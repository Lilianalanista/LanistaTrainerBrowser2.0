/*
 * File: app/controller/PlanController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.PlanController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.planController',

    id: 'PlanController',

    refs: [
        {
            ref: 'mainStage',
            selector: '#mainStage'
        },
        {
            autoCreate: true,
            ref: 'exercisesPanel',
            selector: 'exercisesPanel',
            xtype: 'exercisesPanel'
        },
        {
            ref: 'rightCommandPanel',
            selector: '#rightCommandPanel'
        },
        {
            ref: 'leftCommandPanel',
            selector: '#leftCommandPanel'
        },
        {
            ref: 'mainViewport',
            selector: 'mainViewport'
        },
        {
            autoCreate: true,
            ref: 'planPanel',
            selector: '#planPanel',
            xtype: 'planPanel'
        },
        {
            autoCreate: true,
            ref: 'planOptionsPanel',
            selector: '#planOptionsPanel',
            xtype: 'planOptionsPanel'
        },
        {
            ref: 'trainingPlanOptions',
            selector: '#trainingPlanOptions'
        },
        {
            autoCreate: true,
            ref: 'defaultPlanValuesPanel',
            selector: '#defaultPlanValuesPanel',
            xtype: 'defaultPlanValuesPanel'
        }
    ],

    onClosePlanPanelButtonClick: function(button, e, eOpts) {
        this.currentDay = null;
        this.currentExercisePosition = 0;
        this.selectionsTab = [];
        this.plan = null;
        this.planname = '';
        this.rounds_min = '';
        this.training_min = '';
        this.training_unit = '';

        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent('closePlanPanel', function() {
            if (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1] === 'DashboardPanel' ){
                LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'CustomerExercisesPanel';
                    LanistaTrainer.app.fireEvent('showCustomerExercisesPanel');
            }
            else
                LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);
        });

    },

    onAddExerciseButtonClick: function(button, e, eOpts) {
        var planDayPanel = this.getPlanPanel ().down ('tabpanel').getActiveTab();

        this.currentDay = planDayPanel;
        this.currentExercisePosition = planDayPanel.getStore ().getCount();

        if (!this.selectionsTab){
            this.selectionsTab = [];
            this.selectionsTab[1] = [];
        }
        if (!this.selectionsTab[planDayPanel.id.substring(1)])
            this.selectionsTab[planDayPanel.id.substring(1)] = [];

        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent( 'closePlanPanel', function() {
            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'ExercisesSelectionView';
            LanistaTrainer.app.fireEvent( 'showExerciseSelectionView' );
        });
    },

    onCloseExercisesSelectionViewButtonClick: function(button, e, eOpts) {

        var controller = this,
            userId = localStorage.getItem("user_id"),
            currentExercisePosition = controller.currentExercisePosition,
            currentDay = controller.currentDay.id.substring (1),
            idExercisePlan,
            planExercisesItems,
            exercisesPanel = controller.getExercisesPanel(),
            userId = localStorage.getItem("user_id"),
            ini = 4000;

        this.selectionsTab[this.currentDay.id.substring(1)] = exercisesPanel.selection;
        var selection = this.selectionsTab[this.currentDay.id.substring(1)],
            isCustom = false;
            storeExercises = Ext.getStore('ExerciseStore');

        for ( var i = 0; i < selection.length; i++ ) {
            if (selection[i][2] === 1) //Record already added in previous saving
                continue;

            isCustom = isNaN (selection[i][1].substring (0,1));
            var newPlanExercise = Ext.create('LanistaTrainer.model.PlanExercise', {
                exercise_id : isCustom ? 0 : selection [i][0],
                user_exercise_id : isCustom ? parseInt((selection [i][0]) - ini) : 0,
                plan_id: controller.plan.data.id,
                day: currentDay,
                position: (currentExercisePosition + i + 1),
                rounds_min: controller.rounds_min,
                training_unit: controller.training_unit,
                training_min: controller.training_min
            });

            newPlanExercise.setProxy(new Ext.data.proxy.Ajax({
                url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/planexercises/json',
                model: 'PlanExercise',
                noCache: false,
                reader: {
                    type: 'json',
                    root: 'entries'
                },
                writer: {
                    type: 'json',
                    root: 'records',
                    allowSingle: false
                },
                api: {
                    create: undefined,
                    read: undefined,
                    update: undefined,
                    destroy: Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/planexercises/deleteexercise'
                },
                headers: {
                    user_id: userId
                }
            }));

            if (selection[i][3] !== 'd'){ //'d' indicates that the record must be deleted
                newPlanExercise.save ();
                selection[i][2] = 1; // To mark record as saved on server
            }
        }

        setTimeout(function() {
                if ( currentDay > controller.plan.data.days ) {
                    controller.plan.set ( 'days', currentDay );

                    controller.plan.setProxy(new Ext.data.proxy.Ajax({
                        url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/plan/json',
                        model: 'Plan',
                        noCache: false,
                        reader: {
                            type: 'json',
                            root: 'entries'
                        },
                        writer: {
                            type: 'json',
                            root: 'records',
                            allowSingle: false
                        },
                        headers: {
                            user_id: userId
                        }
                    }));


                    controller.plan.save ({
                        callback: function( changedPlan, operation, success ) {
                            console.log ( changedPlan );
                            LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
                            LanistaTrainer.app.fireEvent( 'closeExercisesSelectionView', function() {
                                LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'PlanPanel';
                                LanistaTrainer.app.fireEvent( 'showPlanPanel', controller.planname);
                            });
                        },
                        scope: this
                    });
                } else {
                    LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
                    LanistaTrainer.app.fireEvent( 'closeExercisesSelectionView', function() {
                        LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'PlanPanel';
                        LanistaTrainer.app.fireEvent( 'showPlanPanel', controller.planname);
                    });
                }
                controller.favorite = undefined;
        },2500);

    },

    onSavePlanOptionsButtonClick: function(button, e, eOpts) {
        var controller = this,
            planOptionsPanel = controller.getPlanOptionsPanel(),
            fields = planOptionsPanel.getForm().getFields(),
            userId = localStorage.getItem("user_id");

        controller.plan.set ( 'name', fields.getByKey('planName').getValue() );
        controller.plan.set ( 'duration', fields.getByKey('planDuration').getValue() );
        controller.plan.set ( 'description', fields.getByKey('planDescription').getValue() );

        controller.planname = fields.getByKey('planName').getValue();

        controller.plan.setProxy(new Ext.data.proxy.Ajax({
            url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/plan/json',
            model: 'Plan',
            noCache: false,
            reader: {
                type: 'json',
                root: 'entries'
            },
            writer: {
                type: 'json',
                root: 'records',
                allowSingle: false
            },
            headers: {
                user_id: userId
            }
        }));

        controller.plan.save ({
            callback: function( changedPlan, operation, success ) {
                if (success){
                    Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_SAVE, Ext.ux.LanguageManager.TranslationArray.TRAINING_PLAN + ": " + changedPlan.data.name, function() {planOptionsPanel.getForm().findField('planName').focus();});
                    controller.getRightCommandPanel().items.each(function (item) {
                        item.hide();
                    });

                }
                else {
                    Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, Ext.emptyFn);
                    controller.showCommands();
                }

            },
            scope: this
        });
    },

    onCancelPlanOptionsButtonClick: function(button, e, eOpts) {
        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });
    },

    onClosePlanOptionsPanelButton: function(button, e, eOpts) {
        var controller = this;

        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent('closeGenericPanel', controller.getPlanOptionsPanel(), function() {
            LanistaTrainer.app.fireEvent('showPlanPanel', LanistaTrainer.app.getController ( 'PlanController' ).planname);
        });
    },

    onDefaultValuesButtonClick: function(button, e, eOpts) {
        LanistaTrainer.app.fireEvent( 'closePlanPanel', function() {
            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'DefaultPlanValuesPanel';
            LanistaTrainer.app.fireEvent( 'showDefaultPlanValuesPanel' );
        });


    },

    onCloseDefaultPlanValuesPanelClick: function(button, e, eOpts) {
        var controller = this;

        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent('closeGenericPanel', controller.getDefaultPlanValuesPanel(), function() {
            LanistaTrainer.app.fireEvent('showPlanPanel', LanistaTrainer.app.getController ( 'PlanController' ).planname);
        });
    },

    onDefaultValuesClick: function(button, e, eOpts) {
        var panelTraining = Ext.ComponentQuery.query("viewport")[0].down("#trainingPicker"),
            setObjectLanista = Ext.ComponentQuery.query("viewport")[0].down("#setObjectLanista");

        setObjectLanista.hide();
        panelTraining.hide();
        LanistaTrainer.app.fireEvent('defaultValuesChanged', '','','');



    },

    onRemovePlanExercisesButtonClick: function(button, e, eOpts) {
        var controller = LanistaTrainer.app.getController ('PlanController'),
            activeTab = controller.getPlanPanel().down('tabpanel').getActiveTab(),
            ItemModelData = activeTab.data || activeTab.recordsArray,
            selectionTab = controller.selectionsTab[activeTab.id.substring(1)],
            exercisesToDelete = controller.exercisesToDelete,
            exercisesToDeleteArray = [],
            internalItemId;

        Ext.Msg.confirm(Ext.ux.LanguageManager.TranslationArray.DELETE.toUpperCase(), Ext.ux.LanguageManager.TranslationArray.MSG_FAVORITES_REMOVE_ITEMS, function(button) {
            if (button == 'yes') {
                exercisesToDelete = new String(exercisesToDelete);
                if (exercisesToDelete.valueOf()){
                    if (exercisesToDelete.indexOf(",") > 0)
                        exercisesToDeleteArray = exercisesToDelete.split(",");
                    else
                        exercisesToDeleteArray[0] = exercisesToDelete.valueOf();
                }

                for (var i = 0; i < exercisesToDeleteArray.length; i++){
                    internalItemId = exercisesToDeleteArray[i];
                    ItemModel = ItemModelData[internalItemId];

                    controller.deleteItemView(ItemModel);
                    selectionTab.splice(internalItemId,1);
                    //activeTab.recordsArray.splice(internalItemId, 1);
                }
                activeTab.getStore().load(function(records, operation, success) {
                    controller.populateTabsExercisesByDay(records);
                });
                controller.exercisesToDelete = '';
                controller.getRightCommandPanel().getComponent('removePlanExercisesButton').hide();
            }
        });




    },

    onShowSelectionUserExercisesButtonClick: function(button, e, eOpts) {
        var store = Ext.getStore('ExerciseStore'),
            filterFunction,
            value,
            result = [];

        if (button.el.dom.classList.contains('lanista-active')){
            button.removeCls('lanista-active');
            store.removeFilter('myExercises');
        }
        else{
            button.addCls('lanista-active');

            filterFunction = new Ext.util.Filter({
                id:'myExercises',
                filterFn: function(item){
                    value = item.data.ext_id;
                    result = value.match("\\w*CUST\\w*", "gi");
                    return (result && result.length > 0);
                }
            });
            store.filters.add (filterFunction);
        }
        store.loadPage(1);
        records = store.data.items;
        if ((LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'DashboardPanel') && (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] !== 'LoginPanel')) {
            if ( (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'FavoritesPanel')) {
                favorites = LanistaTrainer.app.getController ('FavoritesController').favorites.data.objects;
                favoritesArray = favorites !== "" ? favorites.split(',') : [];

                if (favoritesArray.length > 0 ){
                    for (i = 0; i < records.length ; i++) {
                        for ( j = 0; j < favoritesArray.length; j++) {
                            if (Number(favoritesArray[j]) === Number(records[i].data.id)) {
                                break;
                            }
                        }

                        if (j !== favoritesArray.length){
                            itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);
                            Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                        }
                    }
                }
            }
            else{
                for (var i = 0; i < records.length ; i++) {
                    for(var j = 0; j < this.getExercisesPanel().selection.length; j++) {
                        if(this.getExercisesPanel().selection[j][0] === records[i].data.id) {
                            break;
                        }
                    }
                    if (j !== this.getExercisesPanel().selection.length){
                        itemNode = this.getExercisesPanel().down('#viewExercises').getNode(records[i]);
                        Ext.get(itemNode).addCls ( 'lanista-list-item-selected' );
                    }
                }
            }
        }

        LanistaTrainer.app.fireEvent('showSearchHeaderUpdate');

    },

    onClosePlanPanel: function(callback) {
        var controller = this;

        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getPlanPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    onShowPlanPanel: function(planname, callback) {
        var controller = this,
            planExercisesStore = controller.plan.planexercises(),
            exerciseController = LanistaTrainer.app.getController ( 'ExerciseController' ),
            values,
            record;

        controller.planname = planname;
        controller.getPlanPanel().down('planExercisesList').store = planExercisesStore;

        planExercisesStore.setProxy(new Ext.data.proxy.Ajax({
                url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/planexercises/json',
                model: 'PlanExercise',
                noCache: false,
                reader: {
                    type: 'json',
                    root: 'entries'
                },
                writer: {
                    type: 'json',
                    root: 'records'
                },
                headers: {
                    user_id: localStorage.getItem("user_id")
                }
            }));

        for (var i = 0; i < planExercisesStore.filters.length; i++)
        {
            if (planExercisesStore.filters.items[i].property  == 'day')
                planExercisesStore.filters.removeAt(i);
        }

        planExercisesStore.sort({
                                        property : 'position',
                                        direction: 'ASC'
                               });

        planExercisesStore.load(function(records, operation, success) {
            var planPanel	= controller.getPlanPanel(),
                mainStage	= controller.getMainStage(),
                recordsArray = [],
                tabActiveId = controller.currentDay || controller.getPlanPanel ().down ('tabpanel').child('#d1');

            planPanel.controller = controller;
            controller.createDayPanels ( controller.plan.data.days );

            mainStage.add( planPanel );
            planPanel.on('hide', function(component) {
                component.destroy();
            }, controller
                        );
            // **** 1 create the commands
            controller.showCommands();
            LanistaTrainer.app.setStandardButtons('closePlanPanelButton');

            // *** 2 Show the panel
            planPanel.show();

            LanistaTrainer.app.fireEvent('showPlanHeaderUpdate');
            controller.populateTabsExercisesByDay(records);

            if (!controller.rounds_min && !controller.training_min){
                values = [{rounds_min: 3, training_min: 12, training_unit: 0}];
                record = tabActiveId.recordsArray && tabActiveId.recordsArray[0] ? tabActiveId.recordsArray[0] : values[0];
                controller.rounds_min = record.rounds_min;
                controller.training_min = record.training_min;
                controller.training_unit = record.training_unit;
            }

            planPanel.down ('tabpanel').setActiveTab(tabActiveId);
            planPanel.down ('tabpanel').getActiveTab().getEl().setHeight(planPanel.down ('tabpanel').getActiveTab().el.dom.clientHeight - 45);

            LanistaTrainer.app.fireEvent('showStage');

            // *** 4 Callback
            if (callback instanceof Function) callback();

         });

    },

    onShowPlanHeaderUpdate: function() {
        var controller = this,
            record = LanistaTrainer.app.currentCustomer,
            divLogo = '',
            divInfoCustomer = '',
            planPanel	= controller.getPlanPanel(),
            title = '';

        if (!record){
            title = "<div class='lanista-header-template-name'>" + Ext.ux.LanguageManager.TranslationArray.TEMPLATE_NAME + "</div>";
            divLogo = "<div class='lanista-header-template'><div class='lanista-header-plan-name'>" + controller.planname +
                      "</div> <div class='lanista-header-plan-duration'>"  + Ext.ux.LanguageManager.TranslationArray.FORM_PLAN_TIME  + ': &nbsp;' +
                                                                       controller.plan.data.duration + ' ' +
                                                                       Ext.ux.LanguageManager.TranslationArray.WEEKS + "</div></div>";
        }
        else{
            title = "<div class='lanista-header-plan-name'>" + controller.planname +
                    "</div> <div class='lanista-header-plan-duration'>"  + Ext.ux.LanguageManager.TranslationArray.FORM_PLAN_TIME  + ': &nbsp;' +
                                                                       controller.plan.data.duration + ' ' +
                                                                       Ext.ux.LanguageManager.TranslationArray.WEEKS + "</div>";
            divLogo = '<div class="lansita-header-customer-image-not-found"><div class="lansita-header-customer-logo" style="background-image: url(' + Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/img/p/'+ record.data.id + '_photo.jpg);"></div></div>';
            divInfoCustomer = '<div class="lansita-header-customer-name"> <span class="last-name">' + record.data.last_name + '</span><br> <span class="first-name">' + record.data.first_name +'</span></div>';
        }

        planPanel.down ('#planHeader').update(controller.plan.data);
        if (!controller.plan.data.description)
            Ext.get('planHeaderDescription').setHTML('No description available');

        controller.getMainViewport().down("#header").update({
            info: divLogo + divInfoCustomer,
            title: title
        });
    },

    onShowExerciseSelectionView: function(callback, userExercises) {
        var store = Ext.getStore( 'ExerciseStore' ),
            self = this,
            mainStage			= self.getMainStage(),
            viewportXCapacity	= Math.floor(mainStage.getEl().getWidth(true)/187);
            viewportCapacity	= Math.floor((mainStage.getEl().getHeight(true)-47)/177) * viewportXCapacity;
            exercisesPanel		= self.getExercisesPanel();

        store.clearFilter();
        if ( userExercises === true )
        {
            filterFunction = new Ext.util.Filter({
                id:'myExercises',
                filterFn: function(item){
                    value = item.data.ext_id;
                    result = value.match("\\w*CUST\\w*", "gi");
                    return (result && result.length > 0);
                }
            });
            store.filters.add (filterFunction);
        }

        store.pageSize = viewportCapacity;
        store.clearFilter(true);
        if ( this.favorite )
        {
            store.filter( 'ext_id', '"' + this.favorite.data.objects.replace(/,/g,'","') + '"' );
        }
        store.sort('name_' + Ext.ux.LanguageManager.lang, 'ASC');

        exercisesPanel.selection = this.selectionsTab[this.currentDay.id.substring(1)];
        mainStage.add(exercisesPanel);

        this.showCommandsExercises();
        exercisesPanel.on('hide', function(component) {
            component.destroy();
        }, self);

        exercisesPanel.headerInfo = '<div class="exercises-header">' + Ext.ux.LanguageManager.TranslationArray.TRAINING_PLAN + ': ' + this.plan.data.name + '</div>';
        exercisesPanel.headerTitle = Ext.ux.LanguageManager.TranslationArray.BUTTON_ADD_EXERCISES;
        exercisesPanel.show();

        LanistaTrainer.app.fireEvent('showSearchHeaderUpdate');
        LanistaTrainer.app.fireEvent('showStage');

        if ( callback instanceof Function ) callback();
    },

    onShowPlanOptionsPanel: function(callback) {
        var controller = this,
            mainStage			= controller.getMainStage(),
            planOptionsPanel	= controller.getPlanOptionsPanel(),
            plan				= controller.plan,
            record				= LanistaTrainer.app.currentCustomer,
            fieldset			= controller.getTrainingPlanOptions();

        mainStage.add(planOptionsPanel);

        LanistaTrainer.app.setStandardButtons('closePlanOptionsPanel');

        planOptionsPanel.on('hide', function(component) {
            component.destroy();
        }, self);

        if (record)
            planOptionsPanel.headerInfo = '<div class="lansita-header-customer-image-not-found"><div class="lansita-header-customer-photo" id="changeCustomerPhoto" style="background-image: url(' + Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/img/p/'+ record.data.id + '_photo.jpg);"></div></div>';

        planOptionsPanel.headerTitle = plan.data.name;

        fieldset.setTitle (Ext.ux.LanguageManager.TranslationArray.TRAINING_PLAN);
        planOptionsPanel.getForm().setValues(
            {
                name:					plan.data.name,
                duration:				plan.data.duration,
                description:			plan.data.description
            }
        );

        planOptionsPanel.show();

        LanistaTrainer.app.fireEvent('showStage');

        if ( callback instanceof Function ) callback();

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });
        planOptionsPanel.getForm().findField('planName').focus();
    },

    onShowDefaultPlanValuesPanel: function(callback) {
        var controller = this,
            mainStage				= controller.getMainStage(),
            defaultPlanValuesPanel	= controller.getDefaultPlanValuesPanel(),
            plan					= controller.getPlanPanel(),
            record,
            values = [],
            trainingPicker = Ext.create('LanistaTrainer.view.TrainingPicker', {}),
            SetObjectLanista = Ext.create('LanistaTrainer.view.SetObjectLanista', {}),
            tabActive,
            LeftPanel = Ext.ComponentQuery.query("viewport")[0].down("#leftCommandPanel");

        mainStage.add(defaultPlanValuesPanel);

        LeftPanel.items.each(function (item) {
            item.hide();
        });
        LeftPanel.add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_CANCEL,
                itemId: 'closeDefaultValuesButton',
                glyph: '117@Lanista Icons', //u
                cls: [
                    'lanista-command-button',
                    'lanista-command-button-red',
                    'lanista-command-button-cancel-defaultvalues'
                ]
            })
        );

        defaultPlanValuesPanel.on('hide', function(component) {
            component.destroy();
        }, self);

        record = [{rounds_min: controller.rounds_min, training: controller.training_min, training_unit: controller.training_unit}];
        defaultPlanValuesPanel.update(record[0]);

        defaultPlanValuesPanel.show();
        LanistaTrainer.app.fireEvent('showStage');

        controller.getMainViewport().down("#header").update({
            info: '',
            title: Ext.ux.LanguageManager.TranslationArray.EXERCISE
        });

        controller.getMainViewport().add(trainingPicker);
        controller.getMainViewport().add(SetObjectLanista);

        trainingPicker.show ();

        SetObjectLanista.setValue(record[0].rounds_min);
        trainingPicker.setRecord(record[0]);

        if ( callback instanceof Function ) callback();





    },

    onCreatePlan: function(planname) {
        var userId = localStorage.getItem("user_id"),
            user = Ext.ux.SessionManager.getUser(),
            currentClient = LanistaTrainer.app.currentCustomer,
            newPlan;

        newPlan = Ext.create('LanistaTrainer.model.Plan', {
            name : ( planname && planname.length > 1 ) ? planname : Ext.ux.LanguageManager.TranslationArray.PLAN_NAME_DEFAULT,
            template: currentClient ? 0 : 1,
            customer_id: currentClient ? currentClient.data.id : 0,
            trainer_id: userId,
            creator_name: user.first_name + ' ' + user.last_name,
            duration: 12
        });

        newPlan.setProxy(new Ext.data.proxy.Ajax({
            url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/plan/json',
            model: 'Plan',
            noCache: false,
            reader: {
                type: 'json',
                root: 'entries'
            },
            writer: {
                type: 'json',
                root: 'records',
                allowSingle: false
            },
            headers: {
                user_id: userId
            }
        }));

        newPlan.save (
            {
                callback: function ( record ){
                    LanistaTrainer.app.getController ( 'PlanController' ).plan = record;
                    LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'PlanPanel';
                    LanistaTrainer.app.fireEvent( 'showPlanPanel', planname);
                }
            });
    },

    onCloseExercisesSelectionView: function(callback) {
        var controller = this,
            exercisesPanel = controller.getExercisesPanel();

        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            exercisesPanel.hide();
            if (callback instanceof Function) callback();
        });
    },

    onCloseGenericPanel: function(panel, callback) {
        var controller = this;

        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            panel.hide();
            if (callback instanceof Function) callback();
        });
    },

    onDefaultValuesChanged: function(defaultValues) {
        var controller = this,
            planPanel = controller.getPlanPanel();

        if (defaultValues){
            controller.rounds_min = defaultValues[0];
            controller.training_min = defaultValues[1];
            controller.training_unit = defaultValues[2];
        }

        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent('closeGenericPanel', controller.getDefaultPlanValuesPanel(), function() {
            LanistaTrainer.app.fireEvent('showPlanPanel', LanistaTrainer.app.getController ( 'PlanController' ).planname);
        });
    },

    showCommands: function(callback) {
        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_ADD_EXERCISES,
                itemId: 'addExerciseButton',
                glyph: '108@Lanista Icons' //l
            })
        );

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_DEFAULT_EXER_CONF,
                itemId: 'defaultValuesButton',
                glyph: '74@Lanista Icons' //J
            })
        );

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.SHARE_PLAN,
                itemId: 'sharePlanButton',
                menu: controller.setPlanOptions(),
                menuButtonAlign: 'right',
                style: 'float: left;',
                glyph: '67@Lanista Icons' //C
            })
        );

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.CHANGE_VALUE + ' / ' + Ext.ux.LanguageManager.TranslationArray.DELETE,
                itemId: 'changeDeleteButton',
                menu: controller.changeDeletePlan(),
                menuButtonAlign: 'right',
                style: 'float: left;',
                glyph: '73@Lanista Icons' //I
            })
        );

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.DELETE,
                itemId: 'removePlanExercisesButton',
                cls: [
                    'lanista-command-button',
                    'lanista-command-button-red'
                ],
                hidden: true,
                glyph: '117@Lanista Icons' //u
            })
        );




    },

    createDayPanels: function(days) {
        var tabPanel = this.getPlanPanel ().down ( 'tabpanel' ),
            controller = this;

        var from = 2,
            to = days,
            newList = null;

        for (from=2; from<=to; from++)
        {
            if (tabPanel.items.getByKey('d'+from))
                continue;
            tabPanel.insert(tabPanel.items.getCount() -1 , {
                            xtype: 'planExercisesList',
                            id: 'd'+from,
                            title: Ext.ux.LanguageManager.TranslationArray.DAY + ' ' + from,
                            store: controller.plan.planexercises()
        });
        }
    },

    populateTabsExercisesByDay: function(records, callback) {
        var controller = this,
            tabPanel = controller.getPlanPanel().down('tabpanel'),
            recordsArray = [],
            results,
            tab,
            ini = 4000;

        for ( var i = 1; i < tabPanel.items.length; i++ ) {
            results = Ext.Array.filter(records, function(item) {
                return item.data.day === i;
            });
            tab = tabPanel.child('#d' + i);
            for ( var j = 0; j < results.length; j++ ) {
                recordsArray.push(results[j].data);
            }
            if (recordsArray) {
                if (tab){
                    tab.update(recordsArray);
                    tab.recordsArray = recordsArray;
                }
            }
            recordsArray = [];
        }

        //This is for plans records that has been charged from a previously plan saved
        if (records.length > 0 && ( (!LanistaTrainer.app.getController ( 'PlanController' ).selectionsTab) || (LanistaTrainer.app.getController ( 'PlanController' ).selectionsTab.length === 0))) {
            var selectionsTab = [],
                itemTab = [];

                selectionsTab[0] = [];
                for ( i = 1; i < tabPanel.items.length; i++ ) {
                    //selectionsTab[i] = [];
                    tab = tabPanel.child('#d' + i);
                    if (tab.recordsArray){
                        selection = [];
                        for ( j = 0; j < tab.recordsArray.length; j++ ) {
                            itemTab = [];
                            itemTab[0] = tab.recordsArray[j].exercise_id !== 0 ? tab.recordsArray[j].exercise_id : (parseInt(tab.recordsArray[j].user_exercise_id) + ini);
                            itemTab[1] = tab.recordsArray[j].exercise_ext_id;
                            itemTab[2] = 1;
                            selection.push(itemTab);
                        }
                        selectionsTab.push(selection);
                    }
                }
            controller.selectionsTab = selectionsTab;
            controller.currentDay = controller.getPlanPanel ().down ('tabpanel').getActiveTab();
        }

    },

    setHeader: function() {
        LanistaTrainer.app.fireEvent('showPlanHeaderUpdate');
    },

    setPlanOptions: function() {
        var controller = this,
            newOption,
            user = Ext.ux.SessionManager.getUser();

        planOptions = new Ext.menu.Menu(
            {
                defaults: {
                    height: '50px',
                    width: '220px'
                }
            }
        );

        if (user.role === '2' ){
            newOption = {text:	Ext.ux.LanguageManager.TranslationArray.BUTTON_ASSIGN_PLAN.toUpperCase(),
                         handler: function () {
                             LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
                             LanistaTrainer.app.fireEvent( 'closePlanPanel', function() {
                                 LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'CustomersPanel';
                                 LanistaTrainer.app.fireEvent( 'showCustomersPanel' );
                             });
                         }
                        };
            planOptions.add(newOption);

            if (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === "CustomerExercisesPanel"){
                newOption = {text:  Ext.ux.LanguageManager.TranslationArray.BUTTON_SAVE.toUpperCase() + ' ' +
                                    Ext.ux.LanguageManager.TranslationArray.SAVE_AS_TEMPLATE.toUpperCase(),
                                    handler: function () {
                                                LanistaTrainer.app.getController('PlanController').clonePlan('');
                                            }
                            };
            }
            planOptions.add(newOption);

        }

        newOption = {text:  Ext.ux.LanguageManager.TranslationArray.SEND_EMAIL.toUpperCase(),
                     handler: function () {
                         Ext.Ajax.request({
                             url: Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + "/tpmanager/plan/sendmail",
                             method: 'post',
                             params: { plan_id: controller.plan.data.id },
                             headers: { user_id: localStorage.getItem("user_id") },
                             failure : function(response){
                                 data = Ext.decode(response.responseText);
                                 console.log ( data );
                                 Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_PROBLEM, '', Ext.emptyFn );
                             },
                             success: function(response, opts) {
                                 data = Ext.decode ( response.responseText);
                                 if (data.success !== true)
                                 {
                                     Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_PROBLEM, data.message, Ext.emptyFn);
                                 } else {
                                     Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_PROBLEM, data.message, Ext.emptyFn);
                                     Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_SENT, '', Ext.emptyFn );
                                 }
                             }
                         });
                     }
                    };
        if (user.role === '2' )
            planOptions.insert(1,newOption);
        else
            planOptions.add(newOption);


        newOption = {text:  Ext.ux.LanguageManager.TranslationArray.GENERATE_PDF.toUpperCase(),
                            handler: function () {
                                        window.open( Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() +"/tpmanager/plan/getpdf?plan_id=" + controller.plan.data.id );
                            }
                    };
        if (user.role === '2' )
            planOptions.insert(2,newOption);
        else
            planOptions.add(newOption);

        return planOptions;



    },

    changeDeletePlan: function() {
        var controller = this;

        planOptions = new Ext.menu.Menu(
            {
                defaults: {
                    height: '50px',
                    width: '220px'
                },
                items:
                [
                    {text:	Ext.ux.LanguageManager.TranslationArray.CHANGE_PLAN.toUpperCase(),
                            handler: function () {
                                LanistaTrainer.app.fireEvent( 'closePlanPanel', function() {
                                    LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'PlanOptionsPanel';
                                    LanistaTrainer.app.fireEvent( 'showPlanOptionsPanel' );
                                });
                            }},
                    {text:	Ext.ux.LanguageManager.TranslationArray.DELETE_PLAN.toUpperCase(),
                            handler: function () {
                                record = LanistaTrainer.app.getController ( 'PlanController' ).plan;
                                Ext.Msg.confirm(Ext.ux.LanguageManager.TranslationArray.MSG_DELETE_USER, record.data.name, function(button) {
                                    if (button == 'yes') {
                                        customerExerPanel = LanistaTrainer.app.getController ('CustomerExercisesController').getCustomerExercisesPanel();
                                        customerExerPanel.deletePlan(record.data);
                                        controller.getLeftCommandPanel().down('#closePlanPanelButton').fireEvent('click');
                                    }
                                });
                            }
                    }
                ]
            }
        );


        return planOptions;

    },

    loadData: function() {

    },

    clonePlan: function(record) {
        Ext.Ajax.request({
            url: Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + "/tpmanager/plan/clone",
            method: 'post',
            params: { plan_id: LanistaTrainer.app.getController('PlanController').plan.data.id,
                     user_id: record ? record.data.id : 0},
            headers: { user_id: localStorage.getItem("user_id") },
            failure : function(response){
                data = Ext.decode(response.responseText);
                Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_APPSTORE_ACTIVATION_ERROR_2, '', Ext.emptyFn );
            },
            success: function(response, opts) {
                data = Ext.decode ( response.responseText);
                if (data.success === true)
                {
                    Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_DATA_SAVE, data.message,
                                  function(){
                                      LanistaTrainer.app.currentCustomer = record ? record : '';
                                      if (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1] === 'PlanPanel'){
                                          LanistaTrainer.app.panels = [];
                                          LanistaTrainer.app.panels = ['DashboardPanel', 'TemplatesPanel'];
                                          LanistaTrainer.app.fireEvent("closePlanPanel", function() {
                                              LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'PlanPanel';
                                              LanistaTrainer.app.fireEvent('showPlanPanel', LanistaTrainer.app.getController('PlanController').planname);
                                          });
                                      }
                                      else{
                                          LanistaTrainer.app.panels = [];
                                          LanistaTrainer.app.panels = ['DashboardPanel', 'CustomersPanel','CustomerExercisesPanel'];
                                          LanistaTrainer.app.fireEvent("closeCustomersPanel", function() {
                                              LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'PlanPanel';
                                              LanistaTrainer.app.fireEvent('showPlanPanel', LanistaTrainer.app.getController('PlanController').planname);
                                          });
                                      }
                                  });
                } else {
                    Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_APPSTORE_ACTIVATION_ERROR_2, data.message, Ext.emptyFn);
                }
            }
        });
    },

    deleteItemView: function(data) {
        var PlanExercise = Ext.create('LanistaTrainer.model.PlanExercise'),
            userId = localStorage.getItem("user_id");

        PlanExercise.data = data;
        PlanExercise.phantom = false;
        PlanExercise.setProxy(new Ext.data.proxy.Ajax({
            url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/planexercises/json',
            model: 'PlanExercise',
            noCache: false,
            api: {
                create: undefined,
                read: undefined,
                update: undefined,
                destroy: Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/planexercises/deleteexercise'
            },
            extraParams: {
                exercise_id: PlanExercise.data.id
            },
            headers: {
                user_id: userId
            }
        }));

        PlanExercise.destroy ({
            action: 'destroy'
        });
    },

    showCommandsExercises: function() {
        var controller = this,
            menuFilters = LanistaTrainer.app.getController('ExercisesController').showExercisesMenu(),
            myExercies = false,
            store = Ext.getStore( 'ExerciseStore' );

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        controller.getLeftCommandPanel().items.each(function (item) {
            item.hide();
        });

        for (var i = 0; i < store.filters.length; i++)
        {
            if (store.filters.items[i].id  == 'myExercises'){
                myExercies = true;
                break;
            }

        }

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.SEARCH,
                //itemId: 'showExerciseFilterButton',
                itemId: 'searchButton',
                menu: menuFilters,
                menuButtonAlign: 'right',
                glyph: '90@Lanista Icons' //Z
            })
        );

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_OWN_EXERCISES,
                itemId: 'showSelectionUserExercisesButton',
                glyph: '97@Lanista Icons' //a
            })
        );
        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_FAVORITES,
                itemId: 'favoritesCustomersButton',
                menu: LanistaTrainer.app.getController('ExercisesController').findFavoritesExercises(),
                menuButtonAlign: 'right',
                glyph: '122@Lanista Icons' //z
            })
        );
        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_ADD_EXERCISES,
                itemId: 'addPlanExercisesButton',
                hidden: true,
                glyph: '108@Lanista Icons' //l
            })
        );


        this.getLeftCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_ADD_EXERCISES,
                itemId: 'closeExercisesSelectionView',
                glyph: '98@Lanista Icons', //b
                cls: [
                    'lanista-command-button',
                    'lanista-command-button-green'
                ]
            })
        );
        this.getLeftCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.TOOLS,
                itemId: 'toolsButton',
                menu: tools,
                menuButtonAlign: 'left',
                glyph: '102@Lanista Icons', //f
                cls: [
                    'lanista-command-button',
                    'lanista-command-button-violet'
                ]
            })
        );
        this.getLeftCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_HELP,
                itemId: 'helpButton',
                glyph: '104@Lanista Icons', //h
                cls: [
                    'lanista-command-button',
                    'lanista-command-button-violet'
                ]
            })
        );
    },

    init: function(application) {
        this.control({
            "viewport #closePlanPanelButton": {
                click: this.onClosePlanPanelButtonClick
            },
            "viewport #addExerciseButton": {
                click: this.onAddExerciseButtonClick
            },
            "viewport #closeExercisesSelectionView": {
                click: this.onCloseExercisesSelectionViewButtonClick
            },
            "viewport #savePlanOptionsButton": {
                click: this.onSavePlanOptionsButtonClick
            },
            "viewport #cancelPlanOptionsButton": {
                click: this.onCancelPlanOptionsButtonClick
            },
            "viewport #closePlanOptionsPanel": {
                click: this.onClosePlanOptionsPanelButton
            },
            "viewport #defaultValuesButton": {
                click: this.onDefaultValuesButtonClick
            },
            "viewport #closeDefaultPlanValuesPanel": {
                click: this.onCloseDefaultPlanValuesPanelClick
            },
            "viewport #closeDefaultValuesButton": {
                click: this.onDefaultValuesClick
            },
            "viewport #removePlanExercisesButton": {
                click: this.onRemovePlanExercisesButtonClick
            },
            "viewport #showSelectionUserExercisesButton": {
                click: this.onShowSelectionUserExercisesButtonClick
            }
        });

        application.on({
            closePlanPanel: {
                fn: this.onClosePlanPanel,
                scope: this
            },
            showPlanPanel: {
                fn: this.onShowPlanPanel,
                scope: this
            },
            showPlanHeaderUpdate: {
                fn: this.onShowPlanHeaderUpdate,
                scope: this
            },
            showExerciseSelectionView: {
                fn: this.onShowExerciseSelectionView,
                scope: this
            },
            showPlanOptionsPanel: {
                fn: this.onShowPlanOptionsPanel,
                scope: this
            },
            showDefaultPlanValuesPanel: {
                fn: this.onShowDefaultPlanValuesPanel,
                scope: this
            },
            createPlan: {
                fn: this.onCreatePlan,
                scope: this
            },
            closeExercisesSelectionView: {
                fn: this.onCloseExercisesSelectionView,
                scope: this
            },
            closeGenericPanel: {
                fn: this.onCloseGenericPanel,
                scope: this
            },
            defaultValuesChanged: {
                fn: this.onDefaultValuesChanged,
                scope: this
            }
        });
    }

});
