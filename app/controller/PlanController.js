/*
 * File: app/controller/PlanController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.PlanController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.planController',

    id: 'PlanController',

    refs: [
        {
            ref: 'mainStage',
            selector: '#mainStage'
        },
        {
            ref: 'rightCommandPanel',
            selector: '#rightCommandPanel'
        },
        {
            ref: 'leftCommandPanel',
            selector: '#leftCommandPanel'
        },
        {
            ref: 'mainViewport',
            selector: 'mainViewport'
        },
        {
            autoCreate: true,
            ref: 'planPanel',
            selector: '#planPanel',
            xtype: 'planPanel'
        },
        {
            autoCreate: true,
            ref: 'planEditPanel',
            selector: '#planEditPanel',
            xtype: 'planEditPanel'
        }
    ],

    onClosePlanPanel: function(callback) {
        var controller = this;
        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getPlanPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    onShowPlanPanel: function(backAction, callback) {
        var controller = this,
            planPanel	= controller.getPlanPanel(),
            mainStage	= controller.getMainStage();

        mainStage.add( planPanel );

        planPanel.on('hide', function(component) {
            component.destroy();
        }, controller);

        // **** 1 create the commands
        LanistaTrainer.app.setStandardButtons();
        this.showCommands();

        // *** 2 Show the panel
        LanistaTrainer.app.fireEvent('showStage');

        // *** 4 Callback
        if (callback instanceof Function) callback();

        // *** 5 Load data
        controller.loadData();
    },

    onShowPlanHeaderUpdate: function() {

        var controller = this,
            user = Ext.ux.SessionManager.getUser(),
            divLogo = '<div class="lansita-header-customer-image-not-found show-info-customer" id="showPersonalDataButton"><div class="lansita-header-customer-logo show-info-customer" id="showPersonalDataButton" style="background-image: url(' + Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/img/p/'+ localStorage.getItem( "user_id" ) + '_photo.jpg);"></div></div>';
            divInfoCustomer = '<div class="lansita-header-customer-name"> <span class="last-name">' + user.last_name + '</span><br> <span class="first-name">' + user.first_name +'</span></div>';

        controller.getMainViewport().down("#header").update({
            info: divLogo + divInfoCustomer,
            title: '-' + Ext.ux.LanguageManager.TranslationArray.DASHBOARD.toUpperCase()
        });


    },

    onCreatePlan: function(planname) {
        var userId = localStorage.getItem("user_id"),
            newPlan = Ext.create('LanistaTrainer.model.Plan', {
                name : ( planname && planname.length > 1 )? planname : Ext.ux.LanguageManager.TranslationArray.PLAN_NAME_DEFAULT,
                template: 0,
                customer_id: LanistaTrainer.app.currentCustomer.data.id
            });

        newPlan.setProxy(new Ext.data.proxy.Ajax({
            url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/plan/json',
            model: 'Protocoll',
            noCache: false,
            reader: {
                type: 'json',
                root: 'entries'
            },
            writer: {
                type: 'json',
                root: 'records'
            },
            headers: {
                user_id: userId
            }
        }));

        newPlan.save (
            {
                callback: function ( record ){
                    LanistaTrainer.app.getController ( 'PlanController' ).plan = record;
                    LanistaTrainer.app.fireEvent( 'showPlanPanel', 'showCustomerExercisesPanel' );
                }
            });


    },

    showCommands: function(callback) {

        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_ADD_EXERCISES,
                itemId: 'showAddExerciseButton',
                userAlias: 'customerButton',
                glyph: '108@Lanista Icons' //l
            })
        );

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_PLAN_OPTIONS,
                itemId: 'showPlanOptionsButton',
                style: 'float: left;',
                glyph: '120@Lanista Icons' //x
            })
        );




    },

    loadData: function() {

    },

    init: function(application) {
        application.on({
            closePlanPanel: {
                fn: this.onClosePlanPanel,
                scope: this
            },
            showPlanPanel: {
                fn: this.onShowPlanPanel,
                scope: this
            },
            showPlanHeaderUpdate: {
                fn: this.onShowPlanHeaderUpdate,
                scope: this
            },
            createPlan: {
                fn: this.onCreatePlan,
                scope: this
            }
        });
    }

});
