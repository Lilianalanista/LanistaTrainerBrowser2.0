/*
 * File: app/controller/PlanController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.PlanController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.planController',

    id: 'PlanController',

    refs: [
        {
            ref: 'mainStage',
            selector: '#mainStage'
        },
        {
            autoCreate: true,
            ref: 'exercisesPanel',
            selector: 'exercisesPanel',
            xtype: 'exercisesPanel'
        },
        {
            ref: 'rightCommandPanel',
            selector: '#rightCommandPanel'
        },
        {
            ref: 'leftCommandPanel',
            selector: '#leftCommandPanel'
        },
        {
            ref: 'mainViewport',
            selector: 'mainViewport'
        },
        {
            autoCreate: true,
            ref: 'planPanel',
            selector: '#planPanel',
            xtype: 'planPanel'
        },
        {
            autoCreate: true,
            ref: 'planOptionsPanel',
            selector: '#planOptionsPanel',
            xtype: 'planOptionsPanel'
        },
        {
            ref: 'trainingPlanOptions',
            selector: '#trainingPlanOptions'
        }
    ],

    onClosePlanPanelButtonClick: function(button, e, eOpts) {
        this.currentDay = null;
        this.currentExercisePosition = 0;
        this.selectionsTab = [];
        this.plan = null;
        this.planname = '';

        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent('closePlanPanel', function() {
            LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);
        });

    },

    onAddExerciseButtonClick: function(button, e, eOpts) {
        var planDayPanel = this.getPlanPanel ().down ('tabpanel').getActiveTab();

        this.currentDay = planDayPanel;
        this.currentExercisePosition = planDayPanel.getStore ().getCount();

        if (!this.selectionsTab){
            this.selectionsTab = [];
            this.selectionsTab[1] = [];
        }
        if (!this.selectionsTab[planDayPanel.id.substring(1)])
            this.selectionsTab[planDayPanel.id.substring(1)] = [];

        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent( 'closePlanPanel', function() {
            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'ExerciseSelectionView';
            LanistaTrainer.app.fireEvent( 'showExerciseSelectionView' );
        });
    },

    onCloseExercisesSelectionViewButtonClick: function(button, e, eOpts) {

        var controller = this,
            userId = localStorage.getItem("user_id"),
            currentExercisePosition = controller.currentExercisePosition,
            currentDay = controller.currentDay.id.substring (1),
            idExercisePlan,
            planExercisesItems,
            exercisesPanel = controller.getExercisesPanel(),
            userId = localStorage.getItem("user_id");

        this.selectionsTab[this.currentDay.id.substring(1)] = exercisesPanel.selection;
        var selection = this.selectionsTab[this.currentDay.id.substring(1)],
            isCustom = false;
            storeExercises = Ext.getStore('ExerciseStore');

        for ( var i = 0; i < selection.length; i++ ) {
            if (selection[i][2] === 1) //Record has just saved in previous added
                continue;

            isCustom = isNaN (selection[i][1].substring (0,1));
            var newPlanExercise = Ext.create('LanistaTrainer.model.PlanExercise', {
                exercise_id : isCustom ? 0 : selection [i][0],
                user_exercise_id : isCustom ? selection [i][0] : 0,
                plan_id: controller.plan.data.id,
                day: currentDay,
                position: (currentExercisePosition + i + 1)
            });

            newPlanExercise.setProxy(new Ext.data.proxy.Ajax({
                url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/planexercises/json',
                model: 'PlanExercise',
                noCache: false,
                reader: {
                    type: 'json',
                    root: 'entries'
                },
                writer: {
                    type: 'json',
                    root: 'records',
                    allowSingle: false
                },
                api: {
                    create: undefined,
                    read: undefined,
                    update: undefined,
                    destroy: Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/planexercises/deleteexercise'
                },
                headers: {
                    user_id: userId
                }
            }));

            if (selection[i][3] !== 'd'){ //'d' indicates that the record must be deleted
                newPlanExercise.save ();
                selection[i][2] = 1; // To mark record as saved on server
            }
        }

        setTimeout(function() {
                if ( currentDay > controller.plan.data.days ) {
                    controller.plan.set ( 'days', currentDay );

                    controller.plan.setProxy(new Ext.data.proxy.Ajax({
                        url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/plan/json',
                        model: 'Plan',
                        noCache: false,
                        reader: {
                            type: 'json',
                            root: 'entries'
                        },
                        writer: {
                            type: 'json',
                            root: 'records',
                            allowSingle: false
                        },
                        headers: {
                            user_id: userId
                        }
                    }));


                    controller.plan.save ({
                        callback: function( changedPlan, operation, success ) {
                            console.log ( changedPlan );
                            LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
                            LanistaTrainer.app.fireEvent( 'closeExercisesSelectionView', function() {
                                LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'PlanPanel';
                                LanistaTrainer.app.fireEvent( 'showPlanPanel', controller.planname);
                            });
                        },
                        scope: this
                    });
                } else {
                    LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
                    LanistaTrainer.app.fireEvent( 'closeExercisesSelectionView', function() {
                        LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'PlanPanel';
                        LanistaTrainer.app.fireEvent( 'showPlanPanel', controller.planname);
                    });
                }
                controller.favorite = undefined;
        },2500);

    },

    onSavePlanOptionsButtonClick: function(button, e, eOpts) {
        var controller = this,
            planOptionsPanel = controller.getPlanOptionsPanel(),
            fields = planOptionsPanel.getForm().getFields(),
            userId = localStorage.getItem("user_id");

        controller.plan.set ( 'name', fields.getByKey('planName').getValue() );
        controller.plan.set ( 'duration', fields.getByKey('planDuration').getValue() );
        controller.plan.set ( 'description', fields.getByKey('planDescription').getValue() );

        controller.planname = fields.getByKey('planName').getValue();

        controller.plan.setProxy(new Ext.data.proxy.Ajax({
            url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/plan/json',
            model: 'Plan',
            noCache: false,
            reader: {
                type: 'json',
                root: 'entries'
            },
            writer: {
                type: 'json',
                root: 'records',
                allowSingle: false
            },
            headers: {
                user_id: userId
            }
        }));

        controller.plan.save ({
            callback: function( changedPlan, operation, success ) {
                if (success){
                    Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_SAVE, Ext.ux.LanguageManager.TranslationArray.TRAINING_PLAN + ": " + changedPlan.data.name, function() {planOptionsPanel.getForm().findField('planName').focus();});
                    controller.getRightCommandPanel().items.each(function (item) {
                        item.hide();
                    });

                }
                else {
                    Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, Ext.emptyFn);
                    controller.showCommands();
                }

            },
            scope: this
        });
    },

    onCancelPlanOptionsButtonClick: function(button, e, eOpts) {
        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });
    },

    onClosePlanOptionsPanelButton: function(button, e, eOpts) {
        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent('closePlanOptionsPanel', function() {
            LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);
        });
    },

    onClosePlanPanel: function(callback) {
        var controller = this;

        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getPlanPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    onShowPlanPanel: function(planname, callback) {
        var controller = this,
            planExercisesStore = controller.plan.planexercises(),
            exerciseController = LanistaTrainer.app.getController ( 'ExerciseController' );

        controller.planname = planname;
        controller.getPlanPanel().down('planExercisesList').store = planExercisesStore;
        planExercisesStore.setProxy(new Ext.data.proxy.Ajax({
                url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/planexercises/json',
                model: 'PlanExercise',
                noCache: false,
                reader: {
                    type: 'json',
                    root: 'entries'
                },
                writer: {
                    type: 'json',
                    root: 'records'
                },
                headers: {
                    user_id: localStorage.getItem("user_id")
                }
            }));

        for (var i = 0; i < planExercisesStore.filters.length; i++)
        {
            if (planExercisesStore.filters.items[i].property  == 'day')
                planExercisesStore.filters.removeAt(i);
        }

        planExercisesStore.sort({
                                        property : 'position',
                                        direction: 'ASC'
                               });

        planExercisesStore.load(function(records, operation, success) {
            var planPanel	= controller.getPlanPanel(),
                mainStage	= controller.getMainStage(),
                recordsArray = [],
                tabActiveId = controller.currentDay || controller.getPlanPanel ().down ('tabpanel').child('#d1');

            planPanel.controller = controller;
            controller.createDayPanels ( controller.plan.data.days );

            mainStage.add( planPanel );
            planPanel.on('hide', function(component) {
                component.destroy();
            }, controller
                        );
            // **** 1 create the commands
            controller.showCommands();
            LanistaTrainer.app.setStandardButtons('closePlanPanelButton');

            // *** 2 Show the panel
            planPanel.show();

            LanistaTrainer.app.fireEvent('showPlanHeaderUpdate');
            controller.populateTabsExercisesByDay(records);
            planPanel.down ('tabpanel').setActiveTab(tabActiveId);
            LanistaTrainer.app.fireEvent('showStage');

            // *** 4 Callback
            if (callback instanceof Function) callback();

         });

    },

    onShowPlanHeaderUpdate: function() {

        var controller = this,
            record = LanistaTrainer.app.currentCustomer,
            divLogo = '<div class="lansita-header-customer-image-not-found"><div class="lansita-header-customer-logo" style="background-image: url(' + Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/img/p/'+ record.data.id + '_photo.jpg);"></div></div>',
            divInfoCustomer = '<div class="lansita-header-customer-name"> <span class="last-name">' + record.data.last_name + '</span><br> <span class="first-name">' + record.data.first_name +'</span></div>',
            planPanel	= controller.getPlanPanel();

        planPanel.down ('#planHeader').update(controller.plan.data);
        if (!controller.plan.data.description)
            Ext.get('planHeaderDescription').setHTML('No description available');

        controller.getMainViewport().down("#header").update({
            info: divLogo + divInfoCustomer,
            title: controller.planname
        });
    },

    onShowExerciseSelectionView: function(callback, userExercises) {
        var store = Ext.getStore( 'ExerciseStore' ),
            self = this,
            mainStage			= self.getMainStage(),
            viewportXCapacity	= Math.floor(mainStage.getEl().getWidth(true)/187);
            viewportCapacity	= Math.floor((mainStage.getEl().getHeight(true)-47)/177) * viewportXCapacity;
            exercisesPanel		= self.getExercisesPanel();

        store.clearFilter();
        if ( userExercises === true )
        {
            store.filter (new Ext.util.Filter(
                {
                    property : 'ext_id',
                    value : 'CUST',
                    anyMatch: true
                }));
        }

        store.pageSize = viewportCapacity;
        store.clearFilter(true);
        if ( this.favorite )
        {
            store.filter( 'ext_id', '"' + this.favorite.data.objects.replace(/,/g,'","') + '"' );
        }
        store.sort('name_' + Ext.ux.LanguageManager.lang, 'ASC');

        var menuFilters = LanistaTrainer.app.getController('ExercisesController').showExercisesMenu();

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.SEARCH,
                //itemId: 'showExerciseFilterButton',
                itemId: 'searchButton',
                menu: menuFilters,
                menuButtonAlign: 'right',
                glyph: '90@Lanista Icons' //Z
            })
        );

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_OWN_EXERCISES,
                itemId: 'showSelectionUserExercisesButton',
                glyph: '97@Lanista Icons' //a
            })
        );
        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_FAVORITES,
                itemId: 'showExercisesFavoritesToSelectButton',
                glyph: '122@Lanista Icons' //z
            })
        );

        exercisesPanel.selection = this.selectionsTab[this.currentDay.id.substring(1)];
        mainStage.add(exercisesPanel);
        LanistaTrainer.app.setStandardButtons('closeExercisesSelectionView');
        exercisesPanel.on('hide', function(component) {
            component.destroy();
        }, self);

        exercisesPanel.headerInfo = '<div class="exercises-header">' + Ext.ux.LanguageManager.TranslationArray.TRAINING_PLAN + ': ' + this.plan.data.name + '</div>';
        exercisesPanel.headerTitle = Ext.ux.LanguageManager.TranslationArray.BUTTON_ADD_EXERCISES;
        exercisesPanel.show();

        LanistaTrainer.app.fireEvent('showSearchHeaderUpdate');
        LanistaTrainer.app.fireEvent('showStage');

        if ( callback instanceof Function ) callback();
    },

    onShowPlanOptionsPanel: function(callback) {
        var controller = this,
            mainStage			= controller.getMainStage(),
            planOptionsPanel	= controller.getPlanOptionsPanel(),
            plan				= controller.plan,
            record				= LanistaTrainer.app.currentCustomer,
            fieldset			= controller.getTrainingPlanOptions();

        mainStage.add(planOptionsPanel);
        LanistaTrainer.app.setStandardButtons('closePlanOptionsPanel');
        planOptionsPanel.on('hide', function(component) {
            component.destroy();
        }, self);

        planOptionsPanel.headerInfo = '<div class="lansita-header-customer-image-not-found"><div class="lansita-header-customer-photo" id="changeCustomerPhoto" style="background-image: url(' + Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/img/p/'+ record.data.id + '_photo.jpg);"></div></div>';
        planOptionsPanel.headerTitle = plan.data.name;

        fieldset.setTitle (Ext.ux.LanguageManager.TranslationArray.TRAINING_PLAN);
        planOptionsPanel.getForm().setValues(
            {
                name:					plan.data.name,
                duration:				plan.data.duration,
                description:			plan.data.description
            }
        );

        planOptionsPanel.show();

        LanistaTrainer.app.fireEvent('showStage');

        if ( callback instanceof Function ) callback();


        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });
        planOptionsPanel.getForm().findField('planName').focus();
    },

    onCreatePlan: function(planname) {
        var userId = localStorage.getItem("user_id"),
            newPlan = Ext.create('LanistaTrainer.model.Plan', {
            name : ( planname && planname.length > 1 )? planname : Ext.ux.LanguageManager.TranslationArray.PLAN_NAME_DEFAULT,
            template: 0,
            customer_id: LanistaTrainer.app.currentCustomer.data.id,
            trainer_id: userId
        });

        newPlan.setProxy(new Ext.data.proxy.Ajax({
            url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/plan/json',
            model: 'Plan',
            noCache: false,
            reader: {
                type: 'json',
                root: 'entries'
            },
            writer: {
                type: 'json',
                root: 'records',
                allowSingle: false
            },
            headers: {
                user_id: userId
            }
        }));

        newPlan.save (
            {
                callback: function ( record ){
                    LanistaTrainer.app.getController ( 'PlanController' ).plan = record;
                    LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'PlanPanel';
                    LanistaTrainer.app.fireEvent( 'showPlanPanel', planname);
                }
            });
    },

    onCloseExercisesSelectionView: function(callback) {
        var controller = this,
            exercisesPanel = controller.getExercisesPanel();

        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            exercisesPanel.hide();
            if (callback instanceof Function) callback();
        });
    },

    onClosePlanOptionsPanel: function(callback) {
        var controller = this,
            planOptionsPanel = controller.getPlanOptionsPanel();

        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            planOptionsPanel.hide();
            if (callback instanceof Function) callback();
        });
    },

    showCommands: function(callback) {

        var controller = this;
            planOptionsMenu = controller.setPlanOptions();

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_ADD_EXERCISES,
                itemId: 'addExerciseButton',
                userAlias: 'customerButton',
                glyph: '108@Lanista Icons' //l
            })
        );

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_PLAN_OPTIONS,
                itemId: 'showPlanOptionsButton',
                menu: planOptionsMenu,
                menuButtonAlign: 'right',
                style: 'float: left;',
                glyph: '120@Lanista Icons' //x
            })
        );




    },

    loadData: function() {

    },

    createDayPanels: function(days) {
        var tabPanel = this.getPlanPanel ().down ( 'tabpanel' ),
            controller = this;

        var from = 2,
            to = days,
            newList = null;

        for (from=2; from<=to; from++)
        {
            if (tabPanel.items.getByKey('d'+from))
                continue;
            tabPanel.insert(tabPanel.items.getCount() -1 , {
                            xtype: 'planExercisesList',
                            id: 'd'+from,
                            title: Ext.ux.LanguageManager.TranslationArray.DAY + ' ' + from,
                            store: controller.plan.planexercises()
        });
        }
    },

    populateTabsExercisesByDay: function(records, callback) {
        var controller = this,
            tabPanel = controller.getPlanPanel().down('tabpanel'),
            recordsArray = [],
            results,
            tab;

        for ( var i = 1; i < tabPanel.items.length; i++ ) {
            results = Ext.Array.filter(records, function(item) {
                return item.data.day === i;
            });
            tab = tabPanel.child('#d' + i);
            for ( var j = 0; j < results.length; j++ ) {
                recordsArray.push(results[j].data);
            }
            if (recordsArray) {
                if (tab){
                    tab.update(recordsArray);
                    tab.recordsArray = recordsArray;
                }
            }
            recordsArray = [];
        }

        //This is for plans records that has been charged from a previously plan saved
        if (records.length > 0 && ( (!LanistaTrainer.app.getController ( 'PlanController' ).selectionsTab) || (LanistaTrainer.app.getController ( 'PlanController' ).selectionsTab.length === 0))) {
            var selectionsTab = [],
                itemTab = [];

                selectionsTab[0] = [];
                for ( i = 1; i < tabPanel.items.length; i++ ) {
                    //selectionsTab[i] = [];
                    tab = tabPanel.child('#d' + i);
                    if (tab.recordsArray){
                        selection = [];
                        for ( j = 0; j < tab.recordsArray.length; j++ ) {
                            itemTab = [];
                            itemTab[0] = tab.recordsArray[j].exercise_id !== 0 ? tab.recordsArray[j].exercise_id : tab.recordsArray[j].user_exercise_id;
                            itemTab[1] = tab.recordsArray[j].exercise_ext_id;
                            itemTab[2] = 1;
                            selection.push(itemTab);
                        }
                        selectionsTab.push(selection);
                    }
                }
            controller.selectionsTab = selectionsTab;
            controller.currentDay = controller.getPlanPanel ().down ('tabpanel').getActiveTab();
        }

    },

    setHeader: function() {
        LanistaTrainer.app.fireEvent('showPlanHeaderUpdate');
    },

    setPlanOptions: function() {
        var controller = this,
            currentCustomer = LanistaTrainer.app.currentCustomer;

        planOptions = new Ext.menu.Menu(
            {
                defaults: {
                    height: '50px',
                    width: '220px'
                },
                items:
                [
                    {text:	Ext.ux.LanguageManager.TranslationArray.CHANGE_PLAN.toUpperCase(),
                            handler: function () {
                                        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
                                        LanistaTrainer.app.fireEvent( 'closePlanPanel', function() {
                                            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'PlanOptionsPanel';
                                            LanistaTrainer.app.fireEvent( 'showPlanOptionsPanel' );
                                        });
                                     }},
                    {text:	Ext.ux.LanguageManager.TranslationArray.BUTTON_ASSIGN_PLAN.toUpperCase(),
                            handler: function () {

                                        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
                                        LanistaTrainer.app.fireEvent( 'closePlanPanel', function() {
                                            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'CustomersPanel';
                                            LanistaTrainer.app.fireEvent( 'showCustomersPanel' );
                                        });
                                     }
                    },
                    {text:  Ext.ux.LanguageManager.TranslationArray.GENERATE_PDF.toUpperCase(),
                            handler: function () {
                                        window.open( Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() +"/tpmanager/plan/getpdf?plan_id=" + controller.plan.data.id );
                                     }},
                    {text:  Ext.ux.LanguageManager.TranslationArray.SEND_EMAIL.toUpperCase(),
                            handler: function () {

                                        Ext.Ajax.request({
                                            url: Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + "/tpmanager/plan/sendmail",
                                            method: 'post',
                                            params: { plan_id: controller.plan.data.id },
                                            headers: { user_id: localStorage.getItem("user_id") },
                                            failure : function(response){
                                                data = Ext.decode(response.responseText);
                                                console.log ( data );
                                                Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_PROBLEM, '', Ext.emptyFn );
                                            },
                                            success: function(response, opts) {
                                                data = Ext.decode ( response.responseText);
                                                if (data.success !== true)
                                                {
                                                    Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_PROBLEM, data.message, Ext.emptyFn);
                                                } else {
                                                    Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_PROBLEM, data.message, Ext.emptyFn);
                                                    Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_SENT, '', Ext.emptyFn );
                                                }
                                            }
                                        });
                                  }
                    }
                ]
            }
        );


        return planOptions;



    },

    init: function(application) {
        this.control({
            "viewport #closePlanPanelButton": {
                click: this.onClosePlanPanelButtonClick
            },
            "viewport #addExerciseButton": {
                click: this.onAddExerciseButtonClick
            },
            "viewport #closeExercisesSelectionView": {
                click: this.onCloseExercisesSelectionViewButtonClick
            },
            "viewport #savePlanOptionsButton": {
                click: this.onSavePlanOptionsButtonClick
            },
            "viewport #cancelPlanOptionsButton": {
                click: this.onCancelPlanOptionsButtonClick
            },
            "viewport #closePlanOptionsPanel": {
                click: this.onClosePlanOptionsPanelButton
            }
        });

        application.on({
            closePlanPanel: {
                fn: this.onClosePlanPanel,
                scope: this
            },
            showPlanPanel: {
                fn: this.onShowPlanPanel,
                scope: this
            },
            showPlanHeaderUpdate: {
                fn: this.onShowPlanHeaderUpdate,
                scope: this
            },
            showExerciseSelectionView: {
                fn: this.onShowExerciseSelectionView,
                scope: this
            },
            showPlanOptionsPanel: {
                fn: this.onShowPlanOptionsPanel,
                scope: this
            },
            createPlan: {
                fn: this.onCreatePlan,
                scope: this
            },
            closeExercisesSelectionView: {
                fn: this.onCloseExercisesSelectionView,
                scope: this
            },
            closePlanOptionsPanel: {
                fn: this.onClosePlanOptionsPanel,
                scope: this
            }
        });
    }

});
