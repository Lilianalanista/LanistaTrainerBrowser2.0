/*
 * File: app/controller/RegisterController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.RegisterController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.registerController',

    refs: {
        registerPanel: {
            autoCreate: true,
            selector: 'registerPanel',
            xtype: 'registerpanel'
        },
        mainStage: '#mainStage',
        rightCommandPanel: '#rightCommandPanel',
        mainViewport: 'mainViewport',
        leftCommandPanel: '#leftCommandPanel'
    },

    control: {
        "viewport #showRegisterPanelButton": {
            click: 'onShowRegisterPanelButtonClick'
        },
        "viewport #closeRegisterPanelButton": {
            click: 'onCloseRegisterPanelButtonClick'
        },
        "viewport #sendRegisterButton": {
            click: 'onSendRegisterButtonClick'
        }
    },

    onShowRegisterPanelButtonClick: function(button, e, eOpts) {
        LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1], function() {
            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'RegisterPanel';
            LanistaTrainer.app.fireEvent('showRegisterPanel');
        });


    },

    onCloseRegisterPanelButtonClick: function(button, e, eOpts) {
        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent('closeRegisterPanel', function() {
            LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);
        });


    },

    onSendRegisterButtonClick: function(button, e, eOpts) {
        var controller = this,
            form_data = controller.getRegisterPanel().getValues();

        Ext.Ajax.request({
            url: Ext.ux.ConfigManager.getRoot() +'/tpmanager/user/registercustomer',
            method: 'post',
            params: {email: form_data.emailAdresse1,
                     email_confirmation: form_data.emailAdresse2,
                     password: form_data.passwordReg,
                     role: 2,
                     language: form_data.customer_languageReg
                    },
            failure : function(result, request){
                console.log( "There were problems in looking for user information" );
            },
            success: function(response, opts) {
                try {
                    data = Ext.decode(response.responseText);
                    if (!data.success){
                        if (data.error === -1){
                            Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_REGISTRAION_PROB_1,
                                      Ext.ux.LanguageManager.TranslationArray.MSG_REGISTRATION_ERROR, Ext.emptyFn);
                        }
                        else{
                            Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_REGISTRAION_PROB_1,
                                      Ext.ux.LanguageManager.TranslationArray.MSG_REGISTRAION_PROB_2, Ext.emptyFn);                }
                    }
                    else{
                        Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_REGISTRATION_OK_1,
                                      Ext.ux.LanguageManager.TranslationArray.MSG_REGISTRATION_OK_2, Ext.emptyFn);
                        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
                        LanistaTrainer.app.fireEvent('closeRegisterPanel', function() {
                            LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);
                        });
                    }
                }
                catch( err ) {
                    Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_REGISTRAION_PROB_1,
                                  Ext.ux.LanguageManager.TranslationArray.MSG_REGISTRATION_ERROR, Ext.emptyFn);
                }
            }
        });
    },

    onShowRegisterPanel: function(callback) {
        var controller = this,
            registrationPanel	= controller.getRegisterPanel(),
            mainStage	= controller.getMainStage();

        mainStage.add( registrationPanel );

        registrationPanel.on('hide', function(component) {
            component.destroy();
        }, controller);


        // **** 1 create the commands
        LanistaTrainer.app.setStandardButtons('closeRegisterPanelButton');
        this.showCommands();

        // *** 2 Show the panel
        registrationPanel.show();
        /*controller.getMainView().down("#header").setData({
            info: '',
            title: '-'+ Ext.ux.LanguageManager.TranslationArray.CUST_MENU_SETUP.toUpperCase()}
                                                          );
        */

        controller.getMainViewport().down("#header").update({
            info: '' }
        );

        //controller.fnChargeFilters(this);

        LanistaTrainer.app.fireEvent('showStage');

        // *** 4 Callback
        if (callback instanceof Function) callback();

        // *** 5 Load data
        controller.loadData();




    },

    onCloseRegisterPanel: function(callback) {
        var controller = this;
        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getRegisterPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    showCommands: function(callback) {
        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.FORM_SEND,
                itemId: 'sendRegisterButton',
                glyph: '100@Lanista Icons' //d
            })
        );

        /*
        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.MENU_LOGIN,
                itemId: 'loginButton',
                userAlias: 'loginButton',
                glyph: '101@Lanista Icons' //e
            })
        );
        */

    },

    loadData: function() {

    },

    init: function(application) {
        application.on({
            ShowRegisterPanel: {
                fn: this.onShowRegisterPanel,
                scope: this
            },
            closeRegisterPanel: {
                fn: this.onCloseRegisterPanel,
                scope: this
            }
        });
    }

});
