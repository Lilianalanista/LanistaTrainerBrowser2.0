/*
 * File: app/controller/MeasuresController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.MeasuresController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.measuresController',

    id: 'measuresController',

    refs: [
        {
            autoCreate: true,
            ref: 'measuresPanel',
            selector: 'measuresPanel',
            xtype: 'measuresPanel'
        },
        {
            ref: 'mainStage',
            selector: '#mainStage'
        },
        {
            ref: 'rightCommandPanel',
            selector: '#rightCommandPanel'
        },
        {
            ref: 'mainViewport',
            selector: 'mainViewport'
        },
        {
            ref: 'leftCommandPanel',
            selector: '#leftCommandPanel'
        }
    ],

    onShowMeasuresPanelButtonClick: function(button, e, eOpts) {
        LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1], function() {
            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'MeasuresPanel';
            LanistaTrainer.app.fireEvent('showMeasuresPanel');
        });


    },

    onCloseMeasuresPanelButtonClick: function(button, e, eOpts) {
        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent('closeMeasuresPanel', function() {
            LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);
        });


    },

    onShowMeasuresPanel: function(callback) {
        var controller = this,
            measuresPanel	= controller.getMeasuresPanel(),
            mainStage	= controller.getMainStage();
            //measuresStore = Ext.getStore('MeasuresStore');

        //measuresStore.load();

        mainStage.add( measuresPanel );
        measuresPanel.on('hide', function(component) {
            component.destroy();
        }, controller);

        // **** 1 create the commands
        LanistaTrainer.app.setStandardButtons('closeMeasuresPanelButton');
        this.showCommands();

        // *** 2 Show the panel
        measuresPanel.show();

        LanistaTrainer.app.fireEvent('showMeasuresHeaderUpdate');
        LanistaTrainer.app.fireEvent('showStage');

        // *** 4 Callback
        if (callback instanceof Function) callback();

        // *** 5 Load data
        controller.loadData();




    },

    onCloseMeasuresPanel1: function(callback) {
        var controller = this;
        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getMeasuresPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    onShowMeasuresHeaderUpdate: function() {
        var controller = this;
        if (this.getMeasuresPanel() && !this.getMeasuresPanel().isHidden()) {
            controller.getMainViewport().down("#header").update({
               info: '',
               title: ''
            });
        }
    },

    showCommands: function(callback) {

        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });


    },

    loadData: function() {

    },

    init: function(application) {
        this.control({
            "viewport #showMeasuresPanelButton": {
                click: this.onShowMeasuresPanelButtonClick
            },
            "viewport #closeMeasuresPanelButton": {
                click: this.onCloseMeasuresPanelButtonClick
            }
        });

        application.on({
            showMeasuresPanel: {
                fn: this.onShowMeasuresPanel,
                scope: this
            },
            closeMeasuresPanel: {
                fn: this.onCloseMeasuresPanel1,
                scope: this
            },
            showMeasuresHeaderUpdate: {
                fn: this.onShowMeasuresHeaderUpdate,
                scope: this
            }
        });
    }

});
