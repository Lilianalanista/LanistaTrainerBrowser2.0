/*
 * File: app/controller/MyExerciseInfoController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.MyExerciseInfoController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.myExerciseInfoController',

    id: 'myExerciseInfoController',

    refs: {
        mainStage: '#mainStage',
        leftCommandPanel: '#leftCommandPanel',
        rightCommandPanel: '#rightCommandPanel',
        mainViewport: 'mainViewport',
        myExerciseInfoPanel: {
            autoCreate: true,
            selector: '#myExerciseInfoPanel',
            xtype: 'myExerciseInfoPanel'
        },
        myExercise_configuration: '#myExercise_configuration'
    },

    control: {
        "viewport #showMyExerciseInfoButton": {
            click: 'onShowMyExerciseInfoButton'
        },
        "viewport #closeMyExerciseInfoPanelButton": {
            click: 'onCloseMyExerciseInfoPanelButton'
        },
        "viewport #cancelSettingsButton": {
            click: 'onCancelSettingsButtonClick'
        },
        "viewport #saveSettingsButton": {
            click: 'onSaveSettingsButtonClick'
        }
    },

    onShowMyExerciseInfoButton: function(button, e, eOpts) {
        LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1], function() {
            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'MyExerciseInfoPanel';
            LanistaTrainer.app.fireEvent('showMyExerciseInfoPanel');
        });
    },

    onCloseMyExerciseInfoPanelButton: function(button, e, eOpts) {
        var controller = this;
            exercise = controller.myexercise;

        LanistaTrainer.app.panels.splice(LanistaTrainer.app.panels.length - 1, 1);
        LanistaTrainer.app.fireEvent('closeMyExerciseInfoPanel', function() {
            if (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1] === 'ExercisesPanel') //New Exercise
                LanistaTrainer.app.fireEvent('show' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1]);
            else{ //Exercise modified
                LanistaTrainer.app.fireEvent('showExercisesPanel', function() {
                    LanistaTrainer.app.getController('ExercisesController').getExercisesPanel().addCls ('blured');
                    //LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'ExercisePanel';
                    LanistaTrainer.app.fireEvent('showExercisePanel', exercise, '');
                });
            }
        });

    },

    onCancelSettingsButtonClick: function(button, e, eOpts) {
        var controller = this;
        controller.showCommands();
    },

    onSaveSettingsButtonClick: function(button, e, eOpts) {
        var controller = this,
            server = Ext.ux.ConfigManager.getServer(),
            root = Ext.ux.ConfigManager.getRoot() + '/tpmanager/',
            userId = localStorage.getItem("user_id"),
            newExercise,
            fields = controller.getMyExerciseInfoPanel().getForm().getFields(),
            exerciseId,
            fields,
            ini = 4000;

        if (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'ExercisesPanel') //New Exercise
            exerciseId = controller.myexercise.data.id;
        else //Exercise modified
            exerciseId = parseInt(controller.myexercise.data.id) - ini;

        newExercise = Ext.create('LanistaTrainer.model.ExerciseModel', {
            id:					exerciseId,
            name_DE:			controller.name_DE,
            name_ES:			controller.name_ES,
            name_EN:			controller.name_EN,
            ext_id:				controller.myexercise.data.ext_id,
            type:				fields.getByKey('myExercise_exerciseType').getValue(),
            muscle:				fields.getByKey('myExercise_muscle').getValue(),
            addition:			fields.getByKey('myExercise_other').getValue(),
            coatchingnotes_DE:	controller.execution_DE,
            coatchingnotes_EN:	controller.execution_EN,
            coatchingnotes_ES:	controller.execution_ES,
            mistakes_DE:		controller.errors_DE,
            mistakes_ES:		controller.errors_ES,
            mistakes_EN:		controller.errors_EN
        });

        newExercise.setProxy(new Ext.data.proxy.Ajax({
            url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/exercise/userexercisesjson',
            model: 'Exercise',
            noCache: false,
            reader: {
                type: 'json',
                root: 'entries'
            },
            writer: {
                type: 'json',
                root: 'records',
                allowSingle: false
            },
            headers: {
                user_id: userId
            }
        }));

        newExercise.save (
        {
            callback: function ( record, event, success ){
                if (success)
                {
                    controller.getMyExerciseInfoPanel().getForm().setValues(
                        {
                            myExercise_name:		Ext.ux.LanguageManager.lang === 'ES' ? record.data.name_ES :
                                                    Ext.ux.LanguageManager.lang === 'EN' ? record.data.name_EN :
                                                    record.data.name_DE,
                            myExercise_execution:	Ext.ux.LanguageManager.lang === 'ES' ? record.data.coatchingnotes_ES.split( "||" ).join( "\n" ) :
                                                    Ext.ux.LanguageManager.lang === 'EN' ? record.data.coatchingnotes_EN.split( "||" ).join( "\n" ) :
                                                    record.data.coatchingnotes_DE.split( "||" ).join( "\n" ),
                            myExercise_errors:		Ext.ux.LanguageManager.lang === 'ES' ? record.data.mistakes_ES.split( "||" ).join( "\n" ) :
                                                    Ext.ux.LanguageManager.lang === 'EN' ? record.data.mistakes_EN.split( "||" ).join( "\n" ) :
                                                    record.data.mistakes_DE.split( "||" ).join( "\n" ),
                            muscle:					record.data.muscle,
                            addition:				record.data.addition,
                            type:					record.data.type,
                            id:						record.data.id
                        }
                    );
                    fields = controller.getMyExerciseInfoPanel().getForm().getFields();
                    fields.getByKey('myExercise_language').setValue(Ext.ux.LanguageManager.lang);
                    fields.getByKey('myExercise_muscle').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.FILTER_MUSCLES);
                    fields.getByKey('myExercise_exerciseType').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.FILTER_TYPE);
                    fields.getByKey('myExercise_other').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.FILTER_ADDITIVES);

                    controller.myexercise = record;
                    Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_SAVE, Ext.ux.LanguageManager.TranslationArray.MSG_DATA_SAVE, Ext.emptyFn);
                    controller.showCommands();
                }
                else
                    Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, Ext.ux.LanguageManager.TranslationArray.MSG_DATA_NOT_SAVED_1, Ext.emptyFn);
            }
        });


    },

    onShowMyExerciseInfoPanel: function(callback) {
        var controller = this;
        var myExerciseInfoPanel	= controller.getMyExerciseInfoPanel();
        var mainStage	= controller.getMainStage();

        myExerciseInfoPanel.addCls('md-show');
        mainStage.add( myExerciseInfoPanel );
        //mainStage.getLayout().setActiveItem("myExerciseInfoPanel",'1');
        mainStage.getLayout().setActiveItem("myExerciseInfoPanel");

        myExerciseInfoPanel.on('hide', function(component) {
            component.destroy();
        }, controller);

        // **** 1 create the commands
        LanistaTrainer.app.setStandardButtons('closeMyExerciseInfoPanelButton');
        this.showCommands();

        // *** 2 Show the panel
        myExerciseInfoPanel.show();
        LanistaTrainer.app.fireEvent('showMyExerciseInfoHeaderUpdate');
        LanistaTrainer.app.fireEvent('showStage');

        // *** 4 Callback
        if (callback instanceof Function) callback();

        // *** 5 Load data
        controller.loadData();


    },

    onCloseMyExerciseInfoPanel: function(callback) {
        var controller = this;
        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getMyExerciseInfoPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    onShowMyExerciseInfoHeaderUpdate: function() {
        var controller = this,
            info;


        //    info = '<div class="lanista-user-setup lansita-header-customer-logo-not-found show-info-customer" id=userLogoNotFound"><div class="lansita-header-customer-logo" id="changeUserLogo" style="background-image: url(' + Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/img/p/'+ localStorage.getItem("user_id") + '_logo.jpg);"></div></div>' + '<div class="lanista-user-setup trainer-logo-header">' + Ext.ux.LanguageManager.TranslationArray.YOUR_LOGO + '</div>';
        //    info = info + '<div class="lanista-user-setup lansita-header-customer-image-not-found" id="userPhotoNotFound"><div class="lansita-header-customer-photo" id="changeUserPhoto" style="background-image: url(' + Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/img/p/'+ localStorage.getItem("user_id") + '_photo.jpg);"></div></div>' + '<div class="lanista-user-setup trainer-foto-header">' + Ext.ux.LanguageManager.TranslationArray.YOUR_PHOTO + '</div>';


        if (this.getMyExerciseInfoPanel() && !this.getMyExerciseInfoPanel().isHidden()) {
            controller.getMainViewport().down("#header").update({
               info: info,
               title: Ext.ux.LanguageManager.TranslationArray.CUST_MENU_SETUP.toUpperCase()
            });
        }
    },

    showCommands: function(callback) {

        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });


    },

    loadData: function() {
        var controller = this,
            fieldset = controller.getMyExercise_configuration(),
            fields = controller.getMyExerciseInfoPanel().getForm().getFields(),
            currentLanguage = Ext.ux.LanguageManager.lang,
            comboLanguage = fields.getByKey('myExercise_language').getValue(),
            myExercise = controller.myexercise;

        Ext.ux.LanguageManager.setLanguage(comboLanguage);
        setTimeout(function()
        {
            fieldset.setTitle (Ext.ux.LanguageManager.TranslationArray.FORM_EXERCISE_CONFIG);
            fields.getByKey('myExercise_name').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.FORM_EXERCISE_NAME);
            fields.getByKey('myExercise_execution').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.EXECUTION);
            fields.getByKey('myExercise_errors').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.POSSIBLE_ERRORS);

            document.getElementsByName("myExercise_name")[0].placeholder = Ext.ux.LanguageManager.TranslationArray.FORM_EXERCISE_NAME;
            document.getElementsByName("myExercise_execution")[0].placeholder = Ext.ux.LanguageManager.TranslationArray.EXECUTION;
            document.getElementsByName("myExercise_errors")[0].placeholder = Ext.ux.LanguageManager.TranslationArray.POSSIBLE_ERRORS;

            if (myExercise)
            {
                controller.getMyExerciseInfoPanel().getForm().setValues(
                    {
                        myExercise_name:		Ext.ux.LanguageManager.lang === 'ES' ? LanistaTrainer.app.getController('MyExerciseInfoController').name_ES :
                                                Ext.ux.LanguageManager.lang === 'EN' ? LanistaTrainer.app.getController('MyExerciseInfoController').name_EN :
                                                LanistaTrainer.app.getController('MyExerciseInfoController').name_DE,
                        myExercise_execution:	Ext.ux.LanguageManager.lang === 'ES' ? LanistaTrainer.app.getController('MyExerciseInfoController').execution_ES.split( "||" ).join( "\n" ) :
                                                Ext.ux.LanguageManager.lang === 'EN' ? LanistaTrainer.app.getController('MyExerciseInfoController').execution_EN.split( "||" ).join( "\n" ) :
                                                LanistaTrainer.app.getController('MyExerciseInfoController').execution_DE.split( "||" ).join( "\n" ),
                        myExercise_errors:		Ext.ux.LanguageManager.lang === 'ES' ? LanistaTrainer.app.getController ( 'MyExerciseInfoController' ).errors_ES.split( "||" ).join( "\n" ) :
                                                Ext.ux.LanguageManager.lang === 'EN' ? LanistaTrainer.app.getController ( 'MyExerciseInfoController' ).errors_EN.split( "||" ).join( "\n" ) :
                                                LanistaTrainer.app.getController ( 'MyExerciseInfoController' ).errors_DE.split( "||" ).join( "\n" )
                    }
                );
            }

            Ext.ux.LanguageManager.setLanguage(currentLanguage);
            controller.getMyExerciseInfoPanel().getForm().findField('myExercise_name').focus();
        }, 100);






    },

    init: function(application) {
        application.on({
            showMyExerciseInfoPanel: {
                fn: this.onShowMyExerciseInfoPanel,
                scope: this
            },
            closeMyExerciseInfoPanel: {
                fn: this.onCloseMyExerciseInfoPanel,
                scope: this
            },
            showMyExerciseInfoHeaderUpdate: {
                fn: this.onShowMyExerciseInfoHeaderUpdate,
                scope: this
            }
        });
    }

});
