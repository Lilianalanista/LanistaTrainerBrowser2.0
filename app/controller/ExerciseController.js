/*
 * File: app/controller/ExerciseController.js
 *
 * This file was generated by Sencha Architect version 3.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.ExerciseController', {
    extend: 'Ext.app.Controller',

    id: 'ExerciseController',

    refs: [
        {
            autoCreate: true,
            ref: 'exercisesView',
            selector: 'exercisesPanel',
            xtype: 'exercisesPanel'
        },
        {
            ref: 'mainStage',
            selector: '#mainStage'
        },
        {
            ref: 'MainView',
            selector: '#myViewport'
        },
        {
            ref: 'HeaderView',
            selector: '#header'
        },
        {
            ref: 'RightCommandPanel',
            selector: '#rightCommandPanel'
        },
        {
            ref: 'LeftCommandPanel',
            selector: '#leftCommandPanel'
        },
        {
            ref: 'RightView',
            selector: '#rightView'
        }
    ],

    onShowNextExercises: function(tool, e, eOpts) {
        console.log("SHOW NEXT EXERCISES");
        Ext.getStore("ExerciseStore").nextPage();
    },

    onShowPreviousExercises: function(tool, e, eOpts) {
        console.log("SHOW PREVIOUS EXERCISES");
        if (Ext.getStore("ExerciseStore").currentPage > 1)
        	Ext.getStore("ExerciseStore").previousPage();
    },

    onButtonClick: function(button, e, eOpts) {
        Ext.getStore("ExerciseFilterII").load();
        var actionSheet = Ext.create('LanistaTrainer.view.RightView', {
        
        });
        
        this.getRightCommandPanel().add(actionSheet);
        actionSheet.show();
    },

    onLoadExercises: function(afterLoadCallback) {
        var controller = this;
        Ext.getStore('ExerciseStore').load({
        	callback: function(records, operation, success) {
                console.log("RECORDS " + records.length);
        		if (records.length == 0) {
        			Ext.getStore('ExerciseInitialStore').load({
        				callback: function(records, operation, success) {
        					var data = records;
        					var record = null;
        					for (var i = 0; i < records.length; i++) {
        						record = records[i].copy();
        						Ext.getStore('ExerciseStore').add(record);
        					}
        					Ext.getStore('ExerciseStore').sync();
                            Ext.getStore('ExerciseInitialStore').removeAll();
                            Ext.getStore('ExerciseStore').loadPage(1);
                            if (afterLoadCallback instanceof Function) {
        						afterLoadCallback();
        					}
        				},
        					scope: this
        			});
        		} else {
                    Ext.getStore('ExerciseStore').loadPage(1);
        			afterLoadCallback();
        		}
        	},
        	scope: this
        });
    },

    onShowExercises: function(callback) {
        console.log("SHOWING EXERCISES");
        var exercisesView = this.getExercisesView();
        mainStage = this.getMainStage();
        mainStage.add(exercisesView);
        exercisesView.show();
        console.log(exercisesView);
        
        var viewportXCapacity	= Math.floor(exercisesView.el.dom.clientWidth/187);
        var viewportCapacity 	= Math.floor((exercisesView.el.dom.clientHeight-47)/177) * viewportXCapacity;
        Ext.getStore("ExerciseStore").pageSize = viewportCapacity;
        
        this.ViewPortCapacityGlb = viewportCapacity;
        Ext.getStore("ExerciseStore").load({
        	callback: function(records, operation, success) {
                LanistaTrainer.app.fireEvent('HeaderUpdate', 1);
            }
         });
        
        console.log("VIEWPORT CAPACITY: " + viewportCapacity);
        
        
        // create the icons
        /*this.getRightCommandPanel().add(
        	Ext.create('LanistaTrainer.view.LanistaButton', {
        	iconCls: 'search',
        	text: 'Suchen',
            id: 'showExerciseFilter'
            })
        );*/
        this.getLeftCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                iconCls: 'home',
                text: 'Anmelden'
            })
        );
        this.getLeftCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                iconCls: 'refresh',
                text: 'Werkzeuge'
            })
        );
        
        this.fnChargeFilters(this);
        
        if (callback instanceof Function) callback();
        
    },

    onHeaderUpdate: function(page) {
        var store = Ext.getStore('ExerciseStore');
        var totalCounts = store.getTotalCount();
        
        var exercisesView = this.getExercisesView();
        var HeaderView = this.getHeaderView();
        
        var totalPages = Math.ceil(totalCounts/this.ViewPortCapacityGlb);
        
        //var filter = (isNaN(this.filters[1]) ? 'Musclegruppe: '+ this.filters[1] + '<br>' : '') + (isNaN(this.filters[2]) ? ' Übungstyp: '+ this.filters[2] + '<br>' : '') + (isNaN(this.filters[3]) ? ' Zusätze: '+ this.filters[3] + '<br>' : '');
        
        var t = new Ext.Template(
            '<div class="header-logo">Lanista</div>',
            '<div class="header-info">{info}</div>'
        );
        t.overwrite('header', {info: '<span class="header-subtitle">Seite '+ page +' von '+totalPages+'</span>'});
        
        console.log("Header Tpl appplied " + '<span class="header-subtitle">Seite '+ page +' von '+totalPages+'</span>');
        
        if (totalPages < page){
            //this.getExerciseView().setActiveItem(0);
            //this.getExerciseView().getComponent("MyView")......;
        }
        
        
    },

    fnChargeFilters: function(Cmp) {
        var htmlpanel = "";
        
        stExerciseFilt = Ext.getStore("ExerciseFilters").load({
            callback: function(records, operation, success) {
                var fieldValue,
                    record,
                    rChildren,
                    Childrens,
                    idLevel1,
                    idLevel2;
        
                if (success)
                {
                    var panel_ppal = new Ext.Panel({
                        id:"main_panel_id",
                        collapsible:false,
                        region:"center",
                        layout:'fit',
                        html:""
                    });
        
                    for (var i = 0; i < records.length; i++) {
                                    Ext.getCmp("main_panel_id").add({
                                        id: "Level1" + i,
                                        collapsible: true,
                                        collapsed: false,
                                        //collapseFirst:true,
                                        title: records[i].data.text,
                                        layout:"accordion",
                                        autoScroll:true,
                                        html:"",
                                        animate:true,
                                        titleCollapse:true,
                                        listeners: {
                                              afterrender: function(panel) {
                                                panel.header.el.on('click', function() {
                                                  if (panel.collapsed) {panel.expand();}
                                                  else {panel.collapse();}
                                                });
                                              }
                                        }
                                      });
                                    Ext.getCmp("main_panel_id").doLayout();
        
                                    idLevel1 = "Level1" + i;
                                    for (var j = 0; j < records[i].childNodes.length; j++){
                                          if (!records[i].childNodes[j].hasChildNodes()){
                                              if (j==0){
                                                  Ext.getCmp(idLevel1).add({
                                                    layout:'fit',
                                                    id: 'Panel' + i,
                                                    html:"",
                                                    title:'Wählen'
                                                  });
                                              }
        
                                              htmlpanel = '<div <a id=btn2' + j + ' class="btn" type="button">' + records[i].childNodes[j].data.text + '</a> </div>';
                                              Ext.getCmp('Panel' + i).html += htmlpanel;
                                          }
                                          else{
                                                Ext.getCmp(idLevel1).add({
                                                    id: "Level2" + j,
                                                    collapsible: true,
                                                    collapsed: true,
                                                    title: records[i].childNodes[j].data.text,
                                                    layout:"accordion",
                                                    autoScroll:true,
                                                    html:"",
                                                    animate:true,
                                                    titleCollapse:true
                                                });
                                                Ext.getCmp(idLevel1).doLayout();
        
                                                idLevel2 = "Level2" + j;
                                                for (var k = 0; k < records[i].childNodes[j].childNodes.length; k++){
                                                    htmlpanel = '<div <a id=btn3' + k + ' class="btn" type="button">' + records[i].childNodes[j].childNodes[k].data.text + '</a> </div>';
                                    				Ext.getCmp(idLevel2).html += htmlpanel;
                                                };
                                                Ext.getCmp("Level2" + j).doLayout();
                                          }
                                     }
                                     Ext.getCmp("Level1" + i).doLayout();
                    }
        
        			Ext.getCmp("main_panel_id").doLayout();
                    Cmp.getRightCommandPanel().add(panel_ppal);
                    panel_ppal.show();
                }
                else
                    alert("There were problems loading the filters");
            }
        
        });
        
    },

    init: function(application) {
        this.control({
            "exercisesPanel #nextExercises": {
                click: this.onShowNextExercises
            },
            "exercisesPanel #previousExercises": {
                click: this.onShowPreviousExercises
            },
            "#showExerciseFilter": {
                click: this.onButtonClick
            }
        });

        application.on({
            loadExercises: {
                fn: this.onLoadExercises,
                scope: this
            },
            showExercises: {
                fn: this.onShowExercises,
                scope: this
            },
            HeaderUpdate: {
                fn: this.onHeaderUpdate,
                scope: this
            }
        });
    }

});
