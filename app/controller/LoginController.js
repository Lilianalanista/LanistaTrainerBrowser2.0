/*
 * File: app/controller/LoginController.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.LoginController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.loginController',

    id: 'loginController',

    refs: [
        {
            ref: 'mainStage',
            selector: '#mainStage'
        },
        {
            ref: 'rightCommandPanel',
            selector: '#rightCommandPanel'
        },
        {
            ref: 'leftCommandPanel',
            selector: '#leftCommandPanel'
        },
        {
            ref: 'mainViewport',
            selector: 'mainViewport'
        },
        {
            autoCreate: true,
            ref: 'loginPanel',
            selector: 'loginPanel',
            xtype: 'loginPanel'
        }
    ],

    onShowLoginPanel: function(callback) {
        var controller = this,
            loginPanel	= controller.getLoginPanel(),
            mainStage	= controller.getMainStage();

        controller.getMainViewport().addCls("lanista-guest");

        LanistaTrainer.app.activePanel = "loginPanel";
        mainStage.add( loginPanel );

        loginPanel.on('hide', function(component) {
            component.destroy();
        }, controller);

        // **** 1 create the commands
        LanistaTrainer.app.setStandardButtons();
        this.showCommands();

        // *** 2 Show the panel
        loginPanel.show();

        controller.getMainViewport().down("#header").update({
            info: '' }
        );

        LanistaTrainer.app.fireEvent('showStage');

        // *** 4 Callback
        if (callback instanceof Function) callback();


    },

    onCloseLoginPanel: function(callback) {
        var controller = this;

        controller.getMainViewport().removeCls("lanista-guest");
        LanistaTrainer.app.fireEvent('hideStage', function () {
            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLeftCommandPanel().items.each(function (item) {
                item.hide();
            });
            controller.getLoginPanel().hide();
            if (callback instanceof Function) callback();
        });
    },

    onSetFieldSFocus: function(flagfocus, fieldfocus) {
        var controller = this;
            form = controller.getLoginPanel();

            if (flagfocus)
                form.getForm().findField(fieldfocus).focus();
            else
            {
                form.getForm().findField('user_email').reset();
                form.getForm().findField('password').reset();
                form.getForm().findField('user_email').focus();
            }


    },

    showCommands: function(callback) {

        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        //Adding bottoms into RightPanel
        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.MENU_LOGIN,
                itemId: 'loginButton',
                userAlias: 'loginButton',
                glyph: '101@Lanista Icons' //e
            })
        );

        var lLanguages = controller.listLanguages();
        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.FORM_CUSTOMER_LANGUAGE,
                itemId: 'showLanguagesPanelButton',
                menu: lLanguages,
                menuButtonAlign: 'right',
                glyph: '114@Lanista Icons' //r
            })
        );


        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_REGISTRATION,
                itemId: 'showRegistrationPanelButton',
                cls: [
                    'lanista-command-button',
                    'two-lines'
                ],
                glyph: '103@Lanista Icons' //g
            })
        );
        this.getRightCommandPanel().doLayout();

        //Adding bottoms into BottonPanel
        this.getLoginPanel().down("#bottonPanel").add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_EXPLORE_EXERCISES,
                itemId: 'showExercisesPanelButton',
                style: 'float: left;',
                glyph: '78@Lanista Icons' //g
            })
        );

        this.getLoginPanel().down("#bottonPanel").add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_EXPLORE_TEMPLATES,
                itemId: 'showTemplatesPanelButton',
                style: 'float: right;',
                glyph: '110@Lanista Icons' //n
            })
        );
        this.getLoginPanel().doLayout();
    },

    loadData: function() {

    },

    listLanguages: function() {
        var menuItems = new Array();
        currLanguage = Ext.ux.LanguageManager.lang;

        if (currLanguage == 'DE') {
            menuItems.push(
        	{
        		text:'ENGLISH',
                handler: function () {
                                         LanistaTrainer.app.fireEvent('changeLanguage', 'EN');
                                     }
        	});
            menuItems.push(
            {
        		text:'ESPAÑOL',
                handler: function () {
                                         LanistaTrainer.app.fireEvent('changeLanguage', 'ES');
                                     }
        	});
        } else if (currLanguage == 'EN') {
            menuItems.push(
        	{
        		text:'DEUTSCH',
                handler: function () {
                                         LanistaTrainer.app.fireEvent('changeLanguage', 'DE');
                                     }
        	});
            menuItems.push(
            {
        		text:'ESPAÑOL',
                handler: function () {
                                         LanistaTrainer.app.fireEvent('changeLanguage', 'ES');
                                     }
        	});
        } else {
            menuItems.push(
        	{
        		text:'DEUTSCH',
                handler: function () {
                                         LanistaTrainer.app.fireEvent('changeLanguage', 'DE');
                                     }
        	});
            menuItems.push(
            {
        		text:'ENGLISH',
                handler: function () {
                                         LanistaTrainer.app.fireEvent('changeLanguage', 'EN');
                                     }
        	});
        }


        var languages = new Ext.menu.Menu(
        {
            defaults: {
                height: '50px',
                width: '220px'
            },
            items:[]
        });
        languages.add(menuItems);

        return languages;
    },

    init: function(application) {
        application.on({
            showLoginPanel: {
                fn: this.onShowLoginPanel,
                scope: this
            },
            closeLoginPanel: {
                fn: this.onCloseLoginPanel,
                scope: this
            },
            setFieldsFocus: {
                fn: this.onSetFieldSFocus,
                scope: this
            }
        });
    }

});
