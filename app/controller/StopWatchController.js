/*
 * File: app/controller/StopWatchController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.StopWatchController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.stopWatchController',

    id: 'stopWatchController',

    refs: {
        stopWatch: {
            autoCreate: true,
            selector: 'stopWatch',
            xtype: 'stopWatch'
        },
        mainViewport: 'mainViewport'
    },

    control: {
        "stopWatch #startStopWatch": {
            click: 'onStartStopWatch'
        },
        "stopWatch #resetStopWatch": {
            click: 'onResetStopWatch'
        },
        "stopWatch #closeStopWatch": {
            click: 'onCloseStopWatch'
        }
    },

    onStartStopWatch: function(button, e, eOpts) {
        if (button.getText() == 'STOP') {
            this.getStopWatch().stopWatch.stop();
            button.setText("START");
        } else {
            this.getStopWatch().stopWatch.start();
            button.setText("STOP");
        }

    },

    onResetStopWatch: function(button, e, eOpts) {
        this.getStopWatch().stopWatch.reset();
        this.getStopWatch().body.update(this.getStopWatch().stopWatch.toString());

    },

    onCloseStopWatch: function(button, e, eOpts) {
        this.getStopWatch().hide();
    },

    onShowStopWatch: function() {
        console.log ("Showing stopwatch...");

        controller = this;

        var floatingPanel = this.getStopWatch();
        var updateClock = function (watch) {
            floatingPanel.body.update(watch.toString());
        };
        var watch = new Stopwatch(updateClock);

        floatingPanel.stopWatch = watch;
        var mainViewPort = controller.getMainViewport();
        mainViewPort.add(floatingPanel);

        floatingPanel.show(null, function() {
            floatingPanel.body.update(watch.toString());
        });



    },

    init: function(application) {
        application.on({
            showStopWatch: {
                fn: this.onShowStopWatch,
                scope: this
            }
        });
    }

});
