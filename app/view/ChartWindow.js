/*
 * File: app/view/ChartWindow.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.view.ChartWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.chartWindow',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.Date',
        'Ext.form.field.TextArea'
    ],

    border: false,
    cls: 'lanista-chart-measures-window',
    height: 510,
    id: 'chartWindow',
    width: 400,
    autoScroll: true,
    resizable: false,
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            listeners: {
                hide: {
                    fn: me.onChartWindowHide,
                    scope: me
                }
            },
            items: [
                {
                    xtype: 'form',
                    id: 'measuresTabForm',
                    autoScroll: true,
                    defaults: {
                        enableKeyEvents: true,
                        selectOnFocus: true
                    },
                    bodyPadding: 10,
                    items: [
                        {
                            xtype: 'datefield',
                            anchor: '100%',
                            id: 'record_date_local',
                            name: 'record_date_local',
                            format: 'd-m-Y'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'weight',
                            name: 'weight'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'trizeps',
                            name: 'trizeps'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'scapula',
                            name: 'scapula'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'auxiliar',
                            name: 'auxiliar'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'chest',
                            name: 'chest'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'sprailium',
                            name: 'sprailium'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'abs',
                            name: 'abs'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'quads',
                            name: 'quads'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'futrex',
                            name: 'futrex'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'height',
                            name: 'height'
                        },
                        {
                            xtype: 'textareafield',
                            anchor: '100%',
                            id: 'note',
                            name: 'note'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            disabled: true,
                            id: 'percentage',
                            name: 'percentage',
                            readOnly: true
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onMeasuresTabFormAfterRender,
                            scope: me
                        },
                        hide: {
                            fn: me.onMeasuresTabFormHide,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'form',
                    id: 'circumferencesTabForm',
                    autoScroll: true,
                    bodyPadding: 10,
                    listeners: {
                        hide: {
                            fn: me.onCircumferencesTabFormHide,
                            scope: me
                        },
                        afterrender: {
                            fn: me.onCircumferencesTabFormAfterRender,
                            scope: me
                        }
                    },
                    items: [
                        {
                            xtype: 'datefield',
                            anchor: '100%',
                            id: 'record_date_local_circ',
                            name: 'record_date_local_circ',
                            format: 'd-m-Y'
                        },
                        {
                            xtype: 'datefield',
                            anchor: '100%',
                            hidden: true,
                            name: 'record_date',
                            format: 'd-m-Y'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'arm_left',
                            name: 'arm_left'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'arm_right',
                            name: 'arm_right'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'chest_circ',
                            name: 'chest_circ'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            hidden: true,
                            name: 'chest'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'waist',
                            name: 'waist'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'umbilical',
                            name: 'umbilical'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'spina_ilica_ant',
                            name: 'spina_ilica_ant'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'wide_hips',
                            name: 'wide_hips'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'quads_left',
                            name: 'quads_left'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'quads_right',
                            name: 'quads_right'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'note_circ',
                            name: 'note_circ'
                        },
                        {
                            xtype: 'textareafield',
                            anchor: '100%',
                            hidden: true,
                            name: 'note'
                        }
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'container',
                    dock: 'bottom',
                    id: 'buttonContainerMes',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onChartWindowHide: function(component, eOpts) {
        component.destroy();
    },

    onMeasuresTabFormAfterRender: function(component, eOpts) {
        var fields = component.getForm().getFields(),
            activeTab = LanistaTrainer.app.getController('MeasuresController').getMeasuresPanel().down('#measureTabs').getActiveTab(),
            dateMeasure,
            item,
            storeMeasures,
            recordMeasures,
            fecha,
            today;

        item = LanistaTrainer.app.getController('MeasuresController').item;
        if (item)
            fields.getByKey('record_date_local').readOnly = true;
        else
            fields.getByKey('record_date_local').readOnly = false;

        if (!item){
            storeMeasures = Ext.getStore('MeasuresStore');
            recordMeasures = storeMeasures.first();

            fecha = new Date(recordMeasures.data.record_date_local);
            today = new Date();

            if (recordMeasures){
                if ((activeTab.id === 'measuresTab') && (Ext.Date.format(fecha, 'd-m-Y') !== Ext.Date.format(today, 'd-m-Y'))){
                    recordMeasures.data.abs = 0;
                    recordMeasures.data.auxiliar = 0;
                    recordMeasures.data.chest = 0;
                    recordMeasures.data.quads = 0;
                    recordMeasures.data.scapula = 0;
                    recordMeasures.data.sprailium = 0;
                    recordMeasures.data.trizeps = 0;
                    recordMeasures.data.sum = 0;
                }
                if ((activeTab.id === 'caliperTab') && (Ext.Date.format(fecha, 'd-m-Y') !== Ext.Date.format(today, 'd-m-Y'))) {
                    recordMeasures.data.weight = 0;
                    recordMeasures.data.height = 0;
                    recordMeasures.data.futrex = 0;
                }
                component.loadRecord(recordMeasures);
            }

            newDate = new Date();
            fields.getByKey('record_date_local').setValue(newDate);
            component.up('#chartWindow').down('#saveMeasureButton').show();
            if (component.up('#chartWindow').down('#deleteMeasureButton'))
                component.up('#chartWindow').down('#deleteMeasureButton').hide();
        }

        fields.getByKey('record_date_local').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.DATE);
        dateMeasure = new Date(fields.getByKey('record_date_local').getValue());
        fields.getByKey('record_date_local').setValue(Ext.Date.format(dateMeasure, 'd-m-Y'));

        if (activeTab.id === 'measuresTab'){
            fields.getByKey('trizeps').hide();
            fields.getByKey('scapula').hide();
            fields.getByKey('auxiliar').hide();
            fields.getByKey('chest').hide();
            fields.getByKey('sprailium').hide();
            fields.getByKey('abs').hide();
            fields.getByKey('quads').hide();
            fields.getByKey('percentage').disabled = true;

            fields.getByKey('weight').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.FORM_PLANEXRCISE_WEIGHT);
            fields.getByKey('height').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.BODY_SIZE);
            fields.getByKey('futrex').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.BODY_FAT);
            fields.getByKey('note').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.FORM_CUSTOMER_DATA_NOTE);
            fields.getByKey('percentage').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.CALIPER );
        }
        else{
            if (activeTab.id === 'caliperTab'){
                fields.getByKey('weight').hide();
                fields.getByKey('height').hide();
                fields.getByKey('futrex').hide();
                fields.getByKey('percentage').hide();

                fields.getByKey('trizeps').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.TRICEPS);
                fields.getByKey('scapula').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.SCAPULA);
                fields.getByKey('auxiliar').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.ARMPIT);
                fields.getByKey('chest').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.FILTER_CHEST);
                fields.getByKey('sprailium').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.ILIAC_CREAT);
                fields.getByKey('abs').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.FILTER_AB);
                fields.getByKey('quads').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.QUADS);
                fields.getByKey('note').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.FORM_CUSTOMER_DATA_NOTE);
            }
        }

        fields.each(function(field)
                    {field.on('change',function(f,n,o)
                              {
                                  if (!LanistaTrainer.app.getController('MeasuresController').item) return;
                                  component.up('#chartWindow').down('#saveMeasureButton').show();
                                  component.up('#chartWindow').down('#cancelMeasureButton').show();
                                  if (component.up('#chartWindow').down('#deleteMeasureButton'))
                                      component.up('#chartWindow').down('#deleteMeasureButton').hide();
                              }
                             );
                     /*field.on('keypress',function(f,e,opts)
                              {
                                  //f: field;  e: key pressed;  o: options
                                  if(e.getKey() == e.ENTER){
                                      if (!LanistaTrainer.app.getController('MeasuresController').item) return;
                                      if ( !component.up('#chartWindow').down('#saveMeasureButton').hidden )
                                          component.up('#chartWindow').down('#saveMeasureButton').fireEvent('click', function() {
                                              f.focus();
                                          });
                                  }
                              }
                             );*/
                    }
                   );
    },

    onMeasuresTabFormHide: function(component, eOpts) {
        component.destroy();
    },

    onCircumferencesTabFormHide: function(component, eOpts) {
        component.destroy();
    },

    onCircumferencesTabFormAfterRender: function(component, eOpts) {
        var fields = component.getForm().getFields(),
            dateMeasure,
            item,
            storeMeasures,
            recordMeasures,
            newDate;

        item = LanistaTrainer.app.getController('MeasuresController').item;
        if (item)
            fields.getByKey('record_date_local_circ').readOnly = true;
        else
            fields.getByKey('record_date_local_circ').readOnly = false;

        if (!item){
            storeMeasures = Ext.getStore('CircumferencesStore');
            recordMeasures = storeMeasures.first();

            if (recordMeasures){
                recordMeasures.data.weight = 0;
                recordMeasures.data.height = 0;
                recordMeasures.data.futrex = 0;
                recordMeasures.data.percentage = 0;
                component.loadRecord(recordMeasures);
            }

            newDate = new Date();
            fields.getByKey('record_date_local_circ').setValue(newDate);
            component.up('#chartWindow').down('#saveMeasureButton').show();
            if (component.up('#chartWindow').down('#deleteMeasureButton'))
                component.up('#chartWindow').down('#deleteMeasureButton').hide();
        }

        fields.getByKey('record_date_local_circ').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.DATE);
        dateMeasure = new Date(fields.getByKey('record_date_local_circ').getValue());
        fields.getByKey('record_date_local_circ').setValue(Ext.Date.format(dateMeasure, 'd-m-Y'));

        fields.getByKey('arm_left').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.ARM_LEFT);
        fields.getByKey('arm_right').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.ARM_RIGHT);
        fields.getByKey('chest_circ').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.FILTER_CHEST);
        fields.getByKey('waist').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.WAIST);
        fields.getByKey('umbilical').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.NAVEL);
        fields.getByKey('spina_ilica_ant').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.ILIAC_CREAT);
        fields.getByKey('wide_hips').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.HIP);
        fields.getByKey('quads_left').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.THING_LEFT);
        fields.getByKey('quads_right').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.THING_RIGHT);
        fields.getByKey('note_circ').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.FORM_CUSTOMER_DATA_NOTE);

        fields.each(function(field)
                    {field.on('change',function(f,n,o)
                              {
                                  if (!LanistaTrainer.app.getController('MeasuresController').item) return;
                                  component.up('#chartWindow').down('#saveMeasureButton').show();
                                  component.up('#chartWindow').down('#cancelMeasureButton').show();
                                  if (component.up('#chartWindow').down('#deleteMeasureButton'))
                                      component.up('#chartWindow').down('#deleteMeasureButton').hide();
                              }
                             );
                     /*field.on('keypress',function(f,e,opts)
                              {
                                  //f: field;  e: key pressed;  o: options
                                  if(e.getKey() == e.ENTER){
                                      if (!LanistaTrainer.app.getController('MeasuresController').item) return;
                                      if ( !component.up('#chartWindow').down('#saveMeasureButton').hidden )
                                          component.up('#chartWindow').down('#saveMeasureButton').fireEvent('click', function() {
                                              f.focus();
                                          });
                                  }
                              }
                             );*/
                    }
                   );
    }

});