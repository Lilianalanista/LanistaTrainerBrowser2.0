/*
 * File: app/view/FavoritesPanel.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.view.FavoritesPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.favoritesPanel',

    requires: [
        'Ext.view.View',
        'Ext.XTemplate',
        'Ext.panel.Tool'
    ],

    border: false,
    height: 250,
    id: 'favoritesPanel',
    style: 'padding-top: 120px;',
    width: 400,
    layout: 'fit',
    frameHeader: false,
    header: false,
    headerPosition: 'bottom',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            defaultDockWeights: {
                top: {
                    render: 1,
                    visual: 1
                },
                left: {
                    render: 3,
                    visual: 5
                },
                right: {
                    render: 5,
                    visual: 7
                },
                bottom: {
                    render: 7,
                    visual: 3
                }
            },
            items: [
                {
                    xtype: 'dataview',
                    cls: 'lanista-view-favorites',
                    height: 250,
                    id: 'viewFavorites',
                    tpl: [
                        '<tpl for=".">',
                        '    <div class="customer-item">',
                        '        <div class="lanista-icon lanista-favorites-delete"></div>',
                        '        <div class="customer-list-image customer-info-item" id="customerItemInfo" style="background-image: url({[Ext.ux.ConfigManager.getRoot() + \'/tpmanager/img/p/\' + values[\'id\'] + \'_photo.jpg\']});"></div>',
                        '        <div class="customer-list-background customer-info-item" id="customerItemInfo" style="customer-image">j</div>',
                        '        <div class="customer-list-firstname">{[values[\'first_name\']]}</div>        		',
                        '        <div class="customer-list-lastname">{[values[\'last_name\']]}</div>',
                        '    </div>',
                        '</tpl>  ',
                        ''
                    ],
                    width: 400,
                    itemSelector: 'div.customer-item',
                    listeners: {
                        hide: {
                            fn: me.onDataviewHide1,
                            scope: me
                        },
                        afterrender: {
                            fn: me.onViewFavoritesAfterRender1,
                            scope: me
                        },
                        itemclick: {
                            fn: me.onViewFavoritesItemClick1,
                            scope: me
                        }
                    }
                }
            ],
            tools: [
                {
                    xtype: 'tool',
                    id: 'previousFavorites',
                    type: 'left'
                },
                {
                    xtype: 'tool',
                    id: 'nextFavorites',
                    type: 'right'
                }
            ]
        });

        me.callParent(arguments);
    },

    onDataviewHide1: function(component, eOpts) {
        component.destroy();
    },

    onViewFavoritesAfterRender1: function(component, eOpts) {

        var el = component.el,
            classValue;

        //--------------------------------------------
        //  Customers favorites
        //--------------------------------------------
        el.on(
            'click', function(e,t) {
                if ( t.id === 'customerItemInfo' )
                    el.addCls('item-not-clicked');
                if (!t.parentNode.classList.contains('lanista-list-itemrounded-selected-delete')){
                    classValue = t.parentNode.className;
                    classValue = classValue.replace(' lanista-list-itemrounded-deleting','', 'g');
                    t.parentNode.className = classValue;
                }
            },
            this, {delegate: '.customer-info-item'});
        el.on(
            'mouseover', function(e,t) {
                                if (!t.parentNode.classList.contains('lanista-list-itemrounded-selected-delete'))
                                {
                                    el.removeCls('item-not-clicked');
                                    el.addCls('item-clicked');
                                }
                            },
            this,{ delegate: '.customer-info-item'});
        el.on(
            'mouseout', function(e,t) {
                                if ( t.id === 'customerItemInfo' )
                                {
                                    el.removeCls('item-clicked');
                                    el.addCls('item-not-clicked');
                                }
                            },
            this,{delegate: '.customer-info-item'});

        el.on(
            'mouseover', function(e,t) {
                Ext.get(t).dom.children[0].innerHTML = 'u';
                classValue = Ext.get(t).dom.children[0].className;
                Ext.get(t).dom.children[0].className = classValue + ' lanista-color-no-delete';
              },
            this,{ delegate: '.customer-item'});
        el.on(
            'mouseout', function(e,t) {
                Ext.get(t).dom.children[0].innerHTML = '';
                classValue = Ext.get(t).dom.children[0].className;
                classValue = classValue.replace('lanista-color-no-delete','','g');
                classValue = classValue.replace('lanista-color-no-delete','','g');
                Ext.get(t).dom.children[0].className = classValue;
            },
            this,{ delegate: '.customer-item'});

        //--------------------------------------------
        //  Deleting customers favorites
        //--------------------------------------------

        el.on(
            'click', function(e,t) {
                if (!t.parentNode.classList.contains('lanista-list-itemrounded-deleting'))
                    t.parentNode.className = t.parentNode.className + ' lanista-list-itemrounded-deleting';
                this.markDeleteFavorites(t, component);
           },
            this,{ delegate: '.lanista-favorites-delete'});
        el.on(
            'mouseover', function(e,t) {
                classValue = Ext.get(t).dom.className;
                classValue = classValue.replace(' item-not-clicked','','g');
                classValue = classValue.replace(' lanista-color-no-delete','','g');
                classValue = classValue.replace(' lanista-color-no-delete','','g');
                Ext.get(t).dom.className = classValue + ' item-clicked lanista-color-delete';
             },
            this,{ delegate: '.lanista-favorites-delete'});
        el.on(
            'mouseout', function(e,t) {
                classValue = Ext.get(t).dom.className;
                classValue = classValue.replace(' item-clicked','','g');
                classValue = classValue.replace(' lanista-color-delete','','g');
                Ext.get(t).dom.className = classValue + ' item-not-clicked lanista-color-no-delete';
           },
            this,{ delegate: '.lanista-favorites-delete'});

        //--------------------------------------------
        //   Exercises favorites
        //--------------------------------------------
        el.on(
            'click', function(e,t) {
                Ext.get(t).removeCls('item-no-clicked');
                if (!t.classList.contains('lanista-list-itemrounded-selected-delete')){
                    classValue = t.className;
                    classValue = classValue.replace(' lanista-list-itemrounded-deleting','', 'g');
                    t.className = classValue;
                }
            },
            this, {delegate: '.exercise-item'});
        el.on(
            'mouseover', function(e,t) {
                Ext.get(t).dom.children[0].innerHTML = 'u';
                classValue = Ext.get(t).dom.children[0].className;
                Ext.get(t).dom.children[0].className = classValue + ' lanista-color-no-delete';
                if (!t.classList.contains('lanista-list-itemrounded-selected-delete')){
                    Ext.get(t).addCls('item-clicked');
                    Ext.get(t).removeCls('item-no-clicked');
                }
            },
            this,{ delegate: '.exercise-item'});
        el.on(
            'mouseout', function(e,t) {
                Ext.get(t).dom.children[0].innerHTML = '';
                classValue = Ext.get(t).dom.children[0].className;
                classValue = classValue.replace(' lanista-color-no-delete','','g');
                classValue = classValue.replace(' lanista-color-no-delete','','g');
                Ext.get(t).dom.children[0].className = classValue;
                Ext.get(t).removeCls('item-clicked');
                Ext.get(t).addCls('item-no-clicked');
            },
            this,{ delegate: '.exercise-item'});


        //--------------------------------------------
        //  Deleting exercises favorites
        //--------------------------------------------
        el.on(
            'click', function(e,t) {
                if (!t.parentNode.classList.contains('lanista-list-itemrounded-deleting'))
                    t.parentNode.className = t.parentNode.className + ' lanista-list-itemrounded-deleting';
                this.markDeleteFavorites(t, component);
           },
            this,{ delegate: '.lanista-item-delete'});
        el.on(
            'mouseover', function(e,t) {
                classValue = Ext.get(t).dom.className;
                classValue = classValue.replace(' item-not-clicked','','g');
                classValue = classValue.replace(' lanista-color-no-delete','','g');
                classValue = classValue.replace(' lanista-color-no-delete','','g');
                Ext.get(t).dom.className = classValue + ' item-clicked lanista-color-delete';
             },
            this,{ delegate: '.lanista-item-delete'});
        el.on(
            'mouseout', function(e,t) {
                classValue = Ext.get(t).dom.className;
                classValue = classValue.replace(' item-clicked','','g');
                classValue = classValue.replace(' lanista-color-delete','','g');
                Ext.get(t).dom.className = classValue + ' item-not-clicked lanista-color-no-delete';
           },
            this,{ delegate: '.lanista-item-delete'});








    },

    onViewFavoritesItemClick1: function(dataview, record, item, index, e, eOpts) {
        if ( LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'CustomersPanel'){
            setTimeout(function() {
                if (!Ext.get(item).dom.classList.contains('lanista-list-itemrounded-deleting')) {
                    LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1], function() {
                        LanistaTrainer.app.currentCustomer = record;
                        LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'CustomerExercisesPanel';
                        LanistaTrainer.app.fireEvent('showCustomerExercisesPanel');
                    });
                }
            },100);
        }
        if ( LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 2] === 'ExercisesPanel'){
            setTimeout(function() {
                if (!Ext.get(item).dom.classList.contains('lanista-list-itemrounded-deleting')) {
                    LanistaTrainer.app.getController('FavoritesController').getFavoritesPanel().addCls ('blured');
                    LanistaTrainer.app.fireEvent('showExercisePanel', record, '');
                }
            },100);
        }
    },

    markDeleteFavorites: function(t, component) {
        var favoritesToDelete,
            favoritesToDeleteArray = [],
            pos;

        favoritesToDelete = LanistaTrainer.app.getController('FavoritesController').favoritesToDelete ? LanistaTrainer.app.getController('FavoritesController').favoritesToDelete : "";
        favoritesToDelete = new String(favoritesToDelete);

        if (favoritesToDelete.valueOf()){
            if (favoritesToDelete.indexOf(",") > 0)
                favoritesToDeleteArray = favoritesToDelete.split(",");
            else
                favoritesToDeleteArray[0] = favoritesToDelete.valueOf();
        }

        pos = favoritesToDeleteArray.indexOf(component.getRecord(t.parentNode).data.id.toString());
        if (pos >= 0){
            classValue = t.parentNode.className;
            classValue = classValue.replace('lanista-list-itemrounded-selected-delete','', 'g');
            t.parentNode.className = classValue;

            favoritesToDeleteArray.splice(pos,1);
            favoritesToDelete = "";
            if (favoritesToDeleteArray.length > 0){
                favoritesToDelete = favoritesToDeleteArray[0];
                for (var i = 1; i < favoritesToDeleteArray.length; i++){
                    favoritesToDelete = favoritesToDelete + ',' + favoritesToDeleteArray[i];
                }
            }
            LanistaTrainer.app.getController('FavoritesController').favoritesToDelete = favoritesToDelete;
            console.log(favoritesToDeleteArray.length);
            if (favoritesToDeleteArray.length <= 0)
                LanistaTrainer.app.getController('FavoritesController').getRightCommandPanel().getComponent('removeCustomerFavoritesButton').hide();
        }
        else{
            t.parentNode.className = t.parentNode.className + ' lanista-list-itemrounded-selected-delete';
            LanistaTrainer.app.getController('FavoritesController').favoritesToDelete = favoritesToDelete.valueOf() ? favoritesToDelete + ',' + component.getRecord(t.parentNode).data.id : component.getRecord(t.parentNode).data.id;
            LanistaTrainer.app.getController('FavoritesController').showCommands();
            LanistaTrainer.app.getController('FavoritesController').getRightCommandPanel().getComponent('removeCustomerFavoritesButton').show();

        }

    }

});