/*
 * File: app/view/RegisterPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.view.RegisterPanel', {
    extend: 'Ext.form.Panel',
    alias: 'widget.registerpanel',

    requires: [
        'LanistaTrainer.view.RegisterPanelViewModel',
        'Ext.form.field.Display',
        'Ext.form.FieldSet',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Checkbox'
    ],

    viewModel: {
        type: 'registerpanel'
    },
    cls: '.lanista-registration',
    height: 250,
    id: 'registerPanel',
    width: 400,
    bodyPadding: 10,
    defaultListenerScope: true,

    listeners: {
        afterrender: 'onRegisterPanelAfterRender'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                items: [
                    {
                        xtype: 'container',
                        cls: 'lanista-register-welcome',
                        id: 'containerSetReg',
                        items: [
                            {
                                xtype: 'displayfield',
                                cls: 'lanista-label-welcome',
                                id: 'welcomeLabel',
                                value: 'Display Field'
                            },
                            {
                                xtype: 'fieldset',
                                cls: 'lanista-fieldset_register',
                                items: [
                                    {
                                        xtype: 'combobox',
                                        cls: 'lanista-field-register',
                                        id: 'emailAdresse1',
                                        name: 'emailAdresse1'
                                    },
                                    {
                                        xtype: 'combobox',
                                        cls: 'lanista-field-register',
                                        id: 'emailAdresse2',
                                        name: 'emailAdresse2'
                                    },
                                    {
                                        xtype: 'textfield',
                                        cls: 'lanista-field-register',
                                        id: 'passwordReg',
                                        name: 'passwordReg',
                                        inputType: 'password'
                                    },
                                    {
                                        xtype: 'textfield',
                                        cls: 'lanista-field-register',
                                        id: 'passwordReg1',
                                        name: 'passwordReg1',
                                        inputType: 'password'
                                    },
                                    me.processCustomer_languageReg({
                                        xtype: 'combobox',
                                        cls: 'lanista-field-register',
                                        id: 'customer_languageReg',
                                        name: 'customer_languageReg',
                                        editable: false,
                                        enableKeyEvents: true
                                    }),
                                    {
                                        xtype: 'checkboxfield',
                                        id: 'agb',
                                        name: 'agb',
                                        boxLabel: 'Box Label'
                                    }
                                ]
                            }
                        ]
                    }
                ]
            };
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processCustomer_languageReg: function(config) {
        var server =	'http://' + window.location.host,
            root =		Ext.ux.ConfigManager.getRoot() + '/LanistaTrainerBrowser2.0/';

        config.tpl = Ext.create("Ext.XTemplate",
                                '<tpl for="."><div class="x-boundlist-item"><img src=' + server + root + 'resources/images/flags/{image} /> {LanguageName}</div></tpl>');

        config.displayTpl = Ext.create("Ext.XTemplate",
                                       '<tpl for=".">{LanguageName}</tpl>');

        config.valueField = 'IdLanguage';

        return config;
    },

    onRegisterPanelAfterRender: function(component, eOpts) {
            var languagesStore,
                fields = component.getForm().getFields();

            //component.down('#welcomeLabel').setHtml(component.strLines(Ext.ux.LanguageManager.TranslationArray.FORM_TITLE_REGISTER));
            component.down('#welcomeLabel').setHtml(Ext.ux.LanguageManager.TranslationArray.FORM_TITLE_REGISTER);

            languagesStore = Ext.create('Ext.data.Store', {
                             fields: ['image', 'LanguageName', 'IdLanguage'],
                             data : [
                                        {"image": "es.png", "LanguageName":"Espa√±ol", "IdLanguage":"ES"},
                                        {"image": "de.png", "LanguageName":"Deutsch", "IdLanguage":"DE"},
                                        {"image": "gb.png", "LanguageName":"English", "IdLanguage":"EN"}
                                     ]
             });
            fields.getByKey('customer_languageReg').bindStore(languagesStore);
            languagesStore.load();
            fields.getByKey('customer_languageReg').setValue(Ext.ux.LanguageManager.getLanguage());
        /*
            fields.getByKey('emailAdresse1').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.USER_EMAIL);
            fields.getByKey('passwordReg').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.USER_PASSWORD);
            fields.getByKey('passwordReg1').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.USER_PASSWORD_CONFIRMATION);
            fields.getByKey('emailAdresse2').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.USER_EMAIL_REP);
            fields.getByKey('customer_languageReg').setFieldLabel(Ext.ux.LanguageManager.TranslationArray.FORM_CUSTOMER_LANGUAGE);
            fields.getByKey('agb').setBoxLabel(Ext.ux.LanguageManager.TranslationArray.FORM_LABEL_LA);
        */
            fields.getByKey('agb').setBoxLabel(Ext.ux.LanguageManager.TranslationArray.FORM_LABEL_LA);
            document.getElementsByName("emailAdresse1")[0].placeholder = Ext.ux.LanguageManager.TranslationArray.USER_EMAIL;
            document.getElementsByName("passwordReg")[0].placeholder = Ext.ux.LanguageManager.TranslationArray.USER_PASSWORD;
            document.getElementsByName("passwordReg1")[0].placeholder = Ext.ux.LanguageManager.TranslationArray.USER_PASSWORD_CONFIRMATION;
            document.getElementsByName("emailAdresse2")[0].placeholder = Ext.ux.LanguageManager.TranslationArray.USER_EMAIL_REP;
            document.getElementsByName("customer_languageReg")[0].placeholder = Ext.ux.LanguageManager.TranslationArray.FORM_CUSTOMER_LANGUAGE;
            //document.getElementsByName("agb")[0].placeholder = Ext.ux.LanguageManager.TranslationArray.COMPANY_PHONE_NR;

    },

    strLines: function(value) {
        var returnValue = '',
            strSplit = [];
            strSplitII = [];

            if (Ext.isArray(value)){
                for (var i = 0; i < value.length; i++){
                    strSplit = value[i].split(",");
                    for (var j = 0; j < strSplit.length; j++) {
                        strSplitII = strSplit[j].split("<br>");
                        for (var k = 0; k < strSplitII.length; k++) {
                            returnValue = returnValue + strSplitII[k].trim().substr(0,1).toUpperCase() + strSplitII[k].trim().substr(1) + '.<br>';
                        }
                        strSplitII = [];
                    }
                    strSplit = [];
                }
            }
            else{
                strSplit = value.split(",");
                for (var j = 0; j < strSplit.length; j++) {
                    strSplitII = strSplit[j].split("<br>");
                    for (var k = 0; k < strSplitII.length; k++) {
                        returnValue = returnValue + strSplitII[k].trim().substr(0,1).toUpperCase() + strSplitII[k].trim().substr(1) + '.<br>';
                    }
                    strSplitII = [];
                }
            }

            return returnValue;
    }

});