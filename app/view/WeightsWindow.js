/*
 * File: app/view/WeightsWindow.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.view.WeightsWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.weightsWindow',

    requires: [
        'Ext.form.FieldSet',
        'Ext.form.field.Number',
        'Ext.form.RadioGroup',
        'Ext.form.field.Radio'
    ],

    height: 250,
    id: 'weightsWindow',
    width: 520,
    resizable: false,
    bodyPadding: 10,
    expandOnShow: false,
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'fieldset',
                    id: 'weightKilos',
                    title: 'My Fields',
                    items: [
                        {
                            xtype: 'numberfield',
                            cls: 'lanista-weights-input',
                            id: 'protocollKgValue',
                            enableKeyEvents: true,
                            selectOnFocus: true,
                            decimalSeparator: ','
                        }
                    ]
                },
                {
                    xtype: 'fieldset',
                    id: 'weightMeasure',
                    title: 'My Fields',
                    items: [
                        {
                            xtype: 'numberfield',
                            cls: 'lanista-weights-input',
                            id: 'protocollTrainingValue',
                            enableKeyEvents: true,
                            allowExponential: false,
                            autoStripChars: true,
                            decimalSeparator: ','
                        },
                        {
                            xtype: 'radiogroup',
                            cls: 'lanista-weights-rb',
                            height: 85,
                            id: 'radioWeight',
                            width: 150,
                            layout: {
                                type: 'vbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'radiofield',
                                    cls: 'lanista-weights-echrb',
                                    height: 25,
                                    name: 'rb',
                                    boxLabel: 'Rep.',
                                    inputValue: '0'
                                },
                                {
                                    xtype: 'radiofield',
                                    cls: 'lanista-weights-echrb',
                                    height: 25,
                                    name: 'rb',
                                    boxLabel: 'Min.',
                                    inputValue: '2'
                                },
                                {
                                    xtype: 'radiofield',
                                    cls: 'lanista-weights-echrb',
                                    height: 25,
                                    name: 'rb',
                                    boxLabel: 'Sec.',
                                    inputValue: '1'
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'fieldset',
                    id: 'weightBottons'
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onWeightsWindowAfterRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onWeightsWindowAfterRender: function(component, eOpts) {

        this.down ( '#weightBottons' ).add(  Ext.create('LanistaTrainer.view.LanistaButton', {
                    itemId: 'saveProtocollButton',
                    glyph: '65@Lanista Icons', //A
                    cls: [
                        'lanista-command-button',
                        'lanista-command-button-green',
                        'lanista-saveProtocollButton'
                    ],
                    listeners: {
                        click: {
                            scope: this,
                            fn: function(){
                                var panelWeight,
                                    panelTraining = Ext.ComponentQuery.query("viewport")[0].down("#trainingPicker"),
                                    infoProtocoll = [],
                                    valueWeight,
                                    setObjectLanista;

                                if (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1] === 'ExercisePanel'){
                                    infoProtocoll[0] = component.down('#protocollKgValue').getValue();
                                    infoProtocoll[1] = component.down('#protocollTrainingValue').getValue();
                                    infoProtocoll[2] = component.down('#radioWeight').getValue().rb;
                                    LanistaTrainer.app.fireEvent('planExerciseRecordChanged', infoProtocoll,'','');
                                }

                                if (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1] === 'PlanPanel'){
                                    panelWeight = Ext.ComponentQuery.query("viewport")[0].down("#weightPicker");
                                    valueWeight = panelWeight ? panelWeight.getValue() : 0;
                                    valueWeight = valueWeight !== 0 ? parseFloat(valueWeight.substring(0, valueWeight.indexOf(' ')).replace(",", ".")) : 0;
                                    infoProtocoll[0] = valueWeight;
                                    infoProtocoll[1] = panelTraining.getValue();
                                    infoProtocoll[2] = panelTraining.unit;
                                    LanistaTrainer.app.fireEvent('planExerciseRecordChanged', infoProtocoll,'','');
                                }

                                if (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1] === 'DefaultPlanValuesPanel'){
                                    setObjectLanista = Ext.ComponentQuery.query("viewport")[0].down("#setObjectLanista");
                                    infoProtocoll[0] = setObjectLanista.getValue();
                                    infoProtocoll[1] = panelTraining.getValue();
                                    infoProtocoll[2] = panelTraining.unit;
                                    LanistaTrainer.app.fireEvent('defaultValuesChanged', infoProtocoll,'','');
                                }

                                component.close();

                                /*if (panelWeight){
                                    panelWeight.removeAll();
                                    panelWeight.hide();
                                }

                                if (setObjectLanista){
                                    setObjectLanista.removeAll();
                                    setObjectLanista.hide();
                                }

                                panelTraining.removeAll();
                                panelTraining.hide();
                                */
                            }
                        }
                    }
                })
        );


        if (LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1] !== 'DefaultPlanValuesPanel'){
            this.down ( '#weightBottons' ).add(  Ext.create('LanistaTrainer.view.LanistaButton', {
                        itemId: 'closeProtocollButton',
                        glyph: '117@Lanista Icons', //u
                        cls: [
                            'lanista-command-button',
                            'lanista-command-button-red',
                            'lanista-closeProtocollButton'
                        ],
                        listeners: {
                            click: {
                                scope: this,
                                fn: function(){
                                    var panelWeight = Ext.ComponentQuery.query("viewport")[0].down("#weightPicker"),
                                        panelTraining = Ext.ComponentQuery.query("viewport")[0].down("#trainingPicker"),
                                        setObjectLanista = Ext.ComponentQuery.query("viewport")[0].down("#setObjectLanista");

                                    if (setObjectLanista){
                                        setObjectLanista.hide();
                                        LanistaTrainer.app.fireEvent('defaultValuesChanged', '','','');
                                    }


                                    if (panelWeight)
                                        panelWeight.hide();

                                    panelTraining.hide();
                                }
                            }
                        }
                    })
            );
        }

    }

});