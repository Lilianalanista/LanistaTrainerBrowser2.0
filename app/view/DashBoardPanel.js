/*
 * File: app/view/DashBoardPanel.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.view.DashBoardPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.dashBoardPanel',

    requires: [
        'Ext.container.Container'
    ],

    border: false,
    height: 250,
    id: 'dashBoardPanel',
    width: 400,
    header: false,

    layout: {
        type: 'hbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'container',
                    id: 'customersContainer',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'container',
                            id: 'titlesCustomersAlerts'
                        },
                        {
                            xtype: 'container',
                            id: 'customers',
                            layout: 'fit',
                            items: [
                                {
                                    xtype: 'container',
                                    id: 'activeCustomers',
                                    autoScroll: true,
                                    layout: {
                                        type: 'hbox',
                                        align: 'stretch'
                                    },
                                    listeners: {
                                        afterrender: {
                                            fn: me.onActiveCustomersAfterRender,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'container',
                                    id: 'birthdayCustomers',
                                    autoScroll: true,
                                    layout: {
                                        type: 'hbox',
                                        align: 'stretch'
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'container',
                    id: 'plansContainer',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'container',
                            id: 'titlesPlans'
                        },
                        {
                            xtype: 'container',
                            id: 'plans',
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'container',
                                    flex: 1,
                                    id: 'plansToExpire',
                                    autoScroll: true
                                },
                                {
                                    xtype: 'container',
                                    flex: 1,
                                    id: 'planExpired',
                                    autoScroll: true
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onActiveCustomersAfterRender: function(component, eOpts) {
        var el = component.el,
            ActiveCustomer,
            data,
            userId = localStorage.getItem("user_id"),
            idCustomer;

        el.on(
            'click', function(e,t) {
                    el.addCls('item-not-clicked');
                    idCustomer = t.id;
                    Ext.Ajax.request({
                        url: Ext.ux.ConfigManager.getRoot() +'/tpmanager/user/getuser',
                        method: 'get',
                        params: {id: idCustomer},
                        headers: {user_id: userId},
                        failure : function(result, request){
                            console.log( "There were problems in looking for user information" );
                        },
                        success: function(response, opts) {
                            try {
                                data = Ext.decode(response.responseText);
                                ActiveCustomer = Ext.create('LanistaTrainer.model.Customer', {
                                    id: data.user.id,
                                    first_name: data.user.first_name,
                                    last_name: data.user.last_name,
                                    email: data.user.email,
                                    street: data.user.street,
                                    city: data.user.city,
                                    zipcode: data.user.zipcode,
                                    country: data.user.country,
                                    note: data.user.note,
                                    phone_nr: data.user.phone_nr,
                                    birthday: data.user.birthday,
                                    gender: data.user.gender,
                                    deleted: data.user.deleted,
                                    image: data.user.image,
                                    last_change: data.user.last_change,
                                    language: data.user.language,
                                    sincronized: data.user.sincronized
                                });

                                LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1], function() {
                                    LanistaTrainer.app.currentCustomer = ActiveCustomer;
                                    LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'CustomerExercisesPanel';
                                    LanistaTrainer.app.fireEvent('showCustomerExercisesPanel');
                                });
                            }
                            catch( err ) {
                                Ext.Msg.alert('Problem', 'There were problems in looking for user information', Ext.emptyFn);
                            }
                        }
                    });
            },
            this, {delegate: '.lanista-active-customer'});
        el.on(
            'mouseover', function(e,t) {
                el.removeCls('item-not-clicked');
                el.addCls('item-clicked');
                            },
            this,{ delegate: '.lanista-active-customer'});
        el.on(
            'mouseout', function(e,t) {
                el.removeCls('item-clicked');
                el.addCls('item-not-clicked');
                            },
            this,{delegate: '.lanista-active-customer'});

    }

});