/*
 * File: app/view/Temporal.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.view.Temporal', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.temporal',

    requires: [
        'LanistaTrainer.view.TemporalViewModel',
        'Ext.grid.Panel',
        'Ext.grid.column.Template',
        'Ext.XTemplate',
        'Ext.view.Table',
        'Ext.grid.feature.Grouping',
        'Ext.tab.Panel',
        'Ext.tab.Tab',
        'LanistaTrainer.view.LanistaButton'
    ],

    viewModel: {
        type: 'temporal'
    },
    border: false,
    cls: 'lanista-customerexercises-panel',
    height: 580,
    hidden: true,
    id: 'customerExercisesPanel1',
    scrollable: true,
    width: 809,
    header: false,
    defaultListenerScope: true,

    layout: {
        type: 'hbox',
        align: 'stretch'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                items: [
                    {
                        xtype: 'gridpanel',
                        border: false,
                        cls: 'grid-customer-exercise',
                        id: 'grid2',
                        scrollable: true,
                        width: 300,
                        store: 'ProtocollStore',
                        columns: [
                            {
                                xtype: 'templatecolumn',
                                border: false,
                                draggable: false,
                                resizable: false,
                                toFrontOnShow: false,
                                tpl: [
                                    '<div class="lansita-header-customer-name"> ',
                                    '    <span class="weight"> {weight} Kgs. / {training} {[values.training_unit == 0 ? Ext.ux.LanguageManager.TranslationArray.REP : values.training_unit == 1 ? Ext.ux.LanguageManager.TranslationArray.MIN : Ext.ux.LanguageManager.TranslationArray.SEC]} </span> ',
                                    '</div>',
                                    ''
                                ],
                                width: 285,
                                dataIndex: 'string',
                                menuDisabled: true,
                                text: 'Titulo'
                            },
                            {
                                xtype: 'gridcolumn',
                                text: 'MyColumn9'
                            }
                        ],
                        viewConfig: me.processGv1({
                            id: 'gv1',
                            width: 285,
                            stripeRows: false
                        }),
                        features: [
                            {
                                ftype: 'grouping',
                                groupHeaderTpl: [
                                    '<tpl for=".">',
                                    '    <input type="image" src="{[ Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + /LanistaTrainerBrowser2.0/]}resources/images/previews/{[Ext.getStore("ExerciseStore").getProxy().getRecord(values["name"]).ext_id]}_1.jpg" >',
                                    '    <input type="image" src="{[ Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + /LanistaTrainerBrowser2.0/]}resources/images/previews/{[Ext.getStore("ExerciseStore").getProxy().getRecord(values["name"]).ext_id]}_2.jpg" ></div>',
                                    '</tpl>',
                                    ''
                                ]
                            }
                        ],
                        listeners: {
                            afterrender: 'onGrid2AfterRender'
                        }
                    },
                    {
                        xtype: 'tabpanel',
                        flex: 1,
                        items: [
                            me.processTab3({
                                xtype: 'panel',
                                title: 'Tab 3'
                            })
                        ]
                    }
                ]
            };
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processGv1: function(config) {

        config.plugins = [ Ext.create('Ext.ux.PreviewPlugin',
                               {
                                    ptype: 'preview',
                                    bodyField: 'coatchingnotes_' + Ext.ux.LanguageManager.lang,
                                    expanded: true,
                                    pluginId: 'preview'
                               })
                         ];

        return config;
    },

    processTab3: function(config) {
        config.items = [{
                            xtype: 'lanistaButton',
                            title: 'Foo'
                        }, {
                            title: 'Bar',
                            tabConfig: {
                                title: 'Custom Title',
                                tooltip: 'A button tooltip'
                            }
                        }];


        return config;
    },

    onGrid2AfterRender: function(component, eOpts) {
        console.log('datos...');
    }

});