/*
 * File: app/view/MeasuresPanel.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.view.MeasuresPanel', {
    extend: 'Ext.container.Container',
    alias: 'widget.measuresPanel',

    requires: [
        'Ext.tab.Panel',
        'Ext.tab.Tab',
        'Ext.chart.Chart',
        'Ext.chart.series.Line',
        'Ext.chart.axis.Time',
        'Ext.chart.Legend',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Date'
    ],

    cls: 'lanista-measures-panel',
    height: 250,
    id: 'measuresPanel',
    width: 400,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'tabpanel',
                    id: 'measureTabs',
                    activeTab: 0,
                    items: [
                        {
                            xtype: 'panel',
                            id: 'measuresTab',
                            title: 'My Tab',
                            items: [
                                {
                                    xtype: 'chart',
                                    height: 550,
                                    id: '',
                                    itemId: 'measuresChat',
                                    width: 1200,
                                    animate: true,
                                    insetPadding: 20,
                                    store: 'MeasuresStore',
                                    series: [
                                        me.processMyLineSeries2({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'weight',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries1({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'height',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries21({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'futrex',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries3({
                                            type: 'line',
                                            axis: 'right',
                                            xField: 'record_date',
                                            yField: 'percentage',
                                            smooth: 3
                                        })
                                    ],
                                    axes: [
                                        {
                                            type: 'Time',
                                            fields: [
                                                'record_date'
                                            ],
                                            adjustEnd: false,
                                            position: 'bottom',
                                            dateFormat: 'd-m-Y',
                                            step: [
                                                Ext.Date.MONTH,
                                                3
                                            ]
                                        },
                                        {
                                            type: 'Numeric',
                                            fields: [
                                                'weight',
                                                'height',
                                                'futrex'
                                            ],
                                            title: 'Numeric Axis',
                                            adjustMaximumByMajorUnit: true,
                                            minimum: 0,
                                            position: 'left'
                                        },
                                        {
                                            type: 'Numeric',
                                            fields: [
                                                'percentage'
                                            ],
                                            position: 'right',
                                            title: 'Numeric Axis',
                                            adjustMaximumByMajorUnit: true,
                                            minimum: 0
                                        }
                                    ],
                                    legend: {
                                        position: 'top'
                                    }
                                },
                                {
                                    xtype: 'gridpanel',
                                    height: 550,
                                    hidden: true,
                                    itemId: 'measuresTable',
                                    width: 1200,
                                    collapseFirst: false,
                                    frameHeader: false,
                                    header: false,
                                    enableColumnHide: false,
                                    enableColumnMove: false,
                                    enableColumnResize: false,
                                    sortableColumns: false,
                                    store: 'MeasuresStore',
                                    columns: [
                                        {
                                            xtype: 'datecolumn',
                                            align: 'center',
                                            dataIndex: 'record_date',
                                            flex: 1,
                                            format: 'd-m-y'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            align: 'center',
                                            dataIndex: 'height',
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            align: 'center',
                                            dataIndex: 'weight',
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender2,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            resizable: false,
                                            align: 'center',
                                            dataIndex: 'futrex',
                                            hideable: false,
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender1,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            align: 'center',
                                            dataIndex: 'percentage',
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender3,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ],
                                    listeners: {
                                        itemclick: {
                                            fn: me.onMeasuresTableItemClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            id: 'caliperTab',
                            title: 'My Tab',
                            items: [
                                {
                                    xtype: 'chart',
                                    height: 550,
                                    itemId: 'measuresChat',
                                    width: 1200,
                                    animate: true,
                                    insetPadding: 20,
                                    store: 'MeasuresStore',
                                    series: [
                                        me.processMyLineSeries4({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'trizeps',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries5({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'scapula',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries6({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'auxiliar',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries7({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'chest',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries8({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'sprailium',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries9({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'abs',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries10({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'quads',
                                            smooth: 3
                                        })
                                    ],
                                    axes: [
                                        {
                                            type: 'Time',
                                            fields: [
                                                'record_date'
                                            ],
                                            adjustEnd: false,
                                            position: 'bottom',
                                            dateFormat: 'd-m-Y',
                                            step: [
                                                Ext.Date.MONTH,
                                                3
                                            ]
                                        },
                                        {
                                            type: 'Numeric',
                                            fields: [
                                                'trizeps',
                                                'scapula',
                                                'auxiliar',
                                                'chest',
                                                'sprailium',
                                                'abs',
                                                'quads'
                                            ],
                                            title: 'Numeric Axis',
                                            adjustMaximumByMajorUnit: true,
                                            minimum: 0,
                                            position: 'left'
                                        }
                                    ],
                                    legend: {
                                        position: 'top'
                                    }
                                },
                                {
                                    xtype: 'gridpanel',
                                    height: 550,
                                    hidden: true,
                                    itemId: 'measuresTable',
                                    width: 1200,
                                    collapseFirst: false,
                                    frameHeader: false,
                                    header: false,
                                    enableColumnHide: false,
                                    enableColumnMove: false,
                                    enableColumnResize: false,
                                    sortableColumns: false,
                                    store: 'MeasuresStore',
                                    columns: [
                                        {
                                            xtype: 'datecolumn',
                                            align: 'center',
                                            dataIndex: 'record_date',
                                            flex: 1,
                                            format: 'd-m-y'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            align: 'center',
                                            dataIndex: 'trizeps',
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender4,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            align: 'center',
                                            dataIndex: 'scapula',
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender21,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            resizable: false,
                                            align: 'center',
                                            dataIndex: 'auxiliar',
                                            hideable: false,
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender11,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            resizable: false,
                                            align: 'center',
                                            dataIndex: 'chest',
                                            hideable: false,
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender1114,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            resizable: false,
                                            align: 'center',
                                            dataIndex: 'sprailium',
                                            hideable: false,
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender1113,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            resizable: false,
                                            align: 'center',
                                            dataIndex: 'abs',
                                            hideable: false,
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender1112,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            resizable: false,
                                            align: 'center',
                                            dataIndex: 'quads',
                                            hideable: false,
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender111,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            resizable: false,
                                            align: 'center',
                                            dataIndex: 'sum',
                                            hideable: false,
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender1111,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            align: 'center',
                                            dataIndex: 'percentage',
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender31,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ],
                                    listeners: {
                                        itemclick: {
                                            fn: me.onMeasuresTableItemClick1,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            id: 'circumferencesTab',
                            title: 'My Tab',
                            items: [
                                {
                                    xtype: 'chart',
                                    height: 550,
                                    itemId: 'measuresChat',
                                    width: 1200,
                                    animate: true,
                                    insetPadding: 20,
                                    store: 'CircumferencesStore',
                                    series: [
                                        me.processMyLineSeries4({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'arm_left',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries5({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'arm_right',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries6({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'chest',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries7({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'waist',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries8({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'umbilical',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries9({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'ilica_ant',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries10({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'hips',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries10({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'quads_left',
                                            smooth: 3
                                        }),
                                        me.processMyLineSeries10({
                                            type: 'line',
                                            axis: 'left',
                                            xField: 'record_date',
                                            yField: 'quads_right',
                                            smooth: 3
                                        })
                                    ],
                                    axes: [
                                        {
                                            type: 'Time',
                                            fields: [
                                                'record_date'
                                            ],
                                            adjustEnd: false,
                                            position: 'bottom',
                                            dateFormat: 'd-m-Y',
                                            step: [
                                                Ext.Date.MONTH,
                                                3
                                            ]
                                        },
                                        {
                                            type: 'Numeric',
                                            fields: [
                                                'arm_left',
                                                'arm_right',
                                                'chest',
                                                'waist',
                                                'umbilical',
                                                'ilica_ant',
                                                'hips',
                                                'quads_left',
                                                'quads_right'
                                            ],
                                            title: 'Numeric Axis',
                                            adjustMaximumByMajorUnit: true,
                                            minimum: 0,
                                            position: 'left'
                                        }
                                    ],
                                    legend: {
                                        position: 'top'
                                    }
                                },
                                {
                                    xtype: 'gridpanel',
                                    height: 550,
                                    hidden: true,
                                    itemId: 'measuresTable',
                                    width: 1200,
                                    collapseFirst: false,
                                    frameHeader: false,
                                    header: false,
                                    enableColumnHide: false,
                                    enableColumnMove: false,
                                    enableColumnResize: false,
                                    sortableColumns: false,
                                    store: 'CircumferencesStore',
                                    columns: [
                                        {
                                            xtype: 'datecolumn',
                                            align: 'center',
                                            dataIndex: 'record_date',
                                            flex: 1,
                                            format: 'd-m-y'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            align: 'center',
                                            dataIndex: 'arm_left',
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender41,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            align: 'center',
                                            dataIndex: 'arm_right',
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender211,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            resizable: false,
                                            align: 'center',
                                            dataIndex: 'chest',
                                            hideable: false,
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender112,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            resizable: false,
                                            align: 'center',
                                            dataIndex: 'waist',
                                            hideable: false,
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender11141,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            resizable: false,
                                            align: 'center',
                                            dataIndex: 'umbilical',
                                            hideable: false,
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender11131,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            resizable: false,
                                            align: 'center',
                                            dataIndex: 'ilica_ant',
                                            hideable: false,
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender11121,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            resizable: false,
                                            align: 'center',
                                            dataIndex: 'hips',
                                            hideable: false,
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender1115,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            resizable: false,
                                            align: 'center',
                                            dataIndex: 'quads_left',
                                            hideable: false,
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender11111,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            align: 'center',
                                            dataIndex: 'quads_right',
                                            flex: 1,
                                            listeners: {
                                                afterrender: {
                                                    fn: me.onGridcolumnAfterRender311,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ],
                                    listeners: {
                                        itemclick: {
                                            fn: me.onMeasuresTableItemClick11,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            id: 'testsTab',
                            title: 'My Tab'
                        }
                    ]
                }
            ],
            listeners: {
                hide: {
                    fn: me.onMeasuresPanelHide,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    processMyLineSeries2: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries1: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;

    },

    processMyLineSeries21: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;

    },

    processMyLineSeries3: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;

    },

    processMyLineSeries4: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries5: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries6: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries7: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries8: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries9: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries10: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries4: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries5: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries6: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries7: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries8: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries9: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries10: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries10: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    processMyLineSeries10: function(config) {
        config.listeners = {
            itemclick : function(item) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.storeItem);
            }
        };
        return config;
    },

    onGridcolumnAfterRender: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.BODY_SIZE);
    },

    onGridcolumnAfterRender2: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.FORM_PLANEXRCISE_WEIGHT);
    },

    onGridcolumnAfterRender1: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.BODY_FAT);
    },

    onGridcolumnAfterRender3: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.FORM_PLANEXRCISE_WEIGHT);
    },

    onMeasuresTableItemClick: function(dataview, record, item, index, e, eOpts) {
        LanistaTrainer.app.getController('MeasuresController').showForm(record);
    },

    onGridcolumnAfterRender4: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.TRICEPS);
    },

    onGridcolumnAfterRender21: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.SCAPULA);
    },

    onGridcolumnAfterRender11: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.ARMPIT);
    },

    onGridcolumnAfterRender1114: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.FILTER_CHEST);
    },

    onGridcolumnAfterRender1113: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.ILIAC_CREAT);
    },

    onGridcolumnAfterRender1112: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.FILTER_AB);
    },

    onGridcolumnAfterRender111: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.QUADS);
    },

    onGridcolumnAfterRender1111: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.SUM);
    },

    onGridcolumnAfterRender31: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.FORM_PLANEXRCISE_WEIGHT);
    },

    onMeasuresTableItemClick1: function(dataview, record, item, index, e, eOpts) {
        LanistaTrainer.app.getController('MeasuresController').showForm(record);
    },

    onGridcolumnAfterRender41: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.ARM_LEFT);
    },

    onGridcolumnAfterRender211: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.ARM_RIGHT);
    },

    onGridcolumnAfterRender112: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.FILTER_CHEST);
    },

    onGridcolumnAfterRender11141: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.WAIST);
    },

    onGridcolumnAfterRender11131: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.NAVEL);
    },

    onGridcolumnAfterRender11121: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.ILIAC_CREAT);
    },

    onGridcolumnAfterRender1115: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.HIP);
    },

    onGridcolumnAfterRender11111: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.THING_LEFT);
    },

    onGridcolumnAfterRender311: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.THING_RIGHT);
    },

    onMeasuresTableItemClick11: function(dataview, record, item, index, e, eOpts) {
        LanistaTrainer.app.getController('MeasuresController').showForm(record);
    },

    onMeasuresPanelHide: function(component, eOpts) {
        component.destroy();
    }

});