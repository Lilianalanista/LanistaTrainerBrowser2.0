/*
 * File: app/view/MeasuresPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.view.MeasuresPanel', {
    extend: 'Ext.container.Container',
    alias: 'widget.measuresPanel',

    requires: [
        'LanistaTrainer.view.MeasuresPanelViewModel',
        'Ext.tab.Panel',
        'Ext.tab.Tab',
        'Ext.chart.CartesianChart',
        'Ext.chart.series.Line',
        'Ext.chart.axis.Time',
        'Ext.chart.Legend',
        'Ext.XTemplate',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.grid.column.Date',
        'Ext.chart.interactions.Abstract',
        'Ext.chart.interactions.ItemHighlight'
    ],

    viewModel: {
        type: 'measuresPanel'
    },
    cls: 'lanista-measures-panel',
    height: 250,
    id: 'measuresPanel',
    width: 400,
    defaultListenerScope: true,

    listeners: {
        hide: 'onMeasuresPanelHide'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                items: [
                    {
                        xtype: 'tabpanel',
                        id: 'measureTabs',
                        activeTab: 0,
                        items: [
                            {
                                xtype: 'panel',
                                id: 'measuresTab',
                                title: 'My Tab',
                                items: [
                                    me.processMeasuresChat({
                                        xtype: 'cartesian',
                                        height: 550,
                                        id: '',
                                        itemId: 'measuresChat',
                                        width: 1200,
                                        store: 'MeasuresStore',
                                        series: [
                                            me.processWeight({
                                                type: 'line',
                                                highlight: true,
                                                highlightCfg: {
                                                    scaling: 2
                                                },
                                                marker: {
                                                    type: 'square'
                                                },
                                                title: 'Weight',
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' Kg.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'weight'
                                                ]
                                            }),
                                            me.processHeight({
                                                type: 'line',
                                                highlight: true,
                                                marker: {
                                                    type: 'triangle'
                                                },
                                                title: 'Height',
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'height'
                                                ]
                                            }),
                                            me.processFutrex({
                                                type: 'line',
                                                highlight: true,
                                                marker: {
                                                    type: 'arrow'
                                                },
                                                title: 'Futrex',
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' %');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'futrex'
                                                ]
                                            }),
                                            me.processPercentage({
                                                type: 'line',
                                                highlight: true,
                                                marker: {
                                                    type: 'cross'
                                                },
                                                title: 'Percentage',
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' %');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'percentage'
                                                ]
                                            })
                                        ],
                                        axes: [
                                            {
                                                type: 'time',
                                                fields: [
                                                    'record_date'
                                                ],
                                                dateFormat: 'd-m-Y',
                                                step: [
                                                    Ext.Date.DAY,
                                                    90
                                                ],
                                                position: 'bottom'
                                            },
                                            {
                                                type: 'numeric',
                                                fields: [
                                                    'percentage'
                                                ],
                                                grid: true,
                                                minimum: 0,
                                                position: 'right'
                                            },
                                            {
                                                type: 'numeric',
                                                fields: [
                                                    'weight',
                                                    'height',
                                                    'futrex'
                                                ],
                                                grid: true,
                                                minimum: 0,
                                                position: 'left'
                                            }
                                        ],
                                        legend: me.processMyLegend3({
                                            xtype: 'legend',
                                            alwaysOnTop: true,
                                            border: true,
                                            defaultAlign: 't-t',
                                            liquidLayout: true,
                                            tpl: [
                                                '<div class="x-legend-container">',
                                                '    <tpl for=".">',
                                                '        <div class="x-legend-item">',
                                                '            <span class="x-legend-item-marker {[ values.disabled ? Ext.baseCSSPrefix + \'legend-inactive\' : \'\' ]}" ',
                                                '                style="background:{mark};">',
                                                '            </span>{name}',
                                                '        </div>',
                                                '    </tpl>',
                                                '</div>'
                                            ]
                                        }),
                                        listeners: {
                                            afterrender: 'onMeasuresChatAfterRender'
                                        }
                                    }),
                                    {
                                        xtype: 'gridpanel',
                                        height: 550,
                                        hidden: true,
                                        itemId: 'measuresTable',
                                        width: 1200,
                                        collapseFirst: false,
                                        frameHeader: false,
                                        header: false,
                                        enableColumnHide: false,
                                        enableColumnMove: false,
                                        enableColumnResize: false,
                                        sortableColumns: false,
                                        store: 'MeasuresStore',
                                        columns: [
                                            {
                                                xtype: 'datecolumn',
                                                cls: 'lanista-grid-record-date-measures',
                                                draggable: false,
                                                resizable: false,
                                                enableColumnHide: false,
                                                align: 'center',
                                                dataIndex: 'record_date',
                                                hideable: false,
                                                flex: 1,
                                                format: 'd-m-y',
                                                listeners: {
                                                    afterrender: 'onDatecolumnAfterRender'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                align: 'center',
                                                dataIndex: 'height',
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                align: 'center',
                                                dataIndex: 'weight',
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender2'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                resizable: false,
                                                align: 'center',
                                                dataIndex: 'futrex',
                                                hideable: false,
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender1'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                align: 'center',
                                                dataIndex: 'percentage',
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender3'
                                                }
                                            }
                                        ],
                                        listeners: {
                                            itemclick: 'onMeasuresTableItemClick'
                                        }
                                    }
                                ]
                            },
                            {
                                xtype: 'panel',
                                id: 'caliperTab',
                                title: 'My Tab',
                                items: [
                                    me.processMeasuresChat1({
                                        xtype: 'cartesian',
                                        height: 550,
                                        itemId: 'measuresChat',
                                        width: 1200,
                                        insetPadding: 20,
                                        store: 'MeasuresStore',
                                        series: [
                                            me.processMyLineSeries4({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'trizeps'
                                                ],
                                                smooth: 3
                                            }),
                                            me.processMyLineSeries5({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'scapula'
                                                ],
                                                smooth: 3
                                            }),
                                            me.processMyLineSeries6({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'auxiliar'
                                                ],
                                                smooth: 3
                                            }),
                                            me.processMyLineSeries7({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'chest'
                                                ],
                                                smooth: 3
                                            }),
                                            me.processMyLineSeries8({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'sprailium'
                                                ],
                                                smooth: 3
                                            }),
                                            me.processMyLineSeries9({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'abs'
                                                ],
                                                smooth: 3
                                            }),
                                            me.processMyLineSeries10({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'quads'
                                                ],
                                                smooth: 3
                                            })
                                        ],
                                        axes: [
                                            {
                                                type: 'time',
                                                fields: [
                                                    'record_date'
                                                ],
                                                dateFormat: 'd-m-Y',
                                                step: [
                                                    Ext.Date.MONTH,
                                                    3
                                                ],
                                                position: 'bottom'
                                            },
                                            {
                                                type: 'numeric',
                                                fields: [
                                                    'trizeps',
                                                    'scapula',
                                                    'auxiliar',
                                                    'chest',
                                                    'sprailium',
                                                    'abs',
                                                    'quads'
                                                ],
                                                minimum: 0,
                                                position: 'left'
                                            }
                                        ],
                                        legend: me.processMyLegend1({
                                            xtype: 'legend'
                                        }),
                                        listeners: {
                                            afterrender: 'onMeasuresChatAfterRender1'
                                        }
                                    }),
                                    {
                                        xtype: 'gridpanel',
                                        height: 550,
                                        hidden: true,
                                        itemId: 'measuresTable',
                                        width: 1200,
                                        collapseFirst: false,
                                        frameHeader: false,
                                        header: false,
                                        enableColumnHide: false,
                                        enableColumnMove: false,
                                        enableColumnResize: false,
                                        sortableColumns: false,
                                        store: 'MeasuresStore',
                                        columns: [
                                            {
                                                xtype: 'datecolumn',
                                                cls: 'lanista-grid-record-date-measures',
                                                draggable: false,
                                                resizable: false,
                                                enableColumnHide: false,
                                                align: 'center',
                                                dataIndex: 'record_date',
                                                hideable: false,
                                                flex: 1,
                                                format: 'd-m-y',
                                                listeners: {
                                                    afterrender: 'onDatecolumnAfterRender1'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                align: 'center',
                                                dataIndex: 'trizeps',
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender4'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                align: 'center',
                                                dataIndex: 'scapula',
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender21'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                resizable: false,
                                                align: 'center',
                                                dataIndex: 'auxiliar',
                                                hideable: false,
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender11'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                resizable: false,
                                                align: 'center',
                                                dataIndex: 'chest',
                                                hideable: false,
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender1114'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                resizable: false,
                                                align: 'center',
                                                dataIndex: 'sprailium',
                                                hideable: false,
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender1113'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                resizable: false,
                                                align: 'center',
                                                dataIndex: 'abs',
                                                hideable: false,
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender1112'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                resizable: false,
                                                align: 'center',
                                                dataIndex: 'quads',
                                                hideable: false,
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender111'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                resizable: false,
                                                align: 'center',
                                                dataIndex: 'sum',
                                                hideable: false,
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender1111'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                align: 'center',
                                                dataIndex: 'percentage',
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender31'
                                                }
                                            }
                                        ],
                                        listeners: {
                                            itemclick: 'onMeasuresTableItemClick1'
                                        }
                                    }
                                ]
                            },
                            me.processCircumferencesTab({
                                xtype: 'panel',
                                id: 'circumferencesTab',
                                title: 'My Tab',
                                items: [
                                    me.processMeasuresChat2({
                                        xtype: 'cartesian',
                                        height: 550,
                                        itemId: 'measuresChat',
                                        width: 1200,
                                        insetPadding: 20,
                                        store: 'CircumferencesStore',
                                        series: [
                                            me.processMyLineSeries4({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'arm_left'
                                                ],
                                                smooth: 3
                                            }),
                                            me.processMyLineSeries5({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'arm_right'
                                                ],
                                                smooth: 3
                                            }),
                                            me.processMyLineSeries6({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'chest'
                                                ],
                                                smooth: 3
                                            }),
                                            me.processMyLineSeries7({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'waist'
                                                ],
                                                smooth: 3
                                            }),
                                            me.processMyLineSeries8({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'umbilical'
                                                ],
                                                smooth: 3
                                            }),
                                            me.processMyLineSeries9({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'spina_ilica_ant'
                                                ],
                                                smooth: 3
                                            }),
                                            me.processMyLineSeries10({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'wide_hips'
                                                ],
                                                smooth: 3
                                            }),
                                            me.processMyLineSeries10({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'quads_left'
                                                ],
                                                smooth: 3
                                            }),
                                            me.processMyLineSeries10({
                                                type: 'line',
                                                marker: true,
                                                tooltip: {
                                                    trackMouse: true,
                                                    style: 'background: #fff',
                                                    renderer: function(storeItem, item) {
                                                        var title = item.series.getTitle();
                                                        this.setHtml(title + ': ' + storeItem.get(item.series.getYField()) + ' cm.');
                                                    }
                                                },
                                                xField: 'record_date',
                                                yField: [
                                                    'quads_right'
                                                ],
                                                smooth: 3
                                            })
                                        ],
                                        axes: [
                                            {
                                                type: 'time',
                                                fields: [
                                                    'record_date'
                                                ],
                                                dateFormat: 'd-m-Y',
                                                step: [
                                                    Ext.Date.MONTH,
                                                    3
                                                ],
                                                position: 'bottom'
                                            },
                                            {
                                                type: 'numeric',
                                                fields: [
                                                    'arm_left',
                                                    'arm_right',
                                                    'chest',
                                                    'waist',
                                                    'umbilical',
                                                    'spina_ilica_ant',
                                                    'wide_hips',
                                                    'quads_left',
                                                    'quads_right'
                                                ],
                                                minimum: 0,
                                                position: 'left',
                                                title: 'Numeric Axis'
                                            }
                                        ],
                                        legend: me.processMyLegend2({
                                            xtype: 'legend'
                                        }),
                                        listeners: {
                                            afterrender: 'onMeasuresChatAfterRender2'
                                        }
                                    }),
                                    {
                                        xtype: 'gridpanel',
                                        height: 550,
                                        hidden: true,
                                        itemId: 'measuresTable',
                                        width: 1200,
                                        collapseFirst: false,
                                        frameHeader: false,
                                        header: false,
                                        enableColumnHide: false,
                                        enableColumnMove: false,
                                        enableColumnResize: false,
                                        sortableColumns: false,
                                        store: 'CircumferencesStore',
                                        columns: [
                                            {
                                                xtype: 'datecolumn',
                                                cls: 'lanista-grid-record-date-measures',
                                                draggable: false,
                                                resizable: false,
                                                enableColumnHide: false,
                                                align: 'center',
                                                dataIndex: 'record_date',
                                                hideable: false,
                                                flex: 1,
                                                format: 'd-m-y',
                                                listeners: {
                                                    afterrender: 'onDatecolumnAfterRender2'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                align: 'center',
                                                dataIndex: 'arm_left',
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender41'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                align: 'center',
                                                dataIndex: 'arm_right',
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender211'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                resizable: false,
                                                align: 'center',
                                                dataIndex: 'chest',
                                                hideable: false,
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender112'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                resizable: false,
                                                align: 'center',
                                                dataIndex: 'waist',
                                                hideable: false,
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender11141'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                resizable: false,
                                                align: 'center',
                                                dataIndex: 'umbilical',
                                                hideable: false,
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender11131'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                resizable: false,
                                                align: 'center',
                                                dataIndex: 'spina_ilica_ant',
                                                hideable: false,
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender11121'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                resizable: false,
                                                align: 'center',
                                                dataIndex: 'wide_hips',
                                                hideable: false,
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender1115'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                resizable: false,
                                                align: 'center',
                                                dataIndex: 'quads_left',
                                                hideable: false,
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender11111'
                                                }
                                            },
                                            {
                                                xtype: 'gridcolumn',
                                                align: 'center',
                                                dataIndex: 'quads_right',
                                                flex: 1,
                                                listeners: {
                                                    afterrender: 'onGridcolumnAfterRender311'
                                                }
                                            }
                                        ],
                                        listeners: {
                                            itemclick: 'onMeasuresTableItemClick11'
                                        }
                                    }
                                ]
                            }),
                            {
                                xtype: 'panel',
                                hidden: true,
                                id: 'testsTab',
                                shrinkWrapDock: 2,
                                title: 'My Tab',
                                items: [
                                    {
                                        xtype: 'dataview',
                                        id: 'testView',
                                        tpl: [
                                            '<tpl for=".">',
                                            '  <div class="lanista-testpanel-item">',
                                            '      <div class="lanista-test-panel-date">{test_date}</div>',
                                            '  </div>  ',
                                            '</tpl>'
                                        ],
                                        itemSelector: 'div.lanista-testpanel-item',
                                        store: 'TestResultsStore'
                                    }
                                ]
                            }
                        ]
                    }
                ]
            };
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processWeight: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processHeight: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;

    },

    processFutrex: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;

    },

    processPercentage: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;

    },

    processMyLegend3: function(config) {
        config.docked = 'top';
        return config;
    },

    processMeasuresChat: function(config) {
        config.plugins =  {
                ptype: 'chartitemevents',
                moveEvents: true
            };


        return config;
    },

    processMyLineSeries4: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLineSeries5: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLineSeries6: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLineSeries7: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLineSeries8: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLineSeries9: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLineSeries10: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLegend1: function(config) {
        config.docked = 'top';
        return config;
    },

    processMeasuresChat1: function(config) {
        config.plugins =  {
            ptype: 'chartitemevents',
            moveEvents: true
        };

        return config;
    },

    processMyLineSeries4: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLineSeries5: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLineSeries6: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLineSeries7: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLineSeries8: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLineSeries9: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLineSeries10: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLineSeries10: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLineSeries10: function(config) {
        config.listeners = {
            itemclick : function(series, item, event, Opts) {
                LanistaTrainer.app.getController('MeasuresController').showForm(item.record);
            }
        };
        return config;
    },

    processMyLegend2: function(config) {
        config.docked = 'top';
        return config;
    },

    processMeasuresChat2: function(config) {
        config.plugins =  {
                ptype: 'chartitemevents',
                moveEvents: true
            };
        return config;
    },

    processCircumferencesTab: function(config) {

        return config;
    },

    onMeasuresChatAfterRender: function(component, eOpts) {
        var el = component.el;

        component.series[0].setTitle(Ext.ux.LanguageManager.TranslationArray.FILTER_BODYWEIGHT.toUpperCase());
        component.series[1].setTitle(Ext.ux.LanguageManager.TranslationArray.BODY_SIZE.toUpperCase());
        component.series[2].setTitle(Ext.ux.LanguageManager.TranslationArray.BODY_FAT.toUpperCase());
        component.series[3].setTitle(Ext.ux.LanguageManager.TranslationArray.CALIPOMETRIE.toUpperCase());

        el.on(
            'mouseover', function(e,t) {
                Ext.get(t).dom.className = Ext.get(t).dom.className + ' item-clicked';
                Ext.get(t).dom.className = Ext.get(t).dom.className.replace(/item-not-clicked/gi,'');
            },
            this,{ delegate: '.x-legend-item'});

        el.on(
            'mouseout', function(e,t) {
                Ext.get(t).dom.className = Ext.get(t).dom.className + ' item-not-clicked';
                Ext.get(t).dom.className = Ext.get(t).dom.className.replace(/item-clicked/gi,'');
            },
            this,{delegate: '.x-legend-item'});
    },

    onDatecolumnAfterRender: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.DATE.toUpperCase());
    },

    onGridcolumnAfterRender: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.BODY_SIZE.toUpperCase());
    },

    onGridcolumnAfterRender2: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.FORM_PLANEXRCISE_WEIGHT.toUpperCase());
    },

    onGridcolumnAfterRender1: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.BODY_FAT.toUpperCase());
    },

    onGridcolumnAfterRender3: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.FORM_PLANEXRCISE_WEIGHT.toUpperCase());
    },

    onMeasuresTableItemClick: function(dataview, record, item, index, e, eOpts) {
        LanistaTrainer.app.getController('MeasuresController').showForm(record);
    },

    onMeasuresChatAfterRender1: function(component, eOpts) {
        var el = component.el;

        component.series[0].setTitle(Ext.ux.LanguageManager.TranslationArray.TRICEPS.toUpperCase());
        component.series[1].setTitle(Ext.ux.LanguageManager.TranslationArray.SCAPULA.toUpperCase());
        component.series[2].setTitle(Ext.ux.LanguageManager.TranslationArray.ARMPIT.toUpperCase());
        component.series[3].setTitle(Ext.ux.LanguageManager.TranslationArray.FILTER_CHEST.toUpperCase());
        component.series[4].setTitle(Ext.ux.LanguageManager.TranslationArray.ILIAC_CREAT.toUpperCase());
        component.series[5].setTitle(Ext.ux.LanguageManager.TranslationArray.FILTER_AB.toUpperCase());
        component.series[6].setTitle(Ext.ux.LanguageManager.TranslationArray.QUADS.toUpperCase());

        el.on(
            'mouseover', function(e,t) {
                Ext.get(t).dom.className = Ext.get(t).dom.className + ' item-clicked';
                Ext.get(t).dom.className = Ext.get(t).dom.className.replace(/item-not-clicked/gi,'');
            },
            this,{ delegate: '.x-legend-item'});

        el.on(
            'mouseout', function(e,t) {
                Ext.get(t).dom.className = Ext.get(t).dom.className + ' item-not-clicked';
                Ext.get(t).dom.className = Ext.get(t).dom.className.replace(/item-clicked/gi,'');
            },
            this,{delegate: '.x-legend-item'});

    },

    onDatecolumnAfterRender1: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.DATE.toUpperCase());
    },

    onGridcolumnAfterRender4: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.TRICEPS.toUpperCase());
    },

    onGridcolumnAfterRender21: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.SCAPULA.toUpperCase());
    },

    onGridcolumnAfterRender11: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.ARMPIT.toUpperCase());
    },

    onGridcolumnAfterRender1114: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.FILTER_CHEST.toUpperCase());
    },

    onGridcolumnAfterRender1113: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.ILIAC_CREAT.toUpperCase());
    },

    onGridcolumnAfterRender1112: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.FILTER_AB.toUpperCase());
    },

    onGridcolumnAfterRender111: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.QUADS.toUpperCase());
    },

    onGridcolumnAfterRender1111: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.SUM.toUpperCase());
    },

    onGridcolumnAfterRender31: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.FORM_PLANEXRCISE_WEIGHT.toUpperCase());
    },

    onMeasuresTableItemClick1: function(dataview, record, item, index, e, eOpts) {
        LanistaTrainer.app.getController('MeasuresController').showForm(record);
    },

    onMeasuresChatAfterRender2: function(component, eOpts) {
        var el = component.el;

        component.series[0].setTitle(Ext.ux.LanguageManager.TranslationArray.ARM_LEFT.toUpperCase());
        component.series[1].setTitle(Ext.ux.LanguageManager.TranslationArray.ARM_RIGHT.toUpperCase());
        component.series[2].setTitle(Ext.ux.LanguageManager.TranslationArray.FILTER_CHEST.toUpperCase());
        component.series[3].setTitle(Ext.ux.LanguageManager.TranslationArray.WAIST.toUpperCase());
        component.series[4].setTitle(Ext.ux.LanguageManager.TranslationArray.NAVEL.toUpperCase());
        component.series[5].setTitle(Ext.ux.LanguageManager.TranslationArray.SPINE.toUpperCase());
        component.series[6].setTitle(Ext.ux.LanguageManager.TranslationArray.HIP.toUpperCase());
        component.series[7].setTitle(Ext.ux.LanguageManager.TranslationArray.THING_LEFT.toUpperCase());
        component.series[8].setTitle(Ext.ux.LanguageManager.TranslationArray.THING_RIGHT.toUpperCase());

        el.on(
            'click', function(e,t) {
                Ext.get(t).dom.className = Ext.get(t).dom.className + ' item-clicked';
                Ext.get(t).dom.className = Ext.get(t).dom.className.replace(/item-not-clicked/gi,'');
            },
            this,{ delegate: '.x-legend-item'});

        el.on(
            'mouseover', function(e,t) {
                Ext.get(t).dom.className = Ext.get(t).dom.className + ' item-clicked';
                Ext.get(t).dom.className = Ext.get(t).dom.className.replace(/item-not-clicked/gi,'');
            },
            this,{ delegate: '.x-legend-item'});

        el.on(
            'mouseout', function(e,t) {
                Ext.get(t).dom.className = Ext.get(t).dom.className + ' item-not-clicked';
                Ext.get(t).dom.className = Ext.get(t).dom.className.replace(/item-clicked/gi,'');
            },
            this,{delegate: '.x-legend-item'});

    },

    onDatecolumnAfterRender2: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.DATE.toUpperCase());
    },

    onGridcolumnAfterRender41: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.ARM_LEFT.toUpperCase());
    },

    onGridcolumnAfterRender211: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.ARM_RIGHT.toUpperCase());
    },

    onGridcolumnAfterRender112: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.FILTER_CHEST.toUpperCase());
    },

    onGridcolumnAfterRender11141: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.WAIST.toUpperCase());
    },

    onGridcolumnAfterRender11131: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.NAVEL.toUpperCase());
    },

    onGridcolumnAfterRender11121: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.ILIAC_CREAT.toUpperCase());
    },

    onGridcolumnAfterRender1115: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.HIP.toUpperCase());
    },

    onGridcolumnAfterRender11111: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.THING_LEFT.toUpperCase());
    },

    onGridcolumnAfterRender311: function(component, eOpts) {
        component.setText(Ext.ux.LanguageManager.TranslationArray.THING_RIGHT.toUpperCase());
    },

    onMeasuresTableItemClick11: function(dataview, record, item, index, e, eOpts) {
        LanistaTrainer.app.getController('MeasuresController').showForm(record);
    },

    onMeasuresPanelHide: function(component, eOpts) {
        component.destroy();
    }

});