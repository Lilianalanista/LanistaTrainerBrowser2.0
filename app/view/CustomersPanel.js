/*
 * File: app/view/CustomersPanel.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.view.CustomersPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.customersPanel',

    requires: [
        'Ext.view.View',
        'Ext.XTemplate',
        'Ext.panel.Tool'
    ],

    border: false,
    height: 250,
    id: 'customersPanel',
    style: 'padding-top: 120px;',
    width: 400,
    layout: 'fit',
    frameHeader: false,
    headerPosition: 'bottom',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            defaultDockWeights: {
                top: {
                    render: 1,
                    visual: 1
                },
                left: {
                    render: 3,
                    visual: 5
                },
                right: {
                    render: 5,
                    visual: 7
                },
                bottom: {
                    render: 7,
                    visual: 3
                }
            },
            items: [
                {
                    xtype: 'dataview',
                    cls: 'tpl-gpclg44s',
                    height: 250,
                    id: 'viewCustomers',
                    tpl: [
                        '<tpl for=".">',
                        '    <div class="customer-item">',
                        '        <div class="customer-list-image customer-info-item" id="customerItemInfo" style="background-image: url({[Ext.ux.ConfigManager.getRoot() + \'/tpmanager/img/p/\' + values[\'id\'] + \'_photo.jpg\']});"></div>',
                        '        <div class="customer-list-background customer-info-item" id="customerItemInfo" style="customer-image">j</div>',
                        '        <div class="customer-list-firstname">{[values[\'first_name\']]}</div>        		',
                        '        <div class="customer-list-lastname">{[values[\'last_name\']]}</div>',
                        '    </div>',
                        '</tpl>  ',
                        ''
                    ],
                    width: 400,
                    itemSelector: 'div.customer-item',
                    store: 'CustomerStore',
                    listeners: {
                        hide: {
                            fn: me.onDataviewHide,
                            scope: me
                        },
                        afterrender: {
                            fn: me.onViewCustomersAfterRender,
                            scope: me
                        },
                        itemclick: {
                            fn: me.onViewCustomersItemClick,
                            scope: me
                        }
                    }
                }
            ],
            tools: [
                {
                    xtype: 'tool',
                    id: 'previousCustomers',
                    type: 'left'
                },
                {
                    xtype: 'tool',
                    id: 'nextCustomers',
                    type: 'right'
                }
            ]
        });

        me.callParent(arguments);
    },

    onDataviewHide: function(component, eOpts) {
        component.destroy();
    },

    onViewCustomersAfterRender: function(component, eOpts) {

        var el = component.el;
        el.on(
            'click', function(e,t) {
                                    if ( t.id === 'customerItemInfo' )
                                            el.addCls('item-not-clicked');
            },
            this, {delegate: '.customer-info-item'});
        el.on(
            'mouseover', function(e,t) {
                                if ( t.id === 'customerItemInfo' )
                                {
                                    el.removeCls('item-not-clicked');
                                    el.addCls('item-clicked');
                                }
                            },
            this,{ delegate: '.customer-info-item'});
        el.on(
            'mouseout', function(e,t) {
                                if ( t.id === 'customerItemInfo' )
                                {
                                    el.removeCls('item-clicked');
                                    el.addCls('item-not-clicked');
                                }
                            },
            this,{delegate: '.customer-info-item'});


    },

    onViewCustomersItemClick: function(dataview, record, item, index, e, eOpts) {

        LanistaTrainer.app.fireEvent('close' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1], function() {
            LanistaTrainer.app.currentCustomer = record;
            LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'CustomerExercisesPanel';
            LanistaTrainer.app.fireEvent('showCustomerExercisesPanel');
        });
    }

});